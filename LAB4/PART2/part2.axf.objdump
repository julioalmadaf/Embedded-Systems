
C:/EMBEDDED/LAB4/PART2/part2.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
/* Program that counts consecutive 1â€™s */ 
.text 
.global 	_start 
_start: 
			
			LDR			R3, =0xFF200050	//base address Pushbuttons
   0:	e59f30b4 	ldr	r3, [pc, #180]	; bc <BIT_CODES+0xc>
			LDR 		R8, =0xFF200020 // base address of HEX3-HEX0
   4:	e59f80b4 	ldr	r8, [pc, #180]	; c0 <BIT_CODES+0x10>
			LDR 		R9, =0xFF20005C
   8:	e59f90b4 	ldr	r9, [pc, #180]	; c4 <BIT_CODES+0x14>
			MOV			R5,#0
   c:	e3a05000 	mov	r5, #0

00000010 <LOOP>:
LOOP:		MOV 		R0, R5 			// display R5 on HEX1-0 
  10:	e1a00005 	mov	r0, r5
			BL 			DIVIDE 			// ones digit will be in R0; tens digit in R1 
  14:	eb00001d 	bl	90 <DIVIDE>
			MOV 		R10, R1 		// save the tens digit 
  18:	e1a0a001 	mov	r10, r1
			BL 			SEG7_CODE 
  1c:	eb000018 	bl	84 <SEG7_CODE>
			MOV 		R4, R0 			// save bit code 
  20:	e1a04000 	mov	r4, r0
			MOV 		R0, R10 		// retrieve the tens digit, get bit code 
  24:	e1a0000a 	mov	r0, r10
			BL 			SEG7_CODE 
  28:	eb000015 	bl	84 <SEG7_CODE>
			ORR 		R4, R4, R0, LSL #8	//PRINT ON 2 7 SEG
  2c:	e1844400 	orr	r4, r4, r0, lsl #8
			STR			R4,[R8]				
  30:	e5884000 	str	r4, [r8]
			LDR			R6,[R9]				//CHECK VALUES OF EDGEREGISTER
  34:	e5996000 	ldr	r6, [r9]
			CMP			R6, #0
  38:	e3560000 	cmp	r6, #0
			BNE			WAIT			//IF BUTTON PRESS PAUSE COUNTER
  3c:	1a000004 	bne	54 <WAIT>

00000040 <DO_DELAY>:
DO_DELAY: 	LDR 		R7, =200000000 	// delay counter 
  40:	e59f7080 	ldr	r7, [pc, #128]	; c8 <BIT_CODES+0x18>

00000044 <SUB_LOOP>:
SUB_LOOP: 	SUBS 		R7, R7, #1 
  44:	e2577001 	subs	r7, r7, #1
			BNE 		SUB_LOOP
  48:	1afffffd 	bne	44 <SUB_LOOP>
			BL			PLUS			//ADDS 1 EVERY .25 SECONDS
  4c:	eb000008 	bl	74 <PLUS>
			B			LOOP
  50:	eaffffee 	b	10 <LOOP>

00000054 <WAIT>:
			
WAIT:		STR			R6, [R9]		//RELEASE INTERRUPT, RESETTING VALUES OF R9
  54:	e5896000 	str	r6, [r9]

00000058 <WOW>:
WOW:		LDR			R6,[R9]			//CHECK VALUE OF BUTTONS
  58:	e5996000 	ldr	r6, [r9]
			CMP			R6,#0
  5c:	e3560000 	cmp	r6, #0
			BEQ			WOW				//WAIT FOR BUTTON PRESS
  60:	0afffffc 	beq	58 <WOW>
			STR			R6, [R9]		//RELEASE INTERRUPT, RESETTING VALUES OF R9
  64:	e5896000 	str	r6, [r9]
			B			LOOP			
  68:	eaffffe8 	b	10 <LOOP>

0000006c <ZERO>:

ZERO:		MOV			R5,#0
  6c:	e3a05000 	mov	r5, #0
			BX			LR
  70:	e12fff1e 	bx	lr

00000074 <PLUS>:

PLUS:		ADD			R5,R5,#1		//COUNTER UNTIL 99
  74:	e2855001 	add	r5, r5, #1
			CMP			R5,#100
  78:	e3550064 	cmp	r5, #100	; 0x64
			BEQ			ZERO
  7c:	0afffffa 	beq	6c <ZERO>
			BX			LR
  80:	e12fff1e 	bx	lr

00000084 <SEG7_CODE>:
			
/* Subroutine to convert the digits from 0 to 9 to be shown on a HEX display. 
* Parameters: R0 = the decimal value of the digit to be displayed 
* Returns: R0 = bit patterm to be written to the HEX display */ 
SEG7_CODE: 	LDR 		R1, =BIT_CODES 
  84:	e59f1040 	ldr	r1, [pc, #64]	; cc <BIT_CODES+0x1c>
			LDRB 		R0, [R1, R0] 
  88:	e7d10000 	ldrb	r0, [r1, r0]
			BX 			LR
  8c:	e12fff1e 	bx	lr

00000090 <DIVIDE>:
			
DIVIDE: 	MOV 		R2, #0 
  90:	e3a02000 	mov	r2, #0

00000094 <CONT>:
CONT: 		CMP 		R0, #10 
  94:	e350000a 	cmp	r0, #10
			BLT 		DIV_END 
  98:	ba000002 	blt	a8 <DIV_END>
			SUB 		R0, #10 
  9c:	e240000a 	sub	r0, r0, #10
			ADD 		R2, #1 
  a0:	e2822001 	add	r2, r2, #1
			B 			CONT 
  a4:	eafffffa 	b	94 <CONT>

000000a8 <DIV_END>:
DIV_END: 	MOV 		R1, R2 			// return quotient in R1 (remainder is in R0) 
  a8:	e1a01002 	mov	r1, r2
			BX 			LR
  ac:	e12fff1e 	bx	lr

000000b0 <BIT_CODES>:
  b0:	4f5b063f 	.word	0x4f5b063f
  b4:	077d6d66 	.word	0x077d6d66
  b8:	0000677f 	.word	0x0000677f
  bc:	ff200050 	.word	0xff200050
  c0:	ff200020 	.word	0xff200020
  c4:	ff20005c 	.word	0xff20005c
  c8:	0bebc200 	.word	0x0bebc200
  cc:	000000b0 	.word	0x000000b0
