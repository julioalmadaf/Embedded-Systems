
C:/EMBEDDED/LAB4/PART3/part3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
/* Program that counts consecutive 1â€™s */ 
.text 
.global 	_start 
_start: 
			
			LDR			R3, =0xFFFEC600	//base address A9 PRIVATE TIMER
   0:	e59f30d4 	ldr	r3, [pc, #212]	; dc <BIT_CODES+0xc>
			LDR 		R8, =0xFF200020 // base address of HEX3-HEX0
   4:	e59f80d4 	ldr	r8, [pc, #212]	; e0 <BIT_CODES+0x10>
			LDR 		R9, =0xFF20005C	//base address buttons
   8:	e59f90d4 	ldr	r9, [pc, #212]	; e4 <BIT_CODES+0x14>
			LDR 		R7, =50000000 	// Load Value
   c:	e59f70d4 	ldr	r7, [pc, #212]	; e8 <BIT_CODES+0x18>
			STR			R7, [R3]
  10:	e5837000 	str	r7, [r3]
			LDR			R3, =0xFFFEC608	//CONTROL REGISTER
  14:	e59f30d0 	ldr	r3, [pc, #208]	; ec <BIT_CODES+0x1c>
			MOV			R7, #3			//AE bits set to 1, Enabled and A to reload value of load Value
  18:	e3a07003 	mov	r7, #3
			STR			R7,[R3]
  1c:	e5837000 	str	r7, [r3]
			LDR			R3, =0xFFFEC60C	//Interrupt status
  20:	e59f30c8 	ldr	r3, [pc, #200]	; f0 <BIT_CODES+0x20>
			MOV			R5,#0
  24:	e3a05000 	mov	r5, #0

00000028 <LOOP>:
LOOP:		MOV 		R0, R5 			// display R5 on HEX1-0 
  28:	e1a00005 	mov	r0, r5
			BL 			DIVIDE 			// ones digit will be in R0; tens digit in R1 
  2c:	eb00001f 	bl	b0 <DIVIDE>
			MOV 		R10, R1 		// save the tens digit 
  30:	e1a0a001 	mov	r10, r1
			BL 			SEG7_CODE 
  34:	eb00001a 	bl	a4 <SEG7_CODE>
			MOV 		R4, R0 			// save bit code 
  38:	e1a04000 	mov	r4, r0
			MOV 		R0, R10 		// retrieve the tens digit, get bit code 
  3c:	e1a0000a 	mov	r0, r10
			BL 			SEG7_CODE 
  40:	eb000017 	bl	a4 <SEG7_CODE>
			ORR 		R4, R4, R0, LSL #8	//PRINT ON 2 7 SEG
  44:	e1844400 	orr	r4, r4, r0, lsl #8
			STR			R4,[R8]				
  48:	e5884000 	str	r4, [r8]
			LDR			R6,[R9]				//CHECK VALUES OF EDGEREGISTER
  4c:	e5996000 	ldr	r6, [r9]
			CMP			R6, #0
  50:	e3560000 	cmp	r6, #0
			BNE			WAIT			//IF BUTTON PRESS PAUSE COUNTER
  54:	1a000006 	bne	74 <WAIT>
			LDR			R7, [R3]
  58:	e5937000 	ldr	r7, [r3]
			CMP			R7, #0
  5c:	e3570000 	cmp	r7, #0
			BEQ			LOOP
  60:	0afffff0 	beq	28 <LOOP>
			MOV			R7, #1
  64:	e3a07001 	mov	r7, #1
			STR			R7,[R3]
  68:	e5837000 	str	r7, [r3]
			BL			PLUS			//ADDS 1 EVERY .25 SECONDS
  6c:	eb000008 	bl	94 <PLUS>
			B			LOOP
  70:	eaffffec 	b	28 <LOOP>

00000074 <WAIT>:
			
WAIT:		STR			R6, [R9]		//RELEASE INTERRUPT, RESETTING VALUES OF R9
  74:	e5896000 	str	r6, [r9]

00000078 <WOW>:
WOW:		LDR			R6,[R9]			//CHECK VALUE OF BUTTONS
  78:	e5996000 	ldr	r6, [r9]
			CMP			R6,#0
  7c:	e3560000 	cmp	r6, #0
			BEQ			WOW				//WAIT FOR BUTTON PRESS
  80:	0afffffc 	beq	78 <WOW>
			STR			R6, [R9]		//RELEASE INTERRUPT, RESETTING VALUES OF R9
  84:	e5896000 	str	r6, [r9]
			B			LOOP			
  88:	eaffffe6 	b	28 <LOOP>

0000008c <ZERO>:

ZERO:		MOV			R5,#0
  8c:	e3a05000 	mov	r5, #0
			BX			LR
  90:	e12fff1e 	bx	lr

00000094 <PLUS>:

PLUS:		ADD			R5,R5,#1		//COUNTER UNTIL 99
  94:	e2855001 	add	r5, r5, #1
			CMP			R5,#100
  98:	e3550064 	cmp	r5, #100	; 0x64
			BEQ			ZERO
  9c:	0afffffa 	beq	8c <ZERO>
			BX			LR
  a0:	e12fff1e 	bx	lr

000000a4 <SEG7_CODE>:
			
/* Subroutine to convert the digits from 0 to 9 to be shown on a HEX display. 
* Parameters: R0 = the decimal value of the digit to be displayed 
* Returns: R0 = bit patterm to be written to the HEX display */ 
SEG7_CODE: 	LDR 		R1, =BIT_CODES 
  a4:	e59f1048 	ldr	r1, [pc, #72]	; f4 <BIT_CODES+0x24>
			LDRB 		R0, [R1, R0] 
  a8:	e7d10000 	ldrb	r0, [r1, r0]
			BX 			LR
  ac:	e12fff1e 	bx	lr

000000b0 <DIVIDE>:
			
DIVIDE: 	MOV 		R2, #0 
  b0:	e3a02000 	mov	r2, #0

000000b4 <CONT>:
CONT: 		CMP 		R0, #10 
  b4:	e350000a 	cmp	r0, #10
			BLT 		DIV_END 
  b8:	ba000002 	blt	c8 <DIV_END>
			SUB 		R0, #10 
  bc:	e240000a 	sub	r0, r0, #10
			ADD 		R2, #1 
  c0:	e2822001 	add	r2, r2, #1
			B 			CONT 
  c4:	eafffffa 	b	b4 <CONT>

000000c8 <DIV_END>:
DIV_END: 	MOV 		R1, R2 			// return quotient in R1 (remainder is in R0) 
  c8:	e1a01002 	mov	r1, r2
			BX 			LR
  cc:	e12fff1e 	bx	lr

000000d0 <BIT_CODES>:
  d0:	4f5b063f 	.word	0x4f5b063f
  d4:	077d6d66 	.word	0x077d6d66
  d8:	0000677f 	.word	0x0000677f
  dc:	fffec600 	.word	0xfffec600
  e0:	ff200020 	.word	0xff200020
  e4:	ff20005c 	.word	0xff20005c
  e8:	02faf080 	.word	0x02faf080
  ec:	fffec608 	.word	0xfffec608
  f0:	fffec60c 	.word	0xfffec60c
  f4:	000000d0 	.word	0x000000d0
