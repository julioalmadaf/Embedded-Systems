
C:/EMBEDDED/LAB8/PART1/PART1.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 54 08 00 00 58 08 00 00 5c 08 00 00     @...T...X...\...
  30:	60 08 00 00 50 08 00 00 64 08 00 00 68 08 00 00     `...P...d...h...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001c4 	bl	7ec <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000950 	.word	0x00000950

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d88 	.word	0x00000d88

00000124 <__cs3_heap_start_ptr>:
 124:	00000db8 	.word	0x00000db8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000d90 	.word	0x00000d90
 170:	00000d93 	.word	0x00000d93
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d90 	.word	0x00000d90
 1bc:	00000d90 	.word	0x00000d90
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d90 	.word	0x00000d90
 200:	00000000 	.word	0x00000000
 204:	000008f4 	.word	0x000008f4

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000008f4 	.word	0x000008f4
 250:	00000d94 	.word	0x00000d94
 254:	00000950 	.word	0x00000950
 258:	00000000 	.word	0x00000000

0000025c <swap>:

void swap(int *a, int *b)
{
   int t;
 
   t  = *b;
 25c:	e5913000 	ldr	r3, [r1]
   *b = *a;
 260:	e5902000 	ldr	r2, [r0]
 264:	e5812000 	str	r2, [r1]
   *a = t;
 268:	e5803000 	str	r3, [r0]
 26c:	e12fff1e 	bx	lr

00000270 <plot_pixel>:
}

void plot_pixel(int x, int y, short int line_color)
{
	*(short int*)(pixel_buffer_start + (y<<10)+(x<<1))=line_color;
 270:	e3003dac 	movw	r3, #3500	; 0xdac
 274:	e3403000 	movt	r3, #0
 278:	e5933000 	ldr	r3, [r3]
 27c:	e1a00080 	lsl	r0, r0, #1
 280:	e0831501 	add	r1, r3, r1, lsl #10
 284:	e18120b0 	strh	r2, [r1, r0]
 288:	e12fff1e 	bx	lr

0000028c <draw_line>:
}

int y_step=0;
void draw_line(int x0, int x1, int y0, int y1, short int color)
{
 28c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 290:	e24dd014 	sub	sp, sp, #20
 294:	e58d000c 	str	r0, [sp, #12]
 298:	e58d1008 	str	r1, [sp, #8]
 29c:	e58d2004 	str	r2, [sp, #4]
 2a0:	e58d3000 	str	r3, [sp]
 2a4:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
	bool is_steep= abs(y1-y0) > abs(x1-x0);						//THE LINE DOESNT MOVE THAT MUCH ON THE HORIZONTAL AXIS
 2a8:	e0623003 	rsb	r3, r2, r3
 2ac:	e3530000 	cmp	r3, #0
 2b0:	b2633000 	rsblt	r3, r3, #0
 2b4:	e0601001 	rsb	r1, r0, r1
 2b8:	e0218fc1 	eor	r8, r1, r1, asr #31
 2bc:	e0488fc1 	sub	r8, r8, r1, asr #31
 2c0:	e1530008 	cmp	r3, r8
 2c4:	d3a08000 	movle	r8, #0
 2c8:	c3a08001 	movgt	r8, #1
	if(is_steep)												//				
 2cc:	e3580000 	cmp	r8, #0
 2d0:	0a000005 	beq	2ec <draw_line+0x60>
	{
		swap(&x0,&y0);
 2d4:	e28d000c 	add	r0, sp, #12
 2d8:	e28d1004 	add	r1, sp, #4
 2dc:	ebffffde 	bl	25c <swap>
		swap(&x1,&y1);
 2e0:	e28d0008 	add	r0, sp, #8
 2e4:	e1a0100d 	mov	r1, sp
 2e8:	ebffffdb 	bl	25c <swap>
	}
	if( x0 > x1)
 2ec:	e59d3008 	ldr	r3, [sp, #8]
 2f0:	e59d200c 	ldr	r2, [sp, #12]
 2f4:	e1520003 	cmp	r2, r3
 2f8:	da000005 	ble	314 <draw_line+0x88>
	{
		swap(&x0,&x1);
 2fc:	e28d000c 	add	r0, sp, #12
 300:	e28d1008 	add	r1, sp, #8
 304:	ebffffd4 	bl	25c <swap>
		swap(&y0,&y1);
 308:	e28d0004 	add	r0, sp, #4
 30c:	e1a0100d 	mov	r1, sp
 310:	ebffffd1 	bl	25c <swap>
	}
	
	int deltax= x1-x0;
 314:	e59d500c 	ldr	r5, [sp, #12]
 318:	e59d9008 	ldr	r9, [sp, #8]
 31c:	e0659009 	rsb	r9, r5, r9
	int deltay= y1-y0;
 320:	e59d3000 	ldr	r3, [sp]
 324:	e59d6004 	ldr	r6, [sp, #4]
 328:	e0667003 	rsb	r7, r6, r3
	int error = -(deltax/2);
 32c:	e0894fa9 	add	r4, r9, r9, lsr #31
 330:	e1a040c4 	asr	r4, r4, #1
 334:	e2644000 	rsb	r4, r4, #0
	int y = y0;
	if(y0 < y1) y_step=1;
 338:	e1530006 	cmp	r3, r6
 33c:	da000007 	ble	360 <draw_line+0xd4>
 340:	e3003dac 	movw	r3, #3500	; 0xdac
 344:	e3403000 	movt	r3, #0
 348:	e3a02001 	mov	r2, #1
 34c:	e5832004 	str	r2, [r3, #4]
	else y_step=-1;
	int x=0;
	for(x=x0;x<x1;x++)
 350:	e59d3008 	ldr	r3, [sp, #8]
 354:	e1550003 	cmp	r5, r3
 358:	ba000005 	blt	374 <draw_line+0xe8>
 35c:	ea000017 	b	3c0 <draw_line+0x134>
	int deltax= x1-x0;
	int deltay= y1-y0;
	int error = -(deltax/2);
	int y = y0;
	if(y0 < y1) y_step=1;
	else y_step=-1;
 360:	e3003dac 	movw	r3, #3500	; 0xdac
 364:	e3403000 	movt	r3, #0
 368:	e3e02000 	mvn	r2, #0
 36c:	e5832004 	str	r2, [r3, #4]
 370:	eafffff6 	b	350 <draw_line+0xc4>
	int x=0;
	for(x=x0;x<x1;x++)
	{
		if (is_steep) plot_pixel(y,x,color);
		else plot_pixel(x,y,color);
		error += abs(deltay);
 374:	e3570000 	cmp	r7, #0
 378:	b2677000 	rsblt	r7, r7, #0
		if (error>=0)
		{
			y += y_step;
 37c:	e300bdac 	movw	r11, #3500	; 0xdac
 380:	e340b000 	movt	r11, #0
	if(y0 < y1) y_step=1;
	else y_step=-1;
	int x=0;
	for(x=x0;x<x1;x++)
	{
		if (is_steep) plot_pixel(y,x,color);
 384:	e3580000 	cmp	r8, #0
 388:	11a00006 	movne	r0, r6
 38c:	11a01005 	movne	r1, r5
		else plot_pixel(x,y,color);
 390:	01a00005 	moveq	r0, r5
 394:	01a01006 	moveq	r1, r6
 398:	e1a0200a 	mov	r2, r10
 39c:	ebffffb3 	bl	270 <plot_pixel>
		error += abs(deltay);
		if (error>=0)
 3a0:	e0944007 	adds	r4, r4, r7
		{
			y += y_step;
 3a4:	559b3004 	ldrpl	r3, [r11, #4]
 3a8:	50866003 	addpl	r6, r6, r3
			error -= deltax;
 3ac:	50694004 	rsbpl	r4, r9, r4
	int error = -(deltax/2);
	int y = y0;
	if(y0 < y1) y_step=1;
	else y_step=-1;
	int x=0;
	for(x=x0;x<x1;x++)
 3b0:	e2855001 	add	r5, r5, #1
 3b4:	e59d3008 	ldr	r3, [sp, #8]
 3b8:	e1530005 	cmp	r3, r5
 3bc:	cafffff0 	bgt	384 <draw_line+0xf8>
		{
			y += y_step;
			error -= deltax;
		}
	}
}
 3c0:	e28dd014 	add	sp, sp, #20
 3c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000003c8 <CLEAR>:


void CLEAR() {
 3c8:	e92d0070 	push	{r4, r5, r6}
    int pixel_ptr, row, col;
    for (row = 0; row <= STANDARD_Y; row++)
 3cc:	e3a06000 	mov	r6, #0
        for (col = 0; col <= STANDARD_X; ++col) {
            pixel_ptr = pixel_buffer_start + (row << 10) + (col << 1);
 3d0:	e1a00006 	mov	r0, r6
 3d4:	e3004dac 	movw	r4, #3500	; 0xdac
 3d8:	e3404000 	movt	r4, #0


void CLEAR() {
    int pixel_ptr, row, col;
    for (row = 0; row <= STANDARD_Y; row++)
        for (col = 0; col <= STANDARD_X; ++col) {
 3dc:	e3005141 	movw	r5, #321	; 0x141
 3e0:	ea000009 	b	40c <CLEAR+0x44>
            pixel_ptr = pixel_buffer_start + (row << 10) + (col << 1);
 3e4:	e5941000 	ldr	r1, [r4]
 3e8:	e1a02083 	lsl	r2, r3, #1
            *(short *)pixel_ptr = 0; // set pixel color
 3ec:	e08c1001 	add	r1, r12, r1
 3f0:	e18100b2 	strh	r0, [r1, r2]


void CLEAR() {
    int pixel_ptr, row, col;
    for (row = 0; row <= STANDARD_Y; row++)
        for (col = 0; col <= STANDARD_X; ++col) {
 3f4:	e2833001 	add	r3, r3, #1
 3f8:	e1530005 	cmp	r3, r5
 3fc:	1afffff8 	bne	3e4 <CLEAR+0x1c>
}


void CLEAR() {
    int pixel_ptr, row, col;
    for (row = 0; row <= STANDARD_Y; row++)
 400:	e2866001 	add	r6, r6, #1
 404:	e35600f1 	cmp	r6, #241	; 0xf1
 408:	0a000002 	beq	418 <CLEAR+0x50>
        for (col = 0; col <= STANDARD_X; ++col) {
            pixel_ptr = pixel_buffer_start + (row << 10) + (col << 1);
 40c:	e1a0c506 	lsl	r12, r6, #10
 410:	e1a03000 	mov	r3, r0
 414:	eafffff2 	b	3e4 <CLEAR+0x1c>
            *(short *)pixel_ptr = 0; // set pixel color
        }
}
 418:	e8bd0070 	pop	{r4, r5, r6}
 41c:	e12fff1e 	bx	lr

00000420 <main>:

int main(void)
{
 420:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 424:	e24dd00c 	sub	sp, sp, #12
	volatile int *  pixel_ctrl_ptr=(int *) 0xFF203020;
	//Read the location of the pixel buffer from the pixel buffer controller
	pixel_buffer_start= *pixel_ctrl_ptr;
 428:	e3033fff 	movw	r3, #16383	; 0x3fff
 42c:	e34f3f20 	movt	r3, #65312	; 0xff20
 430:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
 434:	e3003dac 	movw	r3, #3500	; 0xdac
 438:	e3403000 	movt	r3, #0
 43c:	e5832000 	str	r2, [r3]
	
	CLEAR();
 440:	ebffffe0 	bl	3c8 <CLEAR>
	draw_line(0,150,0,150,0x001F);					//THIS LINE IS BLUE
 444:	e3a0301f 	mov	r3, #31
 448:	e58d3000 	str	r3, [sp]
 44c:	e3a00000 	mov	r0, #0
 450:	e3a01096 	mov	r1, #150	; 0x96
 454:	e1a02000 	mov	r2, r0
 458:	e1a03001 	mov	r3, r1
 45c:	ebffff8a 	bl	28c <draw_line>
	draw_line(150,319,150,0,0x07E0);				//THIS LINE IS GREEN
 460:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 464:	e58d3000 	str	r3, [sp]
 468:	e3a00096 	mov	r0, #150	; 0x96
 46c:	e300113f 	movw	r1, #319	; 0x13f
 470:	e1a02000 	mov	r2, r0
 474:	e3a03000 	mov	r3, #0
 478:	ebffff83 	bl	28c <draw_line>
	draw_line(0,150,150,150,0xF800);				//THIS LINE IS RED
 47c:	e3a03b3e 	mov	r3, #63488	; 0xf800
 480:	e34f3fff 	movt	r3, #65535	; 0xffff
 484:	e58d3000 	str	r3, [sp]
 488:	e3a00000 	mov	r0, #0
 48c:	e3a01096 	mov	r1, #150	; 0x96
 490:	e1a02001 	mov	r2, r1
 494:	e1a03001 	mov	r3, r1
 498:	ebffff7b 	bl	28c <draw_line>
	draw_line(0,150,239,150,0xF81F);					//THIS LINE IS A PINK COLOR
 49c:	e3e03e7e 	mvn	r3, #2016	; 0x7e0
 4a0:	e58d3000 	str	r3, [sp]
 4a4:	e3a00000 	mov	r0, #0
 4a8:	e3a01096 	mov	r1, #150	; 0x96
 4ac:	e3a020ef 	mov	r2, #239	; 0xef
 4b0:	e1a03001 	mov	r3, r1
 4b4:	ebffff74 	bl	28c <draw_line>
}
 4b8:	e28dd00c 	add	sp, sp, #12
 4bc:	e8bd8000 	ldmfd	sp!, {pc}

000004c0 <atexit>:
 4c0:	e1a01000 	mov	r1, r0
 4c4:	e3a00000 	mov	r0, #0
 4c8:	e92d4008 	push	{r3, lr}
 4cc:	e1a02000 	mov	r2, r0
 4d0:	e1a03000 	mov	r3, r0
 4d4:	eb00000e 	bl	514 <__register_exitproc>
 4d8:	e8bd4008 	pop	{r3, lr}
 4dc:	e12fff1e 	bx	lr

000004e0 <exit>:
 4e0:	e92d4008 	push	{r3, lr}
 4e4:	e3a01000 	mov	r1, #0
 4e8:	e1a04000 	mov	r4, r0
 4ec:	eb000045 	bl	608 <__call_exitprocs>
 4f0:	e59f3018 	ldr	r3, [pc, #24]	; 510 <exit+0x30>
 4f4:	e5930000 	ldr	r0, [r3]
 4f8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 4fc:	e3530000 	cmp	r3, #0
 500:	11a0e00f 	movne	lr, pc
 504:	112fff13 	bxne	r3
 508:	e1a00004 	mov	r0, r4
 50c:	eb0000c9 	bl	838 <_exit>
 510:	000008f8 	.word	0x000008f8

00000514 <__register_exitproc>:
 514:	e59fc0e4 	ldr	r12, [pc, #228]	; 600 <__register_exitproc+0xec>
 518:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 51c:	e59c4000 	ldr	r4, [r12]
 520:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 524:	e35c0000 	cmp	r12, #0
 528:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 52c:	e59c5004 	ldr	r5, [r12, #4]
 530:	0584c148 	streq	r12, [r4, #328]	; 0x148
 534:	e355001f 	cmp	r5, #31
 538:	e24dd010 	sub	sp, sp, #16
 53c:	e1a06000 	mov	r6, r0
 540:	da000015 	ble	59c <__register_exitproc+0x88>
 544:	e59f00b8 	ldr	r0, [pc, #184]	; 604 <__register_exitproc+0xf0>
 548:	e3500000 	cmp	r0, #0
 54c:	1a000001 	bne	558 <__register_exitproc+0x44>
 550:	e3e00000 	mvn	r0, #0
 554:	ea000018 	b	5bc <__register_exitproc+0xa8>
 558:	e3a00e19 	mov	r0, #400	; 0x190
 55c:	e58d100c 	str	r1, [sp, #12]
 560:	e58d2008 	str	r2, [sp, #8]
 564:	e58d3004 	str	r3, [sp, #4]
 568:	e320f000 	nop	{0}
 56c:	e250c000 	subs	r12, r0, #0
 570:	e59d100c 	ldr	r1, [sp, #12]
 574:	e59d2008 	ldr	r2, [sp, #8]
 578:	e59d3004 	ldr	r3, [sp, #4]
 57c:	0afffff3 	beq	550 <__register_exitproc+0x3c>
 580:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 584:	e3a00000 	mov	r0, #0
 588:	e58c0004 	str	r0, [r12, #4]
 58c:	e58c5000 	str	r5, [r12]
 590:	e584c148 	str	r12, [r4, #328]	; 0x148
 594:	e58c0188 	str	r0, [r12, #392]	; 0x188
 598:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 59c:	e3560000 	cmp	r6, #0
 5a0:	e59c4004 	ldr	r4, [r12, #4]
 5a4:	1a000007 	bne	5c8 <__register_exitproc+0xb4>
 5a8:	e2843002 	add	r3, r4, #2
 5ac:	e2844001 	add	r4, r4, #1
 5b0:	e78c1103 	str	r1, [r12, r3, lsl #2]
 5b4:	e58c4004 	str	r4, [r12, #4]
 5b8:	e3a00000 	mov	r0, #0
 5bc:	e28dd010 	add	sp, sp, #16
 5c0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 5c4:	e12fff1e 	bx	lr
 5c8:	e3a00001 	mov	r0, #1
 5cc:	e1a00410 	lsl	r0, r0, r4
 5d0:	e08c8104 	add	r8, r12, r4, lsl #2
 5d4:	e3560002 	cmp	r6, #2
 5d8:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 5dc:	e5883108 	str	r3, [r8, #264]	; 0x108
 5e0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 5e4:	e1877000 	orr	r7, r7, r0
 5e8:	01830000 	orreq	r0, r3, r0
 5ec:	e1a05008 	mov	r5, r8
 5f0:	e5882088 	str	r2, [r8, #136]	; 0x88
 5f4:	e58c7188 	str	r7, [r12, #392]	; 0x188
 5f8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 5fc:	eaffffe9 	b	5a8 <__register_exitproc+0x94>
 600:	000008f8 	.word	0x000008f8
 604:	00000000 	.word	0x00000000

00000608 <__call_exitprocs>:
 608:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 60c:	e59f3168 	ldr	r3, [pc, #360]	; 77c <__call_exitprocs+0x174>
 610:	e5933000 	ldr	r3, [r3]
 614:	e24dd014 	sub	sp, sp, #20
 618:	e58d3004 	str	r3, [sp, #4]
 61c:	e2833f52 	add	r3, r3, #328	; 0x148
 620:	e58d0008 	str	r0, [sp, #8]
 624:	e58d300c 	str	r3, [sp, #12]
 628:	e1a07001 	mov	r7, r1
 62c:	e3a08001 	mov	r8, #1
 630:	e59d3004 	ldr	r3, [sp, #4]
 634:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 638:	e3560000 	cmp	r6, #0
 63c:	e59db00c 	ldr	r11, [sp, #12]
 640:	0a000033 	beq	714 <__call_exitprocs+0x10c>
 644:	e5965004 	ldr	r5, [r6, #4]
 648:	e2554001 	subs	r4, r5, #1
 64c:	5286a088 	addpl	r10, r6, #136	; 0x88
 650:	5285501f 	addpl	r5, r5, #31
 654:	508a5105 	addpl	r5, r10, r5, lsl #2
 658:	5a000007 	bpl	67c <__call_exitprocs+0x74>
 65c:	ea000029 	b	708 <__call_exitprocs+0x100>
 660:	e5953000 	ldr	r3, [r5]
 664:	e1530007 	cmp	r3, r7
 668:	0a000005 	beq	684 <__call_exitprocs+0x7c>
 66c:	e2444001 	sub	r4, r4, #1
 670:	e3740001 	cmn	r4, #1
 674:	e2455004 	sub	r5, r5, #4
 678:	0a000022 	beq	708 <__call_exitprocs+0x100>
 67c:	e3570000 	cmp	r7, #0
 680:	1afffff6 	bne	660 <__call_exitprocs+0x58>
 684:	e5963004 	ldr	r3, [r6, #4]
 688:	e06a2005 	rsb	r2, r10, r5
 68c:	e2433001 	sub	r3, r3, #1
 690:	e0862002 	add	r2, r6, r2
 694:	e1530004 	cmp	r3, r4
 698:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 69c:	13a01000 	movne	r1, #0
 6a0:	05864004 	streq	r4, [r6, #4]
 6a4:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 6a8:	e3530000 	cmp	r3, #0
 6ac:	0affffee 	beq	66c <__call_exitprocs+0x64>
 6b0:	e1a02418 	lsl	r2, r8, r4
 6b4:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 6b8:	e1120001 	tst	r2, r1
 6bc:	e5969004 	ldr	r9, [r6, #4]
 6c0:	0a000016 	beq	720 <__call_exitprocs+0x118>
 6c4:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 6c8:	e1120001 	tst	r2, r1
 6cc:	1a000016 	bne	72c <__call_exitprocs+0x124>
 6d0:	e59d0008 	ldr	r0, [sp, #8]
 6d4:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 6d8:	e1a0e00f 	mov	lr, pc
 6dc:	e12fff13 	bx	r3
 6e0:	e5963004 	ldr	r3, [r6, #4]
 6e4:	e1530009 	cmp	r3, r9
 6e8:	1affffd0 	bne	630 <__call_exitprocs+0x28>
 6ec:	e59b3000 	ldr	r3, [r11]
 6f0:	e1530006 	cmp	r3, r6
 6f4:	1affffcd 	bne	630 <__call_exitprocs+0x28>
 6f8:	e2444001 	sub	r4, r4, #1
 6fc:	e3740001 	cmn	r4, #1
 700:	e2455004 	sub	r5, r5, #4
 704:	1affffdc 	bne	67c <__call_exitprocs+0x74>
 708:	e59f1070 	ldr	r1, [pc, #112]	; 780 <__call_exitprocs+0x178>
 70c:	e3510000 	cmp	r1, #0
 710:	1a000009 	bne	73c <__call_exitprocs+0x134>
 714:	e28dd014 	add	sp, sp, #20
 718:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 71c:	e12fff1e 	bx	lr
 720:	e1a0e00f 	mov	lr, pc
 724:	e12fff13 	bx	r3
 728:	eaffffec 	b	6e0 <__call_exitprocs+0xd8>
 72c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 730:	e1a0e00f 	mov	lr, pc
 734:	e12fff13 	bx	r3
 738:	eaffffe8 	b	6e0 <__call_exitprocs+0xd8>
 73c:	e5963004 	ldr	r3, [r6, #4]
 740:	e3530000 	cmp	r3, #0
 744:	e5963000 	ldr	r3, [r6]
 748:	1a000008 	bne	770 <__call_exitprocs+0x168>
 74c:	e3530000 	cmp	r3, #0
 750:	0a000006 	beq	770 <__call_exitprocs+0x168>
 754:	e1a00006 	mov	r0, r6
 758:	e58b3000 	str	r3, [r11]
 75c:	e320f000 	nop	{0}
 760:	e59b6000 	ldr	r6, [r11]
 764:	e3560000 	cmp	r6, #0
 768:	1affffb5 	bne	644 <__call_exitprocs+0x3c>
 76c:	eaffffe8 	b	714 <__call_exitprocs+0x10c>
 770:	e1a0b006 	mov	r11, r6
 774:	e1a06003 	mov	r6, r3
 778:	eafffff9 	b	764 <__call_exitprocs+0x15c>
 77c:	000008f8 	.word	0x000008f8
 780:	00000000 	.word	0x00000000

00000784 <register_fini>:
 784:	e92d4008 	push	{r3, lr}
 788:	e59f3010 	ldr	r3, [pc, #16]	; 7a0 <register_fini+0x1c>
 78c:	e3530000 	cmp	r3, #0
 790:	159f000c 	ldrne	r0, [pc, #12]	; 7a4 <register_fini+0x20>
 794:	1bffff49 	blne	4c0 <atexit>
 798:	e8bd4008 	pop	{r3, lr}
 79c:	e12fff1e 	bx	lr
 7a0:	00000920 	.word	0x00000920
 7a4:	000007a8 	.word	0x000007a8

000007a8 <__libc_fini_array>:
 7a8:	e92d4038 	push	{r3, r4, r5, lr}
 7ac:	e59f5030 	ldr	r5, [pc, #48]	; 7e4 <__libc_fini_array+0x3c>
 7b0:	e59f4030 	ldr	r4, [pc, #48]	; 7e8 <__libc_fini_array+0x40>
 7b4:	e0654004 	rsb	r4, r5, r4
 7b8:	e1b04144 	asrs	r4, r4, #2
 7bc:	10855104 	addne	r5, r5, r4, lsl #2
 7c0:	0a000004 	beq	7d8 <__libc_fini_array+0x30>
 7c4:	e5353004 	ldr	r3, [r5, #-4]!
 7c8:	e1a0e00f 	mov	lr, pc
 7cc:	e12fff13 	bx	r3
 7d0:	e2544001 	subs	r4, r4, #1
 7d4:	1afffffa 	bne	7c4 <__libc_fini_array+0x1c>
 7d8:	eb000050 	bl	920 <__libc_fini>
 7dc:	e8bd4038 	pop	{r3, r4, r5, lr}
 7e0:	e12fff1e 	bx	lr
 7e4:	00000938 	.word	0x00000938
 7e8:	0000093c 	.word	0x0000093c

000007ec <__cs3_premain>:
 7ec:	e92d4008 	push	{r3, lr}
 7f0:	eb00001d 	bl	86c <__libc_init_array>
 7f4:	e59f3030 	ldr	r3, [pc, #48]	; 82c <__cs3_premain+0x40>
 7f8:	e3530000 	cmp	r3, #0
 7fc:	15930000 	ldrne	r0, [r3]
 800:	01a00003 	moveq	r0, r3
 804:	e59f3024 	ldr	r3, [pc, #36]	; 830 <__cs3_premain+0x44>
 808:	e3530000 	cmp	r3, #0
 80c:	15931000 	ldrne	r1, [r3]
 810:	01a01003 	moveq	r1, r3
 814:	e3a02000 	mov	r2, #0
 818:	ebffff00 	bl	420 <main>
 81c:	e59f3010 	ldr	r3, [pc, #16]	; 834 <__cs3_premain+0x48>
 820:	e3530000 	cmp	r3, #0
 824:	1bffff2d 	blne	4e0 <exit>
 828:	eafffffe 	b	828 <__cs3_premain+0x3c>
	...
 834:	000004e0 	.word	0x000004e0

00000838 <_exit>:
 838:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 83c:	e3a00018 	mov	r0, #24
 840:	e59f1004 	ldr	r1, [pc, #4]	; 84c <_exit+0x14>
 844:	ef123456 	svc	0x00123456
 848:	eafffffe 	b	848 <_exit+0x10>
 84c:	00020026 	.word	0x00020026

00000850 <__cs3_isr_interrupt>:
 850:	eafffffe 	b	850 <__cs3_isr_interrupt>

00000854 <__cs3_isr_undef>:
 854:	eafffffe 	b	854 <__cs3_isr_undef>

00000858 <__cs3_isr_swi>:
 858:	eafffffe 	b	858 <__cs3_isr_swi>

0000085c <__cs3_isr_pabort>:
 85c:	eafffffe 	b	85c <__cs3_isr_pabort>

00000860 <__cs3_isr_dabort>:
 860:	eafffffe 	b	860 <__cs3_isr_dabort>

00000864 <__cs3_isr_irq>:
 864:	eafffffe 	b	864 <__cs3_isr_irq>

00000868 <__cs3_isr_fiq>:
 868:	eafffffe 	b	868 <__cs3_isr_fiq>

0000086c <__libc_init_array>:
 86c:	e92d4070 	push	{r4, r5, r6, lr}
 870:	e59f506c 	ldr	r5, [pc, #108]	; 8e4 <__libc_init_array+0x78>
 874:	e59f606c 	ldr	r6, [pc, #108]	; 8e8 <__libc_init_array+0x7c>
 878:	e0656006 	rsb	r6, r5, r6
 87c:	e1b06146 	asrs	r6, r6, #2
 880:	12455004 	subne	r5, r5, #4
 884:	13a04000 	movne	r4, #0
 888:	0a000005 	beq	8a4 <__libc_init_array+0x38>
 88c:	e5b53004 	ldr	r3, [r5, #4]!
 890:	e2844001 	add	r4, r4, #1
 894:	e1a0e00f 	mov	lr, pc
 898:	e12fff13 	bx	r3
 89c:	e1560004 	cmp	r6, r4
 8a0:	1afffff9 	bne	88c <__libc_init_array+0x20>
 8a4:	e59f5040 	ldr	r5, [pc, #64]	; 8ec <__libc_init_array+0x80>
 8a8:	e59f6040 	ldr	r6, [pc, #64]	; 8f0 <__libc_init_array+0x84>
 8ac:	e0656006 	rsb	r6, r5, r6
 8b0:	eb000012 	bl	900 <_init>
 8b4:	e1b06146 	asrs	r6, r6, #2
 8b8:	12455004 	subne	r5, r5, #4
 8bc:	13a04000 	movne	r4, #0
 8c0:	0a000005 	beq	8dc <__libc_init_array+0x70>
 8c4:	e5b53004 	ldr	r3, [r5, #4]!
 8c8:	e2844001 	add	r4, r4, #1
 8cc:	e1a0e00f 	mov	lr, pc
 8d0:	e12fff13 	bx	r3
 8d4:	e1560004 	cmp	r6, r4
 8d8:	1afffff9 	bne	8c4 <__libc_init_array+0x58>
 8dc:	e8bd4070 	pop	{r4, r5, r6, lr}
 8e0:	e12fff1e 	bx	lr
 8e4:	00000918 	.word	0x00000918
 8e8:	00000918 	.word	0x00000918
 8ec:	00000918 	.word	0x00000918
 8f0:	00000920 	.word	0x00000920

Disassembly of section .rodata:

000008f8 <_global_impure_ptr>:
 8f8:	00000960 00000043                       `...C...

00000900 <_init>:
 900:	e1a0c00d 	mov	r12, sp
 904:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 908:	e24cb004 	sub	r11, r12, #4
 90c:	e24bd028 	sub	sp, r11, #40	; 0x28
 910:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 914:	e12fff1e 	bx	lr

00000918 <__init_array_start>:
 918:	00000784 	.word	0x00000784

0000091c <__frame_dummy_init_array_entry>:
 91c:	00000208                                ....

00000920 <__libc_fini>:
 920:	e1a0c00d 	mov	r12, sp
 924:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 928:	e24cb004 	sub	r11, r12, #4
 92c:	e24bd028 	sub	sp, r11, #40	; 0x28
 930:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 934:	e12fff1e 	bx	lr

00000938 <__fini_array_start>:
 938:	000001c4 	.word	0x000001c4

0000093c <__cs3_regions>:
	...
 948:	00000d90 	.word	0x00000d90
 94c:	00000028 	.word	0x00000028
