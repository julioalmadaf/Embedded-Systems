
C:/EMBEDDED/LAB8/PART3/PART3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 00 0d 00 00 04 0d 00 00 08 0d 00 00     @...............
  30:	0c 0d 00 00 fc 0c 00 00 10 0d 00 00 14 0d 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0002ef 	bl	c98 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000dfc 	.word	0x00000dfc

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001248 	.word	0x00001248

00000124 <__cs3_heap_start_ptr>:
 124:	00001280 	.word	0x00001280

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001250 	.word	0x00001250
 170:	00001253 	.word	0x00001253
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001250 	.word	0x00001250
 1bc:	00001250 	.word	0x00001250
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001250 	.word	0x00001250
 200:	00000000 	.word	0x00000000
 204:	00000da0 	.word	0x00000da0

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000da0 	.word	0x00000da0
 250:	00001254 	.word	0x00001254
 254:	00000e00 	.word	0x00000e00
 258:	00000000 	.word	0x00000000

0000025c <VSYNC>:
volatile int * RESOLUTION = (int *)(PIXEL_BUF_CTRL_BASE + 0x8);			//RESOLUTION REGISTER
volatile int * STATUS = (int *)(PIXEL_BUF_CTRL_BASE + 0xC);				//RESOLUTION REGISTER
	
void VSYNC()
{
	*(BUFFER) = 0x1;														//SWAP BETWEEN BUFFERS HAPPEN
 25c:	e3003e08 	movw	r3, #3592	; 0xe08
 260:	e3403000 	movt	r3, #0
 264:	e5932000 	ldr	r2, [r3]
 268:	e3a01001 	mov	r1, #1
 26c:	e5821000 	str	r1, [r2]
	while(*(STATUS)==0x1);
 270:	e5932004 	ldr	r2, [r3, #4]
 274:	e5923000 	ldr	r3, [r2]
 278:	e3530001 	cmp	r3, #1
 27c:	0afffffc 	beq	274 <VSYNC+0x18>
	*(BUFFER) = 0x0;
 280:	e3003e08 	movw	r3, #3592	; 0xe08
 284:	e3403000 	movt	r3, #0
 288:	e5933000 	ldr	r3, [r3]
 28c:	e3a02000 	mov	r2, #0
 290:	e5832000 	str	r2, [r3]
 294:	e12fff1e 	bx	lr

00000298 <swap>:

void swap(int *a, int *b)
{
   int t;
 
   t  = *b;
 298:	e5913000 	ldr	r3, [r1]
   *b = *a;
 29c:	e5902000 	ldr	r2, [r0]
 2a0:	e5812000 	str	r2, [r1]
   *a = t;
 2a4:	e5803000 	str	r3, [r0]
 2a8:	e12fff1e 	bx	lr

000002ac <plot_pixel>:
}

void plot_pixel(int x, int y, short int line_color)
{
	*(short int*)(pixel_buffer_start + (y<<10)+(x<<1))=line_color;
 2ac:	e301326c 	movw	r3, #4716	; 0x126c
 2b0:	e3403000 	movt	r3, #0
 2b4:	e5933000 	ldr	r3, [r3]
 2b8:	e1a00080 	lsl	r0, r0, #1
 2bc:	e0831501 	add	r1, r3, r1, lsl #10
 2c0:	e18120b0 	strh	r2, [r1, r0]
 2c4:	e12fff1e 	bx	lr

000002c8 <draw_line>:
}

int y_step=0;
void draw_line(int x0, int x1, int y0, int y1, short int color)
{
 2c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 2cc:	e24dd014 	sub	sp, sp, #20
 2d0:	e58d000c 	str	r0, [sp, #12]
 2d4:	e58d1008 	str	r1, [sp, #8]
 2d8:	e58d2004 	str	r2, [sp, #4]
 2dc:	e58d3000 	str	r3, [sp]
 2e0:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
	bool is_steep= abs(y1-y0) > abs(x1-x0);						//THE LINE DOESNT MOVE THAT MUCH ON THE HORIZONTAL AXIS
 2e4:	e0623003 	rsb	r3, r2, r3
 2e8:	e3530000 	cmp	r3, #0
 2ec:	b2633000 	rsblt	r3, r3, #0
 2f0:	e0601001 	rsb	r1, r0, r1
 2f4:	e0218fc1 	eor	r8, r1, r1, asr #31
 2f8:	e0488fc1 	sub	r8, r8, r1, asr #31
 2fc:	e1530008 	cmp	r3, r8
 300:	d3a08000 	movle	r8, #0
 304:	c3a08001 	movgt	r8, #1
	if(is_steep)												//				
 308:	e3580000 	cmp	r8, #0
 30c:	0a000005 	beq	328 <draw_line+0x60>
	{
		swap(&x0,&y0);
 310:	e28d000c 	add	r0, sp, #12
 314:	e28d1004 	add	r1, sp, #4
 318:	ebffffde 	bl	298 <swap>
		swap(&x1,&y1);
 31c:	e28d0008 	add	r0, sp, #8
 320:	e1a0100d 	mov	r1, sp
 324:	ebffffdb 	bl	298 <swap>
	}
	if( x0 > x1)
 328:	e59d3008 	ldr	r3, [sp, #8]
 32c:	e59d200c 	ldr	r2, [sp, #12]
 330:	e1520003 	cmp	r2, r3
 334:	da000005 	ble	350 <draw_line+0x88>
	{
		swap(&x0,&x1);
 338:	e28d000c 	add	r0, sp, #12
 33c:	e28d1008 	add	r1, sp, #8
 340:	ebffffd4 	bl	298 <swap>
		swap(&y0,&y1);
 344:	e28d0004 	add	r0, sp, #4
 348:	e1a0100d 	mov	r1, sp
 34c:	ebffffd1 	bl	298 <swap>
	}
	
	int deltax= x1-x0;
 350:	e59d500c 	ldr	r5, [sp, #12]
 354:	e59d9008 	ldr	r9, [sp, #8]
 358:	e0659009 	rsb	r9, r5, r9
	int deltay= y1-y0;
 35c:	e59d3000 	ldr	r3, [sp]
 360:	e59d6004 	ldr	r6, [sp, #4]
 364:	e0667003 	rsb	r7, r6, r3
	int error = -(deltax/2);
 368:	e0894fa9 	add	r4, r9, r9, lsr #31
 36c:	e1a040c4 	asr	r4, r4, #1
 370:	e2644000 	rsb	r4, r4, #0
	int y = y0;
	if(y0 < y1) y_step=1;
 374:	e1530006 	cmp	r3, r6
 378:	da000007 	ble	39c <draw_line+0xd4>
 37c:	e301326c 	movw	r3, #4716	; 0x126c
 380:	e3403000 	movt	r3, #0
 384:	e3a02001 	mov	r2, #1
 388:	e5832004 	str	r2, [r3, #4]
	else y_step=-1;
	int x=0;
	for(x=x0;x<x1;x++)
 38c:	e59d3008 	ldr	r3, [sp, #8]
 390:	e1550003 	cmp	r5, r3
 394:	ba000005 	blt	3b0 <draw_line+0xe8>
 398:	ea000017 	b	3fc <draw_line+0x134>
	int deltax= x1-x0;
	int deltay= y1-y0;
	int error = -(deltax/2);
	int y = y0;
	if(y0 < y1) y_step=1;
	else y_step=-1;
 39c:	e301326c 	movw	r3, #4716	; 0x126c
 3a0:	e3403000 	movt	r3, #0
 3a4:	e3e02000 	mvn	r2, #0
 3a8:	e5832004 	str	r2, [r3, #4]
 3ac:	eafffff6 	b	38c <draw_line+0xc4>
	int x=0;
	for(x=x0;x<x1;x++)
	{
		if (is_steep) plot_pixel(y,x,color);
		else plot_pixel(x,y,color);
		error += abs(deltay);
 3b0:	e3570000 	cmp	r7, #0
 3b4:	b2677000 	rsblt	r7, r7, #0
		if (error>=0)
		{
			y += y_step;
 3b8:	e301b26c 	movw	r11, #4716	; 0x126c
 3bc:	e340b000 	movt	r11, #0
	if(y0 < y1) y_step=1;
	else y_step=-1;
	int x=0;
	for(x=x0;x<x1;x++)
	{
		if (is_steep) plot_pixel(y,x,color);
 3c0:	e3580000 	cmp	r8, #0
 3c4:	11a00006 	movne	r0, r6
 3c8:	11a01005 	movne	r1, r5
		else plot_pixel(x,y,color);
 3cc:	01a00005 	moveq	r0, r5
 3d0:	01a01006 	moveq	r1, r6
 3d4:	e1a0200a 	mov	r2, r10
 3d8:	ebffffb3 	bl	2ac <plot_pixel>
		error += abs(deltay);
		if (error>=0)
 3dc:	e0944007 	adds	r4, r4, r7
		{
			y += y_step;
 3e0:	559b3004 	ldrpl	r3, [r11, #4]
 3e4:	50866003 	addpl	r6, r6, r3
			error -= deltax;
 3e8:	50694004 	rsbpl	r4, r9, r4
	int error = -(deltax/2);
	int y = y0;
	if(y0 < y1) y_step=1;
	else y_step=-1;
	int x=0;
	for(x=x0;x<x1;x++)
 3ec:	e2855001 	add	r5, r5, #1
 3f0:	e59d3008 	ldr	r3, [sp, #8]
 3f4:	e1530005 	cmp	r3, r5
 3f8:	cafffff0 	bgt	3c0 <draw_line+0xf8>
		{
			y += y_step;
			error -= deltax;
		}
	}
}
 3fc:	e28dd014 	add	sp, sp, #20
 400:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000404 <CLEAR>:

void CLEAR() {
 404:	e92d0070 	push	{r4, r5, r6}
    int pixel_ptr, row, col;
    for (row = 0; row <= STANDARD_Y; row++)
 408:	e3a06000 	mov	r6, #0
        for (col = 0; col <= STANDARD_X; ++col) {
            pixel_ptr = pixel_buffer_start + (row << 10) + (col << 1);
 40c:	e1a00006 	mov	r0, r6
 410:	e301426c 	movw	r4, #4716	; 0x126c
 414:	e3404000 	movt	r4, #0
}

void CLEAR() {
    int pixel_ptr, row, col;
    for (row = 0; row <= STANDARD_Y; row++)
        for (col = 0; col <= STANDARD_X; ++col) {
 418:	e3005141 	movw	r5, #321	; 0x141
 41c:	ea000009 	b	448 <CLEAR+0x44>
            pixel_ptr = pixel_buffer_start + (row << 10) + (col << 1);
 420:	e5941000 	ldr	r1, [r4]
 424:	e1a02083 	lsl	r2, r3, #1
            *(short *)pixel_ptr = 0; // set pixel color
 428:	e08c1001 	add	r1, r12, r1
 42c:	e18100b2 	strh	r0, [r1, r2]
}

void CLEAR() {
    int pixel_ptr, row, col;
    for (row = 0; row <= STANDARD_Y; row++)
        for (col = 0; col <= STANDARD_X; ++col) {
 430:	e2833001 	add	r3, r3, #1
 434:	e1530005 	cmp	r3, r5
 438:	1afffff8 	bne	420 <CLEAR+0x1c>
	}
}

void CLEAR() {
    int pixel_ptr, row, col;
    for (row = 0; row <= STANDARD_Y; row++)
 43c:	e2866001 	add	r6, r6, #1
 440:	e35600f1 	cmp	r6, #241	; 0xf1
 444:	0a000002 	beq	454 <CLEAR+0x50>
        for (col = 0; col <= STANDARD_X; ++col) {
            pixel_ptr = pixel_buffer_start + (row << 10) + (col << 1);
 448:	e1a0c506 	lsl	r12, r6, #10
 44c:	e1a03000 	mov	r3, r0
 450:	eafffff2 	b	420 <CLEAR+0x1c>
            *(short *)pixel_ptr = 0; // set pixel color
        }
}
 454:	e8bd0070 	pop	{r4, r5, r6}
 458:	e12fff1e 	bx	lr

0000045c <moveLine>:

int valueY =0;
int flag =0;

void moveLine()
{
 45c:	e92d4010 	push	{r4, lr}
 460:	e24dd008 	sub	sp, sp, #8
	draw_line(0,319,valueY,valueY,0x07E0);										//THIS LINE IS BLUE
 464:	e301426c 	movw	r4, #4716	; 0x126c
 468:	e3404000 	movt	r4, #0
 46c:	e5943008 	ldr	r3, [r4, #8]
 470:	e3a02e7e 	mov	r2, #2016	; 0x7e0
 474:	e58d2000 	str	r2, [sp]
 478:	e3a00000 	mov	r0, #0
 47c:	e300113f 	movw	r1, #319	; 0x13f
 480:	e1a02003 	mov	r2, r3
 484:	ebffff8f 	bl	2c8 <draw_line>
	if(flag==0)
 488:	e594300c 	ldr	r3, [r4, #12]
 48c:	e3530000 	cmp	r3, #0
 490:	1a000006 	bne	4b0 <moveLine+0x54>
	{
		valueY++;
 494:	e5942008 	ldr	r2, [r4, #8]
 498:	e2822001 	add	r2, r2, #1
 49c:	e5842008 	str	r2, [r4, #8]
		if(valueY == 239) flag =1;
 4a0:	e35200ef 	cmp	r2, #239	; 0xef
 4a4:	03a02001 	moveq	r2, #1
 4a8:	0584200c 	streq	r2, [r4, #12]
 4ac:	ea000008 	b	4d4 <moveLine+0x78>
	}
	else
	{
		valueY--;
 4b0:	e301326c 	movw	r3, #4716	; 0x126c
 4b4:	e3403000 	movt	r3, #0
 4b8:	e5932008 	ldr	r2, [r3, #8]
 4bc:	e2422001 	sub	r2, r2, #1
 4c0:	e5832008 	str	r2, [r3, #8]
		if(valueY == 0) flag=0;
 4c4:	e3520000 	cmp	r2, #0
 4c8:	0301326c 	movweq	r3, #4716	; 0x126c
 4cc:	03403000 	movteq	r3, #0
 4d0:	0583200c 	streq	r2, [r3, #12]
	}
}
 4d4:	e28dd008 	add	sp, sp, #8
 4d8:	e8bd8010 	pop	{r4, pc}

000004dc <VGA_rect>:

void VGA_rect(int x1, int y1, int width, short int color)
{
 4dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 4e0:	e24dd008 	sub	sp, sp, #8
 4e4:	e1a06000 	mov	r6, r0
 4e8:	e1a04001 	mov	r4, r1
 4ec:	e1a08003 	mov	r8, r3
    int x2 = x1 + width;
 4f0:	e0807002 	add	r7, r0, r2
    int y2 = y1 + width;
 4f4:	e0815002 	add	r5, r1, r2
    int i;
    for (; y1 <= y2; y1++)
 4f8:	e1510005 	cmp	r1, r5
 4fc:	ca000008 	bgt	524 <VGA_rect+0x48>
	{
		draw_line(x1, x2, y1,  y1, color);
 500:	e58d8000 	str	r8, [sp]
 504:	e1a00006 	mov	r0, r6
 508:	e1a01007 	mov	r1, r7
 50c:	e1a02004 	mov	r2, r4
 510:	e1a03004 	mov	r3, r4
 514:	ebffff6b 	bl	2c8 <draw_line>
void VGA_rect(int x1, int y1, int width, short int color)
{
    int x2 = x1 + width;
    int y2 = y1 + width;
    int i;
    for (; y1 <= y2; y1++)
 518:	e2844001 	add	r4, r4, #1
 51c:	e1550004 	cmp	r5, r4
 520:	aafffff6 	bge	500 <VGA_rect+0x24>
	{
		draw_line(x1, x2, y1,  y1, color);
	}
}
 524:	e28dd008 	add	sp, sp, #8
 528:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000052c <main>:

int main(void)
{
 52c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 530:	e24dd034 	sub	sp, sp, #52	; 0x34
	pixel_buffer_start= *BUFFER;
 534:	e3003e08 	movw	r3, #3592	; 0xe08
 538:	e3403000 	movt	r3, #0
 53c:	e5933000 	ldr	r3, [r3]
 540:	e5932000 	ldr	r2, [r3]
 544:	e301326c 	movw	r3, #4716	; 0x126c
 548:	e3403000 	movt	r3, #0
 54c:	e5832000 	str	r2, [r3]
	//*(BUFFER+1) = 0XC8000000;													//BACKBUFFER USES THE SAME ADDRESS AS TEH BUFFER
	CLEAR();
 550:	ebffffab 	bl	404 <CLEAR>
	int length=5;
	int x0,x1,x2,x3,x4,x5,x6,x7,y0,y1,y2,y3,y4,y5,y6,y7;
		
	
	VGA_rect( x0 = rand() % 319, y0 = rand() %239, length, 0x07E0);
 554:	eb000102 	bl	964 <rand>
 558:	e30459d5 	movw	r5, #18901	; 0x49d5
 55c:	e343535c 	movt	r5, #13148	; 0x335c
 560:	e0c21095 	smull	r1, r2, r5, r0
 564:	e1a03fc0 	asr	r3, r0, #31
 568:	e0633342 	rsb	r3, r3, r2, asr #6
 56c:	e1a02003 	mov	r2, r3
 570:	e0833103 	add	r3, r3, r3, lsl #2
 574:	e0623303 	rsb	r3, r2, r3, lsl #6
 578:	e0633000 	rsb	r3, r3, r0
 57c:	e58d300c 	str	r3, [sp, #12]
 580:	eb0000f7 	bl	964 <rand>
 584:	e30c473b 	movw	r4, #51003	; 0xc73b
 588:	e348491a 	movt	r4, #35098	; 0x891a
 58c:	e0c23094 	smull	r3, r2, r4, r0
 590:	e0822000 	add	r2, r2, r0
 594:	e1a03fc0 	asr	r3, r0, #31
 598:	e06333c2 	rsb	r3, r3, r2, asr #7
 59c:	e1a01003 	mov	r1, r3
 5a0:	e0633203 	rsb	r3, r3, r3, lsl #4
 5a4:	e0613203 	rsb	r3, r1, r3, lsl #4
 5a8:	e0633000 	rsb	r3, r3, r0
 5ac:	e58d3010 	str	r3, [sp, #16]
 5b0:	e59d000c 	ldr	r0, [sp, #12]
 5b4:	e1a01003 	mov	r1, r3
 5b8:	e3a02005 	mov	r2, #5
 5bc:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 5c0:	ebffffc5 	bl	4dc <VGA_rect>
	VGA_rect( x1 = rand() % 319, y1 = rand() %239, length, 0x07E0);
 5c4:	eb0000e6 	bl	964 <rand>
 5c8:	e0cb2095 	smull	r2, r11, r5, r0
 5cc:	e1a03fc0 	asr	r3, r0, #31
 5d0:	e063b34b 	rsb	r11, r3, r11, asr #6
 5d4:	e08b310b 	add	r3, r11, r11, lsl #2
 5d8:	e06bb303 	rsb	r11, r11, r3, lsl #6
 5dc:	e06bb000 	rsb	r11, r11, r0
 5e0:	eb0000df 	bl	964 <rand>
 5e4:	e0c23094 	smull	r3, r2, r4, r0
 5e8:	e0822000 	add	r2, r2, r0
 5ec:	e1a03fc0 	asr	r3, r0, #31
 5f0:	e06333c2 	rsb	r3, r3, r2, asr #7
 5f4:	e1a01003 	mov	r1, r3
 5f8:	e0633203 	rsb	r3, r3, r3, lsl #4
 5fc:	e0613203 	rsb	r3, r1, r3, lsl #4
 600:	e0633000 	rsb	r3, r3, r0
 604:	e58d3014 	str	r3, [sp, #20]
 608:	e1a0000b 	mov	r0, r11
 60c:	e1a01003 	mov	r1, r3
 610:	e3a02005 	mov	r2, #5
 614:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 618:	ebffffaf 	bl	4dc <VGA_rect>
	VGA_rect( x2 = rand() % 319, y2 = rand() %239, length, 0x07E0);
 61c:	eb0000d0 	bl	964 <rand>
 620:	e0c92095 	smull	r2, r9, r5, r0
 624:	e1a03fc0 	asr	r3, r0, #31
 628:	e0639349 	rsb	r9, r3, r9, asr #6
 62c:	e0893109 	add	r3, r9, r9, lsl #2
 630:	e0699303 	rsb	r9, r9, r3, lsl #6
 634:	e0699000 	rsb	r9, r9, r0
 638:	eb0000c9 	bl	964 <rand>
 63c:	e0c23094 	smull	r3, r2, r4, r0
 640:	e0822000 	add	r2, r2, r0
 644:	e1a03fc0 	asr	r3, r0, #31
 648:	e06333c2 	rsb	r3, r3, r2, asr #7
 64c:	e1a01003 	mov	r1, r3
 650:	e0633203 	rsb	r3, r3, r3, lsl #4
 654:	e0613203 	rsb	r3, r1, r3, lsl #4
 658:	e0633000 	rsb	r3, r3, r0
 65c:	e58d3018 	str	r3, [sp, #24]
 660:	e1a00009 	mov	r0, r9
 664:	e1a01003 	mov	r1, r3
 668:	e3a02005 	mov	r2, #5
 66c:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 670:	ebffff99 	bl	4dc <VGA_rect>
	VGA_rect( x3 = rand() % 319, y3 = rand() %239, length, 0x07E0);
 674:	eb0000ba 	bl	964 <rand>
 678:	e0ca2095 	smull	r2, r10, r5, r0
 67c:	e1a03fc0 	asr	r3, r0, #31
 680:	e063a34a 	rsb	r10, r3, r10, asr #6
 684:	e08a310a 	add	r3, r10, r10, lsl #2
 688:	e06aa303 	rsb	r10, r10, r3, lsl #6
 68c:	e06aa000 	rsb	r10, r10, r0
 690:	eb0000b3 	bl	964 <rand>
 694:	e0c23094 	smull	r3, r2, r4, r0
 698:	e0822000 	add	r2, r2, r0
 69c:	e1a03fc0 	asr	r3, r0, #31
 6a0:	e06333c2 	rsb	r3, r3, r2, asr #7
 6a4:	e1a01003 	mov	r1, r3
 6a8:	e0633203 	rsb	r3, r3, r3, lsl #4
 6ac:	e0613203 	rsb	r3, r1, r3, lsl #4
 6b0:	e0633000 	rsb	r3, r3, r0
 6b4:	e58d301c 	str	r3, [sp, #28]
 6b8:	e1a0000a 	mov	r0, r10
 6bc:	e1a01003 	mov	r1, r3
 6c0:	e3a02005 	mov	r2, #5
 6c4:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 6c8:	ebffff83 	bl	4dc <VGA_rect>
	VGA_rect( x4 = rand() % 319, y4 = rand() %239, length, 0x07E0);
 6cc:	eb0000a4 	bl	964 <rand>
 6d0:	e0c82095 	smull	r2, r8, r5, r0
 6d4:	e1a03fc0 	asr	r3, r0, #31
 6d8:	e0638348 	rsb	r8, r3, r8, asr #6
 6dc:	e0883108 	add	r3, r8, r8, lsl #2
 6e0:	e0688303 	rsb	r8, r8, r3, lsl #6
 6e4:	e0688000 	rsb	r8, r8, r0
 6e8:	eb00009d 	bl	964 <rand>
 6ec:	e0c23094 	smull	r3, r2, r4, r0
 6f0:	e0822000 	add	r2, r2, r0
 6f4:	e1a03fc0 	asr	r3, r0, #31
 6f8:	e06333c2 	rsb	r3, r3, r2, asr #7
 6fc:	e1a01003 	mov	r1, r3
 700:	e0633203 	rsb	r3, r3, r3, lsl #4
 704:	e0613203 	rsb	r3, r1, r3, lsl #4
 708:	e0633000 	rsb	r3, r3, r0
 70c:	e58d3020 	str	r3, [sp, #32]
 710:	e1a00008 	mov	r0, r8
 714:	e1a01003 	mov	r1, r3
 718:	e3a02005 	mov	r2, #5
 71c:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 720:	ebffff6d 	bl	4dc <VGA_rect>
	VGA_rect( x5 = rand() % 319, y5 = rand() %239, length, 0x07E0);
 724:	eb00008e 	bl	964 <rand>
 728:	e0c72095 	smull	r2, r7, r5, r0
 72c:	e1a03fc0 	asr	r3, r0, #31
 730:	e0637347 	rsb	r7, r3, r7, asr #6
 734:	e0873107 	add	r3, r7, r7, lsl #2
 738:	e0677303 	rsb	r7, r7, r3, lsl #6
 73c:	e0677000 	rsb	r7, r7, r0
 740:	eb000087 	bl	964 <rand>
 744:	e0c23094 	smull	r3, r2, r4, r0
 748:	e0822000 	add	r2, r2, r0
 74c:	e1a03fc0 	asr	r3, r0, #31
 750:	e06333c2 	rsb	r3, r3, r2, asr #7
 754:	e1a01003 	mov	r1, r3
 758:	e0633203 	rsb	r3, r3, r3, lsl #4
 75c:	e0613203 	rsb	r3, r1, r3, lsl #4
 760:	e0633000 	rsb	r3, r3, r0
 764:	e58d3024 	str	r3, [sp, #36]	; 0x24
 768:	e1a00007 	mov	r0, r7
 76c:	e1a01003 	mov	r1, r3
 770:	e3a02005 	mov	r2, #5
 774:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 778:	ebffff57 	bl	4dc <VGA_rect>
	VGA_rect( x6 = rand() % 319, y6 = rand() %239, length, 0x07E0);
 77c:	eb000078 	bl	964 <rand>
 780:	e0c23095 	smull	r3, r2, r5, r0
 784:	e1a03fc0 	asr	r3, r0, #31
 788:	e0633342 	rsb	r3, r3, r2, asr #6
 78c:	e1a01003 	mov	r1, r3
 790:	e0833103 	add	r3, r3, r3, lsl #2
 794:	e0613303 	rsb	r3, r1, r3, lsl #6
 798:	e0633000 	rsb	r3, r3, r0
 79c:	e58d3028 	str	r3, [sp, #40]	; 0x28
 7a0:	eb00006f 	bl	964 <rand>
 7a4:	e0c23094 	smull	r3, r2, r4, r0
 7a8:	e0822000 	add	r2, r2, r0
 7ac:	e1a03fc0 	asr	r3, r0, #31
 7b0:	e06333c2 	rsb	r3, r3, r2, asr #7
 7b4:	e1a01003 	mov	r1, r3
 7b8:	e0633203 	rsb	r3, r3, r3, lsl #4
 7bc:	e0613203 	rsb	r3, r1, r3, lsl #4
 7c0:	e0633000 	rsb	r3, r3, r0
 7c4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
 7c8:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
 7cc:	e1a01003 	mov	r1, r3
 7d0:	e3a02005 	mov	r2, #5
 7d4:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 7d8:	ebffff3f 	bl	4dc <VGA_rect>
	VGA_rect( x7 = rand() % 319, y7 = rand() %239, length, 0x07E0);
 7dc:	eb000060 	bl	964 <rand>
 7e0:	e0c52095 	smull	r2, r5, r5, r0
 7e4:	e1a03fc0 	asr	r3, r0, #31
 7e8:	e0636345 	rsb	r6, r3, r5, asr #6
 7ec:	e0863106 	add	r3, r6, r6, lsl #2
 7f0:	e0666303 	rsb	r6, r6, r3, lsl #6
 7f4:	e0666000 	rsb	r6, r6, r0
 7f8:	eb000059 	bl	964 <rand>
 7fc:	e0c43094 	smull	r3, r4, r4, r0
 800:	e0845000 	add	r5, r4, r0
 804:	e1a03fc0 	asr	r3, r0, #31
 808:	e06353c5 	rsb	r5, r3, r5, asr #7
 80c:	e0653205 	rsb	r3, r5, r5, lsl #4
 810:	e0655203 	rsb	r5, r5, r3, lsl #4
 814:	e0655000 	rsb	r5, r5, r0
 818:	e1a00006 	mov	r0, r6
 81c:	e1a01005 	mov	r1, r5
 820:	e3a02005 	mov	r2, #5
 824:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 828:	ebffff2b 	bl	4dc <VGA_rect>
	
	draw_line(x0,x1,y0,y1,0x07E0);
 82c:	e3a04e7e 	mov	r4, #2016	; 0x7e0
 830:	e58d4000 	str	r4, [sp]
 834:	e59d000c 	ldr	r0, [sp, #12]
 838:	e1a0100b 	mov	r1, r11
 83c:	e59d2010 	ldr	r2, [sp, #16]
 840:	e59d3014 	ldr	r3, [sp, #20]
 844:	ebfffe9f 	bl	2c8 <draw_line>
	draw_line(x1,x2,y1,y2,0x07E0);
 848:	e58d4000 	str	r4, [sp]
 84c:	e1a0000b 	mov	r0, r11
 850:	e1a01009 	mov	r1, r9
 854:	e59d2014 	ldr	r2, [sp, #20]
 858:	e59d3018 	ldr	r3, [sp, #24]
 85c:	ebfffe99 	bl	2c8 <draw_line>
	draw_line(x2,x3,y2,y3,0x07E0);
 860:	e58d4000 	str	r4, [sp]
 864:	e1a00009 	mov	r0, r9
 868:	e1a0100a 	mov	r1, r10
 86c:	e59d2018 	ldr	r2, [sp, #24]
 870:	e59d301c 	ldr	r3, [sp, #28]
 874:	ebfffe93 	bl	2c8 <draw_line>
	draw_line(x3,x4,y3,y4,0x07E0);
 878:	e58d4000 	str	r4, [sp]
 87c:	e1a0000a 	mov	r0, r10
 880:	e1a01008 	mov	r1, r8
 884:	e59d201c 	ldr	r2, [sp, #28]
 888:	e59d3020 	ldr	r3, [sp, #32]
 88c:	ebfffe8d 	bl	2c8 <draw_line>
	draw_line(x4,x5,y4,y5,0x07E0);
 890:	e58d4000 	str	r4, [sp]
 894:	e1a00008 	mov	r0, r8
 898:	e1a01007 	mov	r1, r7
 89c:	e59d2020 	ldr	r2, [sp, #32]
 8a0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 8a4:	ebfffe87 	bl	2c8 <draw_line>
	draw_line(x5,x6,y5,y6,0x07E0);
 8a8:	e58d4000 	str	r4, [sp]
 8ac:	e1a00007 	mov	r0, r7
 8b0:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
 8b4:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
 8b8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
 8bc:	ebfffe81 	bl	2c8 <draw_line>
	draw_line(x6,x7,y6,y7,0x07E0);
 8c0:	e58d4000 	str	r4, [sp]
 8c4:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
 8c8:	e1a01006 	mov	r1, r6
 8cc:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
 8d0:	e1a03005 	mov	r3, r5
 8d4:	ebfffe7b 	bl	2c8 <draw_line>
	draw_line(x7,x0,y7,y0,0x07E0);
 8d8:	e58d4000 	str	r4, [sp]
 8dc:	e1a00006 	mov	r0, r6
 8e0:	e59d100c 	ldr	r1, [sp, #12]
 8e4:	e1a02005 	mov	r2, r5
 8e8:	e59d3010 	ldr	r3, [sp, #16]
 8ec:	ebfffe75 	bl	2c8 <draw_line>
 8f0:	eafffffe 	b	8f0 <main+0x3c4>

000008f4 <atexit>:
 8f4:	e1a01000 	mov	r1, r0
 8f8:	e3a00000 	mov	r0, #0
 8fc:	e92d4008 	push	{r3, lr}
 900:	e1a02000 	mov	r2, r0
 904:	e1a03000 	mov	r3, r0
 908:	eb00002c 	bl	9c0 <__register_exitproc>
 90c:	e8bd4008 	pop	{r3, lr}
 910:	e12fff1e 	bx	lr

00000914 <exit>:
 914:	e92d4008 	push	{r3, lr}
 918:	e3a01000 	mov	r1, #0
 91c:	e1a04000 	mov	r4, r0
 920:	eb000063 	bl	ab4 <__call_exitprocs>
 924:	e59f3018 	ldr	r3, [pc, #24]	; 944 <exit+0x30>
 928:	e5930000 	ldr	r0, [r3]
 92c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 930:	e3530000 	cmp	r3, #0
 934:	11a0e00f 	movne	lr, pc
 938:	112fff13 	bxne	r3
 93c:	e1a00004 	mov	r0, r4
 940:	eb0000e7 	bl	ce4 <_exit>
 944:	00000da4 	.word	0x00000da4

00000948 <srand>:
 948:	e59f3010 	ldr	r3, [pc, #16]	; 960 <srand+0x18>
 94c:	e5933000 	ldr	r3, [r3]
 950:	e3a02000 	mov	r2, #0
 954:	e58300a8 	str	r0, [r3, #168]	; 0xa8
 958:	e58320ac 	str	r2, [r3, #172]	; 0xac
 95c:	e12fff1e 	bx	lr
 960:	00000e18 	.word	0x00000e18

00000964 <rand>:
 964:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
 968:	e59f3044 	ldr	r3, [pc, #68]	; 9b4 <rand+0x50>
 96c:	e593c000 	ldr	r12, [r3]
 970:	e59f4040 	ldr	r4, [pc, #64]	; 9b8 <rand+0x54>
 974:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
 978:	e0040492 	mul	r4, r2, r4
 97c:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
 980:	e59f3034 	ldr	r3, [pc, #52]	; 9bc <rand+0x58>
 984:	e0244193 	mla	r4, r3, r1, r4
 988:	e0810392 	umull	r0, r1, r2, r3
 98c:	e3a02001 	mov	r2, #1
 990:	e0922000 	adds	r2, r2, r0
 994:	e0841001 	add	r1, r4, r1
 998:	e3a03000 	mov	r3, #0
 99c:	e0a33001 	adc	r3, r3, r1
 9a0:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
 9a4:	e58c30ac 	str	r3, [r12, #172]	; 0xac
 9a8:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
 9ac:	e8bd0010 	ldmfd	sp!, {r4}
 9b0:	e12fff1e 	bx	lr
 9b4:	00000e18 	.word	0x00000e18
 9b8:	5851f42d 	.word	0x5851f42d
 9bc:	4c957f2d 	.word	0x4c957f2d

000009c0 <__register_exitproc>:
 9c0:	e59fc0e4 	ldr	r12, [pc, #228]	; aac <__register_exitproc+0xec>
 9c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 9c8:	e59c4000 	ldr	r4, [r12]
 9cc:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 9d0:	e35c0000 	cmp	r12, #0
 9d4:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 9d8:	e59c5004 	ldr	r5, [r12, #4]
 9dc:	0584c148 	streq	r12, [r4, #328]	; 0x148
 9e0:	e355001f 	cmp	r5, #31
 9e4:	e24dd010 	sub	sp, sp, #16
 9e8:	e1a06000 	mov	r6, r0
 9ec:	da000015 	ble	a48 <__register_exitproc+0x88>
 9f0:	e59f00b8 	ldr	r0, [pc, #184]	; ab0 <__register_exitproc+0xf0>
 9f4:	e3500000 	cmp	r0, #0
 9f8:	1a000001 	bne	a04 <__register_exitproc+0x44>
 9fc:	e3e00000 	mvn	r0, #0
 a00:	ea000018 	b	a68 <__register_exitproc+0xa8>
 a04:	e3a00e19 	mov	r0, #400	; 0x190
 a08:	e58d100c 	str	r1, [sp, #12]
 a0c:	e58d2008 	str	r2, [sp, #8]
 a10:	e58d3004 	str	r3, [sp, #4]
 a14:	e320f000 	nop	{0}
 a18:	e250c000 	subs	r12, r0, #0
 a1c:	e59d100c 	ldr	r1, [sp, #12]
 a20:	e59d2008 	ldr	r2, [sp, #8]
 a24:	e59d3004 	ldr	r3, [sp, #4]
 a28:	0afffff3 	beq	9fc <__register_exitproc+0x3c>
 a2c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 a30:	e3a00000 	mov	r0, #0
 a34:	e58c0004 	str	r0, [r12, #4]
 a38:	e58c5000 	str	r5, [r12]
 a3c:	e584c148 	str	r12, [r4, #328]	; 0x148
 a40:	e58c0188 	str	r0, [r12, #392]	; 0x188
 a44:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 a48:	e3560000 	cmp	r6, #0
 a4c:	e59c4004 	ldr	r4, [r12, #4]
 a50:	1a000007 	bne	a74 <__register_exitproc+0xb4>
 a54:	e2843002 	add	r3, r4, #2
 a58:	e2844001 	add	r4, r4, #1
 a5c:	e78c1103 	str	r1, [r12, r3, lsl #2]
 a60:	e58c4004 	str	r4, [r12, #4]
 a64:	e3a00000 	mov	r0, #0
 a68:	e28dd010 	add	sp, sp, #16
 a6c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 a70:	e12fff1e 	bx	lr
 a74:	e3a00001 	mov	r0, #1
 a78:	e1a00410 	lsl	r0, r0, r4
 a7c:	e08c8104 	add	r8, r12, r4, lsl #2
 a80:	e3560002 	cmp	r6, #2
 a84:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 a88:	e5883108 	str	r3, [r8, #264]	; 0x108
 a8c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 a90:	e1877000 	orr	r7, r7, r0
 a94:	01830000 	orreq	r0, r3, r0
 a98:	e1a05008 	mov	r5, r8
 a9c:	e5882088 	str	r2, [r8, #136]	; 0x88
 aa0:	e58c7188 	str	r7, [r12, #392]	; 0x188
 aa4:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 aa8:	eaffffe9 	b	a54 <__register_exitproc+0x94>
 aac:	00000da4 	.word	0x00000da4
 ab0:	00000000 	.word	0x00000000

00000ab4 <__call_exitprocs>:
 ab4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 ab8:	e59f3168 	ldr	r3, [pc, #360]	; c28 <__call_exitprocs+0x174>
 abc:	e5933000 	ldr	r3, [r3]
 ac0:	e24dd014 	sub	sp, sp, #20
 ac4:	e58d3004 	str	r3, [sp, #4]
 ac8:	e2833f52 	add	r3, r3, #328	; 0x148
 acc:	e58d0008 	str	r0, [sp, #8]
 ad0:	e58d300c 	str	r3, [sp, #12]
 ad4:	e1a07001 	mov	r7, r1
 ad8:	e3a08001 	mov	r8, #1
 adc:	e59d3004 	ldr	r3, [sp, #4]
 ae0:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 ae4:	e3560000 	cmp	r6, #0
 ae8:	e59db00c 	ldr	r11, [sp, #12]
 aec:	0a000033 	beq	bc0 <__call_exitprocs+0x10c>
 af0:	e5965004 	ldr	r5, [r6, #4]
 af4:	e2554001 	subs	r4, r5, #1
 af8:	5286a088 	addpl	r10, r6, #136	; 0x88
 afc:	5285501f 	addpl	r5, r5, #31
 b00:	508a5105 	addpl	r5, r10, r5, lsl #2
 b04:	5a000007 	bpl	b28 <__call_exitprocs+0x74>
 b08:	ea000029 	b	bb4 <__call_exitprocs+0x100>
 b0c:	e5953000 	ldr	r3, [r5]
 b10:	e1530007 	cmp	r3, r7
 b14:	0a000005 	beq	b30 <__call_exitprocs+0x7c>
 b18:	e2444001 	sub	r4, r4, #1
 b1c:	e3740001 	cmn	r4, #1
 b20:	e2455004 	sub	r5, r5, #4
 b24:	0a000022 	beq	bb4 <__call_exitprocs+0x100>
 b28:	e3570000 	cmp	r7, #0
 b2c:	1afffff6 	bne	b0c <__call_exitprocs+0x58>
 b30:	e5963004 	ldr	r3, [r6, #4]
 b34:	e06a2005 	rsb	r2, r10, r5
 b38:	e2433001 	sub	r3, r3, #1
 b3c:	e0862002 	add	r2, r6, r2
 b40:	e1530004 	cmp	r3, r4
 b44:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 b48:	13a01000 	movne	r1, #0
 b4c:	05864004 	streq	r4, [r6, #4]
 b50:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 b54:	e3530000 	cmp	r3, #0
 b58:	0affffee 	beq	b18 <__call_exitprocs+0x64>
 b5c:	e1a02418 	lsl	r2, r8, r4
 b60:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 b64:	e1120001 	tst	r2, r1
 b68:	e5969004 	ldr	r9, [r6, #4]
 b6c:	0a000016 	beq	bcc <__call_exitprocs+0x118>
 b70:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 b74:	e1120001 	tst	r2, r1
 b78:	1a000016 	bne	bd8 <__call_exitprocs+0x124>
 b7c:	e59d0008 	ldr	r0, [sp, #8]
 b80:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 b84:	e1a0e00f 	mov	lr, pc
 b88:	e12fff13 	bx	r3
 b8c:	e5963004 	ldr	r3, [r6, #4]
 b90:	e1530009 	cmp	r3, r9
 b94:	1affffd0 	bne	adc <__call_exitprocs+0x28>
 b98:	e59b3000 	ldr	r3, [r11]
 b9c:	e1530006 	cmp	r3, r6
 ba0:	1affffcd 	bne	adc <__call_exitprocs+0x28>
 ba4:	e2444001 	sub	r4, r4, #1
 ba8:	e3740001 	cmn	r4, #1
 bac:	e2455004 	sub	r5, r5, #4
 bb0:	1affffdc 	bne	b28 <__call_exitprocs+0x74>
 bb4:	e59f1070 	ldr	r1, [pc, #112]	; c2c <__call_exitprocs+0x178>
 bb8:	e3510000 	cmp	r1, #0
 bbc:	1a000009 	bne	be8 <__call_exitprocs+0x134>
 bc0:	e28dd014 	add	sp, sp, #20
 bc4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 bc8:	e12fff1e 	bx	lr
 bcc:	e1a0e00f 	mov	lr, pc
 bd0:	e12fff13 	bx	r3
 bd4:	eaffffec 	b	b8c <__call_exitprocs+0xd8>
 bd8:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 bdc:	e1a0e00f 	mov	lr, pc
 be0:	e12fff13 	bx	r3
 be4:	eaffffe8 	b	b8c <__call_exitprocs+0xd8>
 be8:	e5963004 	ldr	r3, [r6, #4]
 bec:	e3530000 	cmp	r3, #0
 bf0:	e5963000 	ldr	r3, [r6]
 bf4:	1a000008 	bne	c1c <__call_exitprocs+0x168>
 bf8:	e3530000 	cmp	r3, #0
 bfc:	0a000006 	beq	c1c <__call_exitprocs+0x168>
 c00:	e1a00006 	mov	r0, r6
 c04:	e58b3000 	str	r3, [r11]
 c08:	e320f000 	nop	{0}
 c0c:	e59b6000 	ldr	r6, [r11]
 c10:	e3560000 	cmp	r6, #0
 c14:	1affffb5 	bne	af0 <__call_exitprocs+0x3c>
 c18:	eaffffe8 	b	bc0 <__call_exitprocs+0x10c>
 c1c:	e1a0b006 	mov	r11, r6
 c20:	e1a06003 	mov	r6, r3
 c24:	eafffff9 	b	c10 <__call_exitprocs+0x15c>
 c28:	00000da4 	.word	0x00000da4
 c2c:	00000000 	.word	0x00000000

00000c30 <register_fini>:
 c30:	e92d4008 	push	{r3, lr}
 c34:	e59f3010 	ldr	r3, [pc, #16]	; c4c <register_fini+0x1c>
 c38:	e3530000 	cmp	r3, #0
 c3c:	159f000c 	ldrne	r0, [pc, #12]	; c50 <register_fini+0x20>
 c40:	1bffff2b 	blne	8f4 <atexit>
 c44:	e8bd4008 	pop	{r3, lr}
 c48:	e12fff1e 	bx	lr
 c4c:	00000dcc 	.word	0x00000dcc
 c50:	00000c54 	.word	0x00000c54

00000c54 <__libc_fini_array>:
 c54:	e92d4038 	push	{r3, r4, r5, lr}
 c58:	e59f5030 	ldr	r5, [pc, #48]	; c90 <__libc_fini_array+0x3c>
 c5c:	e59f4030 	ldr	r4, [pc, #48]	; c94 <__libc_fini_array+0x40>
 c60:	e0654004 	rsb	r4, r5, r4
 c64:	e1b04144 	asrs	r4, r4, #2
 c68:	10855104 	addne	r5, r5, r4, lsl #2
 c6c:	0a000004 	beq	c84 <__libc_fini_array+0x30>
 c70:	e5353004 	ldr	r3, [r5, #-4]!
 c74:	e1a0e00f 	mov	lr, pc
 c78:	e12fff13 	bx	r3
 c7c:	e2544001 	subs	r4, r4, #1
 c80:	1afffffa 	bne	c70 <__libc_fini_array+0x1c>
 c84:	eb000050 	bl	dcc <__libc_fini>
 c88:	e8bd4038 	pop	{r3, r4, r5, lr}
 c8c:	e12fff1e 	bx	lr
 c90:	00000de4 	.word	0x00000de4
 c94:	00000de8 	.word	0x00000de8

00000c98 <__cs3_premain>:
 c98:	e92d4008 	push	{r3, lr}
 c9c:	eb00001d 	bl	d18 <__libc_init_array>
 ca0:	e59f3030 	ldr	r3, [pc, #48]	; cd8 <__cs3_premain+0x40>
 ca4:	e3530000 	cmp	r3, #0
 ca8:	15930000 	ldrne	r0, [r3]
 cac:	01a00003 	moveq	r0, r3
 cb0:	e59f3024 	ldr	r3, [pc, #36]	; cdc <__cs3_premain+0x44>
 cb4:	e3530000 	cmp	r3, #0
 cb8:	15931000 	ldrne	r1, [r3]
 cbc:	01a01003 	moveq	r1, r3
 cc0:	e3a02000 	mov	r2, #0
 cc4:	ebfffe18 	bl	52c <main>
 cc8:	e59f3010 	ldr	r3, [pc, #16]	; ce0 <__cs3_premain+0x48>
 ccc:	e3530000 	cmp	r3, #0
 cd0:	1bffff0f 	blne	914 <exit>
 cd4:	eafffffe 	b	cd4 <__cs3_premain+0x3c>
	...
 ce0:	00000914 	.word	0x00000914

00000ce4 <_exit>:
 ce4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 ce8:	e3a00018 	mov	r0, #24
 cec:	e59f1004 	ldr	r1, [pc, #4]	; cf8 <_exit+0x14>
 cf0:	ef123456 	svc	0x00123456
 cf4:	eafffffe 	b	cf4 <_exit+0x10>
 cf8:	00020026 	.word	0x00020026

00000cfc <__cs3_isr_interrupt>:
 cfc:	eafffffe 	b	cfc <__cs3_isr_interrupt>

00000d00 <__cs3_isr_undef>:
 d00:	eafffffe 	b	d00 <__cs3_isr_undef>

00000d04 <__cs3_isr_swi>:
 d04:	eafffffe 	b	d04 <__cs3_isr_swi>

00000d08 <__cs3_isr_pabort>:
 d08:	eafffffe 	b	d08 <__cs3_isr_pabort>

00000d0c <__cs3_isr_dabort>:
 d0c:	eafffffe 	b	d0c <__cs3_isr_dabort>

00000d10 <__cs3_isr_irq>:
 d10:	eafffffe 	b	d10 <__cs3_isr_irq>

00000d14 <__cs3_isr_fiq>:
 d14:	eafffffe 	b	d14 <__cs3_isr_fiq>

00000d18 <__libc_init_array>:
 d18:	e92d4070 	push	{r4, r5, r6, lr}
 d1c:	e59f506c 	ldr	r5, [pc, #108]	; d90 <__libc_init_array+0x78>
 d20:	e59f606c 	ldr	r6, [pc, #108]	; d94 <__libc_init_array+0x7c>
 d24:	e0656006 	rsb	r6, r5, r6
 d28:	e1b06146 	asrs	r6, r6, #2
 d2c:	12455004 	subne	r5, r5, #4
 d30:	13a04000 	movne	r4, #0
 d34:	0a000005 	beq	d50 <__libc_init_array+0x38>
 d38:	e5b53004 	ldr	r3, [r5, #4]!
 d3c:	e2844001 	add	r4, r4, #1
 d40:	e1a0e00f 	mov	lr, pc
 d44:	e12fff13 	bx	r3
 d48:	e1560004 	cmp	r6, r4
 d4c:	1afffff9 	bne	d38 <__libc_init_array+0x20>
 d50:	e59f5040 	ldr	r5, [pc, #64]	; d98 <__libc_init_array+0x80>
 d54:	e59f6040 	ldr	r6, [pc, #64]	; d9c <__libc_init_array+0x84>
 d58:	e0656006 	rsb	r6, r5, r6
 d5c:	eb000012 	bl	dac <_init>
 d60:	e1b06146 	asrs	r6, r6, #2
 d64:	12455004 	subne	r5, r5, #4
 d68:	13a04000 	movne	r4, #0
 d6c:	0a000005 	beq	d88 <__libc_init_array+0x70>
 d70:	e5b53004 	ldr	r3, [r5, #4]!
 d74:	e2844001 	add	r4, r4, #1
 d78:	e1a0e00f 	mov	lr, pc
 d7c:	e12fff13 	bx	r3
 d80:	e1560004 	cmp	r6, r4
 d84:	1afffff9 	bne	d70 <__libc_init_array+0x58>
 d88:	e8bd4070 	pop	{r4, r5, r6, lr}
 d8c:	e12fff1e 	bx	lr
 d90:	00000dc4 	.word	0x00000dc4
 d94:	00000dc4 	.word	0x00000dc4
 d98:	00000dc4 	.word	0x00000dc4
 d9c:	00000dcc 	.word	0x00000dcc

Disassembly of section .rodata:

00000da4 <_global_impure_ptr>:
 da4:	00000e20 00000043                        ...C...

00000dac <_init>:
 dac:	e1a0c00d 	mov	r12, sp
 db0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 db4:	e24cb004 	sub	r11, r12, #4
 db8:	e24bd028 	sub	sp, r11, #40	; 0x28
 dbc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 dc0:	e12fff1e 	bx	lr

00000dc4 <__init_array_start>:
 dc4:	00000c30 	.word	0x00000c30

00000dc8 <__frame_dummy_init_array_entry>:
 dc8:	00000208                                ....

00000dcc <__libc_fini>:
 dcc:	e1a0c00d 	mov	r12, sp
 dd0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 dd4:	e24cb004 	sub	r11, r12, #4
 dd8:	e24bd028 	sub	sp, r11, #40	; 0x28
 ddc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 de0:	e12fff1e 	bx	lr

00000de4 <__fini_array_start>:
 de4:	000001c4 	.word	0x000001c4

00000de8 <__cs3_regions>:
	...
 df4:	00001250 	.word	0x00001250
 df8:	00000030 	.word	0x00000030

00000dfc <__cs3_regions_end>:
 dfc:	00000000 	.word	0x00000000
