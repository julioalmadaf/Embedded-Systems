
C:/EMBEDDED/DEBUGPS2/PS2_interrupt.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	e4 23 00 00 e8 23 00 00 ec 23 00 00 f0 23 00 00     .#...#...#...#..
  30:	f4 23 00 00 88 5b 00 00 f8 23 00 00 38 24 00 00     .#...[...#..8$..

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00150e 	bl	5514 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000650c 	.word	0x0000650c

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00007160 	.word	0x00007160

00000124 <__cs3_heap_start_ptr>:
     124:	00007680 	.word	0x00007680

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00007168 	.word	0x00007168
     170:	0000716b 	.word	0x0000716b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00007168 	.word	0x00007168
     1bc:	00007168 	.word	0x00007168
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00007168 	.word	0x00007168
     200:	00000000 	.word	0x00000000
     204:	00005c24 	.word	0x00005c24

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00005c24 	.word	0x00005c24
     250:	0000716c 	.word	0x0000716c
     254:	00006510 	.word	0x00006510
     258:	00000000 	.word	0x00000000

0000025c <PS2_ISR>:
  	volatile int * PS2_ptr = (int *) 0xFF200100;		// PS/2 port address
	int PS2_data, RAVAIL;



	PS2_data = *(PS2_ptr);									// read the Data register in the PS/2 port
     25c:	e3a03000 	mov	r3, #0
     260:	e34f3f20 	movt	r3, #65312	; 0xff20
     264:	e5931100 	ldr	r1, [r3, #256]	; 0x100
	RAVAIL = (PS2_data & 0xFFFF0000) >> 16;			// extract the RAVAIL field
	if (RAVAIL > 0)
     268:	e1b03821 	lsrs	r3, r1, #16
     26c:	012fff1e 	bxeq	lr
	{
		/* always save the last three bytes received */
		byte1 = byte2;
     270:	e3072199 	movw	r2, #29081	; 0x7199
     274:	e3402000 	movt	r2, #0
     278:	e5d20000 	ldrb	r0, [r2]
     27c:	e307319a 	movw	r3, #29082	; 0x719a
     280:	e3403000 	movt	r3, #0
     284:	e5c30000 	strb	r0, [r3]
		byte2 = byte3;
     288:	e3073198 	movw	r3, #29080	; 0x7198
     28c:	e3403000 	movt	r3, #0
     290:	e5d30000 	ldrb	r0, [r3]
     294:	e5c20000 	strb	r0, [r2]
		byte3 = PS2_data & 0xFF;
     298:	e6ef1071 	uxtb	r1, r1
     29c:	e5c31000 	strb	r1, [r3]
     2a0:	e12fff1e 	bx	lr

000002a4 <debugButton>:
    
	return;
}

void debugButton(void)
{
     2a4:	e92d4008 	push	{r3, lr}
    clear_screen();
     2a8:	eb000901 	bl	26b4 <clear_screen>

    if(byte1==0x0E)
     2ac:	e307319a 	movw	r3, #29082	; 0x719a
     2b0:	e3403000 	movt	r3, #0
     2b4:	e5d33000 	ldrb	r3, [r3]
     2b8:	e353000e 	cmp	r3, #14
     2bc:	1a00000b 	bne	2f0 <debugButton+0x4c>
    {
        LCD_text("Byte1=0E",0);
     2c0:	e3050c38 	movw	r0, #23608	; 0x5c38
     2c4:	e3400000 	movt	r0, #0
     2c8:	e3a01000 	mov	r1, #0
     2cc:	eb000939 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     2d0:	e3050c44 	movw	r0, #23620	; 0x5c44
     2d4:	e3400000 	movt	r0, #0
     2d8:	e3a01001 	mov	r1, #1
     2dc:	eb000935 	bl	27b8 <LCD_text>
        LCD_text("Byte3=0E",2);
     2e0:	e3050c50 	movw	r0, #23632	; 0x5c50
     2e4:	e3400000 	movt	r0, #0
     2e8:	e3a01002 	mov	r1, #2
     2ec:	eb000931 	bl	27b8 <LCD_text>
    } 
    if(byte1==0x16){
     2f0:	e307319a 	movw	r3, #29082	; 0x719a
     2f4:	e3403000 	movt	r3, #0
     2f8:	e5d33000 	ldrb	r3, [r3]
     2fc:	e3530016 	cmp	r3, #22
     300:	1a00000b 	bne	334 <debugButton+0x90>
        LCD_text("Byte1=16",0);
     304:	e3050c5c 	movw	r0, #23644	; 0x5c5c
     308:	e3400000 	movt	r0, #0
     30c:	e3a01000 	mov	r1, #0
     310:	eb000928 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     314:	e3050c44 	movw	r0, #23620	; 0x5c44
     318:	e3400000 	movt	r0, #0
     31c:	e3a01001 	mov	r1, #1
     320:	eb000924 	bl	27b8 <LCD_text>
        LCD_text("Byte3=16",2);
     324:	e3050c68 	movw	r0, #23656	; 0x5c68
     328:	e3400000 	movt	r0, #0
     32c:	e3a01002 	mov	r1, #2
     330:	eb000920 	bl	27b8 <LCD_text>
    }
    if(byte1==0x1E){
     334:	e307319a 	movw	r3, #29082	; 0x719a
     338:	e3403000 	movt	r3, #0
     33c:	e5d33000 	ldrb	r3, [r3]
     340:	e353001e 	cmp	r3, #30
     344:	1a00000b 	bne	378 <debugButton+0xd4>
        LCD_text("Byte1=1E",0);
     348:	e3050c74 	movw	r0, #23668	; 0x5c74
     34c:	e3400000 	movt	r0, #0
     350:	e3a01000 	mov	r1, #0
     354:	eb000917 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     358:	e3050c44 	movw	r0, #23620	; 0x5c44
     35c:	e3400000 	movt	r0, #0
     360:	e3a01001 	mov	r1, #1
     364:	eb000913 	bl	27b8 <LCD_text>
        LCD_text("Byte3=1E",2);
     368:	e3050c80 	movw	r0, #23680	; 0x5c80
     36c:	e3400000 	movt	r0, #0
     370:	e3a01002 	mov	r1, #2
     374:	eb00090f 	bl	27b8 <LCD_text>
    }
    if(byte1==0x26){
     378:	e307319a 	movw	r3, #29082	; 0x719a
     37c:	e3403000 	movt	r3, #0
     380:	e5d33000 	ldrb	r3, [r3]
     384:	e3530026 	cmp	r3, #38	; 0x26
     388:	1a00000b 	bne	3bc <debugButton+0x118>
        LCD_text("Byte1=26",0);
     38c:	e3050c8c 	movw	r0, #23692	; 0x5c8c
     390:	e3400000 	movt	r0, #0
     394:	e3a01000 	mov	r1, #0
     398:	eb000906 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     39c:	e3050c44 	movw	r0, #23620	; 0x5c44
     3a0:	e3400000 	movt	r0, #0
     3a4:	e3a01001 	mov	r1, #1
     3a8:	eb000902 	bl	27b8 <LCD_text>
        LCD_text("Byte3=26",2);
     3ac:	e3050c98 	movw	r0, #23704	; 0x5c98
     3b0:	e3400000 	movt	r0, #0
     3b4:	e3a01002 	mov	r1, #2
     3b8:	eb0008fe 	bl	27b8 <LCD_text>
    }
    if(byte1==0x25){
     3bc:	e307319a 	movw	r3, #29082	; 0x719a
     3c0:	e3403000 	movt	r3, #0
     3c4:	e5d33000 	ldrb	r3, [r3]
     3c8:	e3530025 	cmp	r3, #37	; 0x25
     3cc:	1a00000b 	bne	400 <debugButton+0x15c>
        LCD_text("Byte1=25",0);
     3d0:	e3050ca4 	movw	r0, #23716	; 0x5ca4
     3d4:	e3400000 	movt	r0, #0
     3d8:	e3a01000 	mov	r1, #0
     3dc:	eb0008f5 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     3e0:	e3050c44 	movw	r0, #23620	; 0x5c44
     3e4:	e3400000 	movt	r0, #0
     3e8:	e3a01001 	mov	r1, #1
     3ec:	eb0008f1 	bl	27b8 <LCD_text>
        LCD_text("Byte3=25",2);
     3f0:	e3050cb0 	movw	r0, #23728	; 0x5cb0
     3f4:	e3400000 	movt	r0, #0
     3f8:	e3a01002 	mov	r1, #2
     3fc:	eb0008ed 	bl	27b8 <LCD_text>
    }
    if(byte1==0x2E){
     400:	e307319a 	movw	r3, #29082	; 0x719a
     404:	e3403000 	movt	r3, #0
     408:	e5d33000 	ldrb	r3, [r3]
     40c:	e353002e 	cmp	r3, #46	; 0x2e
     410:	1a00000b 	bne	444 <debugButton+0x1a0>
        LCD_text("Byte1=2E",0);
     414:	e3050cbc 	movw	r0, #23740	; 0x5cbc
     418:	e3400000 	movt	r0, #0
     41c:	e3a01000 	mov	r1, #0
     420:	eb0008e4 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     424:	e3050c44 	movw	r0, #23620	; 0x5c44
     428:	e3400000 	movt	r0, #0
     42c:	e3a01001 	mov	r1, #1
     430:	eb0008e0 	bl	27b8 <LCD_text>
        LCD_text("Byte3=2E",2);
     434:	e3050cc8 	movw	r0, #23752	; 0x5cc8
     438:	e3400000 	movt	r0, #0
     43c:	e3a01002 	mov	r1, #2
     440:	eb0008dc 	bl	27b8 <LCD_text>
    }
    if(byte1==0x36){
     444:	e307319a 	movw	r3, #29082	; 0x719a
     448:	e3403000 	movt	r3, #0
     44c:	e5d33000 	ldrb	r3, [r3]
     450:	e3530036 	cmp	r3, #54	; 0x36
     454:	1a00000b 	bne	488 <debugButton+0x1e4>
        LCD_text("Byte1=36",0);
     458:	e3050cd4 	movw	r0, #23764	; 0x5cd4
     45c:	e3400000 	movt	r0, #0
     460:	e3a01000 	mov	r1, #0
     464:	eb0008d3 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     468:	e3050c44 	movw	r0, #23620	; 0x5c44
     46c:	e3400000 	movt	r0, #0
     470:	e3a01001 	mov	r1, #1
     474:	eb0008cf 	bl	27b8 <LCD_text>
        LCD_text("Byte3=36",2);
     478:	e3050ce0 	movw	r0, #23776	; 0x5ce0
     47c:	e3400000 	movt	r0, #0
     480:	e3a01002 	mov	r1, #2
     484:	eb0008cb 	bl	27b8 <LCD_text>
    }
    if(byte1==0x3D){
     488:	e307319a 	movw	r3, #29082	; 0x719a
     48c:	e3403000 	movt	r3, #0
     490:	e5d33000 	ldrb	r3, [r3]
     494:	e353003d 	cmp	r3, #61	; 0x3d
     498:	1a00000b 	bne	4cc <debugButton+0x228>
        LCD_text("Byte1=3D",0);
     49c:	e3050cec 	movw	r0, #23788	; 0x5cec
     4a0:	e3400000 	movt	r0, #0
     4a4:	e3a01000 	mov	r1, #0
     4a8:	eb0008c2 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     4ac:	e3050c44 	movw	r0, #23620	; 0x5c44
     4b0:	e3400000 	movt	r0, #0
     4b4:	e3a01001 	mov	r1, #1
     4b8:	eb0008be 	bl	27b8 <LCD_text>
        LCD_text("Byte3=3D",2);
     4bc:	e3050cf8 	movw	r0, #23800	; 0x5cf8
     4c0:	e3400000 	movt	r0, #0
     4c4:	e3a01002 	mov	r1, #2
     4c8:	eb0008ba 	bl	27b8 <LCD_text>
    }
    if(byte1==0x3E){
     4cc:	e307319a 	movw	r3, #29082	; 0x719a
     4d0:	e3403000 	movt	r3, #0
     4d4:	e5d33000 	ldrb	r3, [r3]
     4d8:	e353003e 	cmp	r3, #62	; 0x3e
     4dc:	1a00000b 	bne	510 <debugButton+0x26c>
        LCD_text("Byte1=3E",0);
     4e0:	e3050d04 	movw	r0, #23812	; 0x5d04
     4e4:	e3400000 	movt	r0, #0
     4e8:	e3a01000 	mov	r1, #0
     4ec:	eb0008b1 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     4f0:	e3050c44 	movw	r0, #23620	; 0x5c44
     4f4:	e3400000 	movt	r0, #0
     4f8:	e3a01001 	mov	r1, #1
     4fc:	eb0008ad 	bl	27b8 <LCD_text>
        LCD_text("Byte3=3E",2);
     500:	e3050d10 	movw	r0, #23824	; 0x5d10
     504:	e3400000 	movt	r0, #0
     508:	e3a01002 	mov	r1, #2
     50c:	eb0008a9 	bl	27b8 <LCD_text>
    }
    if(byte1==0x46){
     510:	e307319a 	movw	r3, #29082	; 0x719a
     514:	e3403000 	movt	r3, #0
     518:	e5d33000 	ldrb	r3, [r3]
     51c:	e3530046 	cmp	r3, #70	; 0x46
     520:	1a00000b 	bne	554 <__cs3_region_zero_size_ram+0x3c>
        LCD_text("Byte1=46",0);
     524:	e3050d1c 	movw	r0, #23836	; 0x5d1c
     528:	e3400000 	movt	r0, #0
     52c:	e3a01000 	mov	r1, #0
     530:	eb0008a0 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     534:	e3050c44 	movw	r0, #23620	; 0x5c44
     538:	e3400000 	movt	r0, #0
     53c:	e3a01001 	mov	r1, #1
     540:	eb00089c 	bl	27b8 <LCD_text>
        LCD_text("Byte3=46",2);
     544:	e3050d28 	movw	r0, #23848	; 0x5d28
     548:	e3400000 	movt	r0, #0
     54c:	e3a01002 	mov	r1, #2
     550:	eb000898 	bl	27b8 <LCD_text>
    }
    if(byte1==0x45){
     554:	e307319a 	movw	r3, #29082	; 0x719a
     558:	e3403000 	movt	r3, #0
     55c:	e5d33000 	ldrb	r3, [r3]
     560:	e3530045 	cmp	r3, #69	; 0x45
     564:	1a00000b 	bne	598 <__cs3_region_zero_size_ram+0x80>
        LCD_text("Byte1=45",0);
     568:	e3050d34 	movw	r0, #23860	; 0x5d34
     56c:	e3400000 	movt	r0, #0
     570:	e3a01000 	mov	r1, #0
     574:	eb00088f 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     578:	e3050c44 	movw	r0, #23620	; 0x5c44
     57c:	e3400000 	movt	r0, #0
     580:	e3a01001 	mov	r1, #1
     584:	eb00088b 	bl	27b8 <LCD_text>
        LCD_text("Byte3=45",2);
     588:	e3050d40 	movw	r0, #23872	; 0x5d40
     58c:	e3400000 	movt	r0, #0
     590:	e3a01002 	mov	r1, #2
     594:	eb000887 	bl	27b8 <LCD_text>
    }
    if(byte1==0x4E){
     598:	e307319a 	movw	r3, #29082	; 0x719a
     59c:	e3403000 	movt	r3, #0
     5a0:	e5d33000 	ldrb	r3, [r3]
     5a4:	e353004e 	cmp	r3, #78	; 0x4e
     5a8:	1a00000b 	bne	5dc <__cs3_region_zero_size_ram+0xc4>
        LCD_text("Byte1=4E",0);
     5ac:	e3050d4c 	movw	r0, #23884	; 0x5d4c
     5b0:	e3400000 	movt	r0, #0
     5b4:	e3a01000 	mov	r1, #0
     5b8:	eb00087e 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     5bc:	e3050c44 	movw	r0, #23620	; 0x5c44
     5c0:	e3400000 	movt	r0, #0
     5c4:	e3a01001 	mov	r1, #1
     5c8:	eb00087a 	bl	27b8 <LCD_text>
        LCD_text("Byte3=4E",2);
     5cc:	e3050d58 	movw	r0, #23896	; 0x5d58
     5d0:	e3400000 	movt	r0, #0
     5d4:	e3a01002 	mov	r1, #2
     5d8:	eb000876 	bl	27b8 <LCD_text>
    }
    if(byte1==0x55){
     5dc:	e307319a 	movw	r3, #29082	; 0x719a
     5e0:	e3403000 	movt	r3, #0
     5e4:	e5d33000 	ldrb	r3, [r3]
     5e8:	e3530055 	cmp	r3, #85	; 0x55
     5ec:	1a00000b 	bne	620 <__cs3_region_zero_size_ram+0x108>
        LCD_text("Byte1=55",0);
     5f0:	e3050d64 	movw	r0, #23908	; 0x5d64
     5f4:	e3400000 	movt	r0, #0
     5f8:	e3a01000 	mov	r1, #0
     5fc:	eb00086d 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     600:	e3050c44 	movw	r0, #23620	; 0x5c44
     604:	e3400000 	movt	r0, #0
     608:	e3a01001 	mov	r1, #1
     60c:	eb000869 	bl	27b8 <LCD_text>
        LCD_text("Byte3=55",2);
     610:	e3050d70 	movw	r0, #23920	; 0x5d70
     614:	e3400000 	movt	r0, #0
     618:	e3a01002 	mov	r1, #2
     61c:	eb000865 	bl	27b8 <LCD_text>
    }
    if(byte1==0x66){
     620:	e307319a 	movw	r3, #29082	; 0x719a
     624:	e3403000 	movt	r3, #0
     628:	e5d33000 	ldrb	r3, [r3]
     62c:	e3530066 	cmp	r3, #102	; 0x66
     630:	1a00000b 	bne	664 <__cs3_region_zero_size_ram+0x14c>
        LCD_text("Byte1=66",0);
     634:	e3050d7c 	movw	r0, #23932	; 0x5d7c
     638:	e3400000 	movt	r0, #0
     63c:	e3a01000 	mov	r1, #0
     640:	eb00085c 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     644:	e3050c44 	movw	r0, #23620	; 0x5c44
     648:	e3400000 	movt	r0, #0
     64c:	e3a01001 	mov	r1, #1
     650:	eb000858 	bl	27b8 <LCD_text>
        LCD_text("Byte3=66",2);
     654:	e3050d88 	movw	r0, #23944	; 0x5d88
     658:	e3400000 	movt	r0, #0
     65c:	e3a01002 	mov	r1, #2
     660:	eb000854 	bl	27b8 <LCD_text>
    } 
    if(byte1==0x15){
     664:	e307319a 	movw	r3, #29082	; 0x719a
     668:	e3403000 	movt	r3, #0
     66c:	e5d33000 	ldrb	r3, [r3]
     670:	e3530015 	cmp	r3, #21
     674:	1a00000b 	bne	6a8 <__cs3_region_zero_size_ram+0x190>
        LCD_text("Byte1=15",0);
     678:	e3050d94 	movw	r0, #23956	; 0x5d94
     67c:	e3400000 	movt	r0, #0
     680:	e3a01000 	mov	r1, #0
     684:	eb00084b 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     688:	e3050c44 	movw	r0, #23620	; 0x5c44
     68c:	e3400000 	movt	r0, #0
     690:	e3a01001 	mov	r1, #1
     694:	eb000847 	bl	27b8 <LCD_text>
        LCD_text("Byte3=15",2);
     698:	e3050da0 	movw	r0, #23968	; 0x5da0
     69c:	e3400000 	movt	r0, #0
     6a0:	e3a01002 	mov	r1, #2
     6a4:	eb000843 	bl	27b8 <LCD_text>
    }
    if(byte1==0x1D)
     6a8:	e307319a 	movw	r3, #29082	; 0x719a
     6ac:	e3403000 	movt	r3, #0
     6b0:	e5d33000 	ldrb	r3, [r3]
     6b4:	e353001d 	cmp	r3, #29
     6b8:	1a00000b 	bne	6ec <__cs3_region_zero_size_ram+0x1d4>
    {
        LCD_text("Byte1=1D",0);
     6bc:	e3050dac 	movw	r0, #23980	; 0x5dac
     6c0:	e3400000 	movt	r0, #0
     6c4:	e3a01000 	mov	r1, #0
     6c8:	eb00083a 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     6cc:	e3050c44 	movw	r0, #23620	; 0x5c44
     6d0:	e3400000 	movt	r0, #0
     6d4:	e3a01001 	mov	r1, #1
     6d8:	eb000836 	bl	27b8 <LCD_text>
        LCD_text("Byte3=1D",2);
     6dc:	e3050db8 	movw	r0, #23992	; 0x5db8
     6e0:	e3400000 	movt	r0, #0
     6e4:	e3a01002 	mov	r1, #2
     6e8:	eb000832 	bl	27b8 <LCD_text>
    }
    if(byte1==0x24){
     6ec:	e307319a 	movw	r3, #29082	; 0x719a
     6f0:	e3403000 	movt	r3, #0
     6f4:	e5d33000 	ldrb	r3, [r3]
     6f8:	e3530024 	cmp	r3, #36	; 0x24
     6fc:	1a00000b 	bne	730 <__cs3_region_zero_size_ram+0x218>
        LCD_text("Byte1=24",0);
     700:	e3050dc4 	movw	r0, #24004	; 0x5dc4
     704:	e3400000 	movt	r0, #0
     708:	e3a01000 	mov	r1, #0
     70c:	eb000829 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     710:	e3050c44 	movw	r0, #23620	; 0x5c44
     714:	e3400000 	movt	r0, #0
     718:	e3a01001 	mov	r1, #1
     71c:	eb000825 	bl	27b8 <LCD_text>
        LCD_text("Byte3=24",2);
     720:	e3050dd0 	movw	r0, #24016	; 0x5dd0
     724:	e3400000 	movt	r0, #0
     728:	e3a01002 	mov	r1, #2
     72c:	eb000821 	bl	27b8 <LCD_text>
    }
    if(byte1==0x2D)
     730:	e307319a 	movw	r3, #29082	; 0x719a
     734:	e3403000 	movt	r3, #0
     738:	e5d33000 	ldrb	r3, [r3]
     73c:	e353002d 	cmp	r3, #45	; 0x2d
     740:	1a00000b 	bne	774 <__cs3_region_zero_size_ram+0x25c>
    {
        LCD_text("Byte1=2D",0);
     744:	e3050ddc 	movw	r0, #24028	; 0x5ddc
     748:	e3400000 	movt	r0, #0
     74c:	e3a01000 	mov	r1, #0
     750:	eb000818 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     754:	e3050c44 	movw	r0, #23620	; 0x5c44
     758:	e3400000 	movt	r0, #0
     75c:	e3a01001 	mov	r1, #1
     760:	eb000814 	bl	27b8 <LCD_text>
        LCD_text("Byte3=2D",2);
     764:	e3050de8 	movw	r0, #24040	; 0x5de8
     768:	e3400000 	movt	r0, #0
     76c:	e3a01002 	mov	r1, #2
     770:	eb000810 	bl	27b8 <LCD_text>
    }
    if(byte1==0x2C)
     774:	e307319a 	movw	r3, #29082	; 0x719a
     778:	e3403000 	movt	r3, #0
     77c:	e5d33000 	ldrb	r3, [r3]
     780:	e353002c 	cmp	r3, #44	; 0x2c
     784:	1a00000b 	bne	7b8 <__cs3_region_zero_size_ram+0x2a0>
    {
        LCD_text("Byte1=2C",0);
     788:	e3050df4 	movw	r0, #24052	; 0x5df4
     78c:	e3400000 	movt	r0, #0
     790:	e3a01000 	mov	r1, #0
     794:	eb000807 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     798:	e3050c44 	movw	r0, #23620	; 0x5c44
     79c:	e3400000 	movt	r0, #0
     7a0:	e3a01001 	mov	r1, #1
     7a4:	eb000803 	bl	27b8 <LCD_text>
        LCD_text("Byte3=2C",2);
     7a8:	e3050e00 	movw	r0, #24064	; 0x5e00
     7ac:	e3400000 	movt	r0, #0
     7b0:	e3a01002 	mov	r1, #2
     7b4:	eb0007ff 	bl	27b8 <LCD_text>
    }
    if(byte1==0x35)
     7b8:	e307319a 	movw	r3, #29082	; 0x719a
     7bc:	e3403000 	movt	r3, #0
     7c0:	e5d33000 	ldrb	r3, [r3]
     7c4:	e3530035 	cmp	r3, #53	; 0x35
     7c8:	1a00000b 	bne	7fc <__cs3_region_zero_size_ram+0x2e4>
    {
        LCD_text("Byte1=35",0);
     7cc:	e3050e0c 	movw	r0, #24076	; 0x5e0c
     7d0:	e3400000 	movt	r0, #0
     7d4:	e3a01000 	mov	r1, #0
     7d8:	eb0007f6 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     7dc:	e3050c44 	movw	r0, #23620	; 0x5c44
     7e0:	e3400000 	movt	r0, #0
     7e4:	e3a01001 	mov	r1, #1
     7e8:	eb0007f2 	bl	27b8 <LCD_text>
        LCD_text("Byte3=35",2);
     7ec:	e3050e18 	movw	r0, #24088	; 0x5e18
     7f0:	e3400000 	movt	r0, #0
     7f4:	e3a01002 	mov	r1, #2
     7f8:	eb0007ee 	bl	27b8 <LCD_text>
    }
    if(byte1==0x3C)
     7fc:	e307319a 	movw	r3, #29082	; 0x719a
     800:	e3403000 	movt	r3, #0
     804:	e5d33000 	ldrb	r3, [r3]
     808:	e353003c 	cmp	r3, #60	; 0x3c
     80c:	1a00000b 	bne	840 <__cs3_region_zero_size_ram+0x328>
    {
        LCD_text("Byte1=3C",0);
     810:	e3050e24 	movw	r0, #24100	; 0x5e24
     814:	e3400000 	movt	r0, #0
     818:	e3a01000 	mov	r1, #0
     81c:	eb0007e5 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     820:	e3050c44 	movw	r0, #23620	; 0x5c44
     824:	e3400000 	movt	r0, #0
     828:	e3a01001 	mov	r1, #1
     82c:	eb0007e1 	bl	27b8 <LCD_text>
        LCD_text("Byte3=3C",2);
     830:	e3050e30 	movw	r0, #24112	; 0x5e30
     834:	e3400000 	movt	r0, #0
     838:	e3a01002 	mov	r1, #2
     83c:	eb0007dd 	bl	27b8 <LCD_text>
    }
    if(byte1==0x43)
     840:	e307319a 	movw	r3, #29082	; 0x719a
     844:	e3403000 	movt	r3, #0
     848:	e5d33000 	ldrb	r3, [r3]
     84c:	e3530043 	cmp	r3, #67	; 0x43
     850:	1a00000b 	bne	884 <__cs3_region_zero_size_ram+0x36c>
    {
        LCD_text("Byte1=43",0);
     854:	e3050e3c 	movw	r0, #24124	; 0x5e3c
     858:	e3400000 	movt	r0, #0
     85c:	e3a01000 	mov	r1, #0
     860:	eb0007d4 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     864:	e3050c44 	movw	r0, #23620	; 0x5c44
     868:	e3400000 	movt	r0, #0
     86c:	e3a01001 	mov	r1, #1
     870:	eb0007d0 	bl	27b8 <LCD_text>
        LCD_text("Byte3=43",2);
     874:	e3050e48 	movw	r0, #24136	; 0x5e48
     878:	e3400000 	movt	r0, #0
     87c:	e3a01002 	mov	r1, #2
     880:	eb0007cc 	bl	27b8 <LCD_text>
    }
    if(byte1==0x44)
     884:	e307319a 	movw	r3, #29082	; 0x719a
     888:	e3403000 	movt	r3, #0
     88c:	e5d33000 	ldrb	r3, [r3]
     890:	e3530044 	cmp	r3, #68	; 0x44
     894:	1a00000b 	bne	8c8 <__cs3_region_zero_size_ram+0x3b0>
    {
        LCD_text("Byte1=44",0);
     898:	e3050e54 	movw	r0, #24148	; 0x5e54
     89c:	e3400000 	movt	r0, #0
     8a0:	e3a01000 	mov	r1, #0
     8a4:	eb0007c3 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     8a8:	e3050c44 	movw	r0, #23620	; 0x5c44
     8ac:	e3400000 	movt	r0, #0
     8b0:	e3a01001 	mov	r1, #1
     8b4:	eb0007bf 	bl	27b8 <LCD_text>
        LCD_text("Byte3=44",2);
     8b8:	e3050e60 	movw	r0, #24160	; 0x5e60
     8bc:	e3400000 	movt	r0, #0
     8c0:	e3a01002 	mov	r1, #2
     8c4:	eb0007bb 	bl	27b8 <LCD_text>
    }
    if(byte1==0x4D)
     8c8:	e307319a 	movw	r3, #29082	; 0x719a
     8cc:	e3403000 	movt	r3, #0
     8d0:	e5d33000 	ldrb	r3, [r3]
     8d4:	e353004d 	cmp	r3, #77	; 0x4d
     8d8:	1a00000b 	bne	90c <__cs3_region_zero_size_ram+0x3f4>
    {
        LCD_text("Byte1=4D",0);
     8dc:	e3050e6c 	movw	r0, #24172	; 0x5e6c
     8e0:	e3400000 	movt	r0, #0
     8e4:	e3a01000 	mov	r1, #0
     8e8:	eb0007b2 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     8ec:	e3050c44 	movw	r0, #23620	; 0x5c44
     8f0:	e3400000 	movt	r0, #0
     8f4:	e3a01001 	mov	r1, #1
     8f8:	eb0007ae 	bl	27b8 <LCD_text>
        LCD_text("Byte3=4D",2);
     8fc:	e3050e78 	movw	r0, #24184	; 0x5e78
     900:	e3400000 	movt	r0, #0
     904:	e3a01002 	mov	r1, #2
     908:	eb0007aa 	bl	27b8 <LCD_text>
    }
    if(byte1==0x54)
     90c:	e307319a 	movw	r3, #29082	; 0x719a
     910:	e3403000 	movt	r3, #0
     914:	e5d33000 	ldrb	r3, [r3]
     918:	e3530054 	cmp	r3, #84	; 0x54
     91c:	1a00000b 	bne	950 <__cs3_region_zero_size_ram+0x438>
    {
        LCD_text("Byte1=54",0);
     920:	e3050e84 	movw	r0, #24196	; 0x5e84
     924:	e3400000 	movt	r0, #0
     928:	e3a01000 	mov	r1, #0
     92c:	eb0007a1 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     930:	e3050c44 	movw	r0, #23620	; 0x5c44
     934:	e3400000 	movt	r0, #0
     938:	e3a01001 	mov	r1, #1
     93c:	eb00079d 	bl	27b8 <LCD_text>
        LCD_text("Byte3=54",2);
     940:	e3050e90 	movw	r0, #24208	; 0x5e90
     944:	e3400000 	movt	r0, #0
     948:	e3a01002 	mov	r1, #2
     94c:	eb000799 	bl	27b8 <LCD_text>
    }
    if(byte1==0x5B)
     950:	e307319a 	movw	r3, #29082	; 0x719a
     954:	e3403000 	movt	r3, #0
     958:	e5d33000 	ldrb	r3, [r3]
     95c:	e353005b 	cmp	r3, #91	; 0x5b
     960:	1a00000b 	bne	994 <__cs3_region_zero_size_ram+0x47c>
    {
        LCD_text("Byte1=5B",0);
     964:	e3050e9c 	movw	r0, #24220	; 0x5e9c
     968:	e3400000 	movt	r0, #0
     96c:	e3a01000 	mov	r1, #0
     970:	eb000790 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     974:	e3050c44 	movw	r0, #23620	; 0x5c44
     978:	e3400000 	movt	r0, #0
     97c:	e3a01001 	mov	r1, #1
     980:	eb00078c 	bl	27b8 <LCD_text>
        LCD_text("Byte3=5B",2);
     984:	e3050ea8 	movw	r0, #24232	; 0x5ea8
     988:	e3400000 	movt	r0, #0
     98c:	e3a01002 	mov	r1, #2
     990:	eb000788 	bl	27b8 <LCD_text>
    }
    if(byte1==0x58)
     994:	e307319a 	movw	r3, #29082	; 0x719a
     998:	e3403000 	movt	r3, #0
     99c:	e5d33000 	ldrb	r3, [r3]
     9a0:	e3530058 	cmp	r3, #88	; 0x58
     9a4:	1a00000b 	bne	9d8 <__cs3_region_zero_size_ram+0x4c0>
    {
        LCD_text("Byte1=58",0);
     9a8:	e3050eb4 	movw	r0, #24244	; 0x5eb4
     9ac:	e3400000 	movt	r0, #0
     9b0:	e3a01000 	mov	r1, #0
     9b4:	eb00077f 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     9b8:	e3050c44 	movw	r0, #23620	; 0x5c44
     9bc:	e3400000 	movt	r0, #0
     9c0:	e3a01001 	mov	r1, #1
     9c4:	eb00077b 	bl	27b8 <LCD_text>
        LCD_text("Byte3=58",2);
     9c8:	e3050ec0 	movw	r0, #24256	; 0x5ec0
     9cc:	e3400000 	movt	r0, #0
     9d0:	e3a01002 	mov	r1, #2
     9d4:	eb000777 	bl	27b8 <LCD_text>
    } 
    if(byte1==0x1C)
     9d8:	e307319a 	movw	r3, #29082	; 0x719a
     9dc:	e3403000 	movt	r3, #0
     9e0:	e5d33000 	ldrb	r3, [r3]
     9e4:	e353001c 	cmp	r3, #28
     9e8:	1a00000b 	bne	a1c <__cs3_region_zero_size_ram+0x504>
    {
        LCD_text("Byte1=1C",0);
     9ec:	e3050ecc 	movw	r0, #24268	; 0x5ecc
     9f0:	e3400000 	movt	r0, #0
     9f4:	e3a01000 	mov	r1, #0
     9f8:	eb00076e 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     9fc:	e3050c44 	movw	r0, #23620	; 0x5c44
     a00:	e3400000 	movt	r0, #0
     a04:	e3a01001 	mov	r1, #1
     a08:	eb00076a 	bl	27b8 <LCD_text>
        LCD_text("Byte3=1C",2);
     a0c:	e3050ed8 	movw	r0, #24280	; 0x5ed8
     a10:	e3400000 	movt	r0, #0
     a14:	e3a01002 	mov	r1, #2
     a18:	eb000766 	bl	27b8 <LCD_text>
    }
    if(byte1==0x1B)
     a1c:	e307319a 	movw	r3, #29082	; 0x719a
     a20:	e3403000 	movt	r3, #0
     a24:	e5d33000 	ldrb	r3, [r3]
     a28:	e353001b 	cmp	r3, #27
     a2c:	1a00000b 	bne	a60 <__cs3_region_zero_size_ram+0x548>
    {
        LCD_text("Byte1=1B",0);
     a30:	e3050ee4 	movw	r0, #24292	; 0x5ee4
     a34:	e3400000 	movt	r0, #0
     a38:	e3a01000 	mov	r1, #0
     a3c:	eb00075d 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     a40:	e3050c44 	movw	r0, #23620	; 0x5c44
     a44:	e3400000 	movt	r0, #0
     a48:	e3a01001 	mov	r1, #1
     a4c:	eb000759 	bl	27b8 <LCD_text>
        LCD_text("Byte3=1B",2);
     a50:	e3050ef0 	movw	r0, #24304	; 0x5ef0
     a54:	e3400000 	movt	r0, #0
     a58:	e3a01002 	mov	r1, #2
     a5c:	eb000755 	bl	27b8 <LCD_text>
    }
    if(byte1==0x23)
     a60:	e307319a 	movw	r3, #29082	; 0x719a
     a64:	e3403000 	movt	r3, #0
     a68:	e5d33000 	ldrb	r3, [r3]
     a6c:	e3530023 	cmp	r3, #35	; 0x23
     a70:	1a00000b 	bne	aa4 <__cs3_region_zero_size_ram+0x58c>
    {
        LCD_text("Byte1=23",0);
     a74:	e3050efc 	movw	r0, #24316	; 0x5efc
     a78:	e3400000 	movt	r0, #0
     a7c:	e3a01000 	mov	r1, #0
     a80:	eb00074c 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     a84:	e3050c44 	movw	r0, #23620	; 0x5c44
     a88:	e3400000 	movt	r0, #0
     a8c:	e3a01001 	mov	r1, #1
     a90:	eb000748 	bl	27b8 <LCD_text>
        LCD_text("Byte3=23",2);
     a94:	e3050f08 	movw	r0, #24328	; 0x5f08
     a98:	e3400000 	movt	r0, #0
     a9c:	e3a01002 	mov	r1, #2
     aa0:	eb000744 	bl	27b8 <LCD_text>
    }
    if(byte1==0x2B)
     aa4:	e307319a 	movw	r3, #29082	; 0x719a
     aa8:	e3403000 	movt	r3, #0
     aac:	e5d33000 	ldrb	r3, [r3]
     ab0:	e353002b 	cmp	r3, #43	; 0x2b
     ab4:	1a00000b 	bne	ae8 <__cs3_region_zero_size_ram+0x5d0>
    {
        LCD_text("Byte1=2B",0);
     ab8:	e3050f14 	movw	r0, #24340	; 0x5f14
     abc:	e3400000 	movt	r0, #0
     ac0:	e3a01000 	mov	r1, #0
     ac4:	eb00073b 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     ac8:	e3050c44 	movw	r0, #23620	; 0x5c44
     acc:	e3400000 	movt	r0, #0
     ad0:	e3a01001 	mov	r1, #1
     ad4:	eb000737 	bl	27b8 <LCD_text>
        LCD_text("Byte3=2B",2);
     ad8:	e3050f20 	movw	r0, #24352	; 0x5f20
     adc:	e3400000 	movt	r0, #0
     ae0:	e3a01002 	mov	r1, #2
     ae4:	eb000733 	bl	27b8 <LCD_text>
    }
    if(byte1==0x34)
     ae8:	e307319a 	movw	r3, #29082	; 0x719a
     aec:	e3403000 	movt	r3, #0
     af0:	e5d33000 	ldrb	r3, [r3]
     af4:	e3530034 	cmp	r3, #52	; 0x34
     af8:	1a00000b 	bne	b2c <__cs3_region_zero_size_ram+0x614>
    {
        LCD_text("Byte1=34",0);
     afc:	e3050f2c 	movw	r0, #24364	; 0x5f2c
     b00:	e3400000 	movt	r0, #0
     b04:	e3a01000 	mov	r1, #0
     b08:	eb00072a 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     b0c:	e3050c44 	movw	r0, #23620	; 0x5c44
     b10:	e3400000 	movt	r0, #0
     b14:	e3a01001 	mov	r1, #1
     b18:	eb000726 	bl	27b8 <LCD_text>
        LCD_text("Byte3=34",2);
     b1c:	e3050f38 	movw	r0, #24376	; 0x5f38
     b20:	e3400000 	movt	r0, #0
     b24:	e3a01002 	mov	r1, #2
     b28:	eb000722 	bl	27b8 <LCD_text>
    }
    if(byte1==0x33)
     b2c:	e307319a 	movw	r3, #29082	; 0x719a
     b30:	e3403000 	movt	r3, #0
     b34:	e5d33000 	ldrb	r3, [r3]
     b38:	e3530033 	cmp	r3, #51	; 0x33
     b3c:	1a00000b 	bne	b70 <__cs3_region_zero_size_ram+0x658>
    {
        LCD_text("Byte1=33",0);
     b40:	e3050f44 	movw	r0, #24388	; 0x5f44
     b44:	e3400000 	movt	r0, #0
     b48:	e3a01000 	mov	r1, #0
     b4c:	eb000719 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     b50:	e3050c44 	movw	r0, #23620	; 0x5c44
     b54:	e3400000 	movt	r0, #0
     b58:	e3a01001 	mov	r1, #1
     b5c:	eb000715 	bl	27b8 <LCD_text>
        LCD_text("Byte3=33",2);
     b60:	e3050f50 	movw	r0, #24400	; 0x5f50
     b64:	e3400000 	movt	r0, #0
     b68:	e3a01002 	mov	r1, #2
     b6c:	eb000711 	bl	27b8 <LCD_text>
    }
    if(byte1==0x3B)
     b70:	e307319a 	movw	r3, #29082	; 0x719a
     b74:	e3403000 	movt	r3, #0
     b78:	e5d33000 	ldrb	r3, [r3]
     b7c:	e353003b 	cmp	r3, #59	; 0x3b
     b80:	1a00000b 	bne	bb4 <__cs3_region_zero_size_ram+0x69c>
    {
        LCD_text("Byte1=3B",0);
     b84:	e3050f5c 	movw	r0, #24412	; 0x5f5c
     b88:	e3400000 	movt	r0, #0
     b8c:	e3a01000 	mov	r1, #0
     b90:	eb000708 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     b94:	e3050c44 	movw	r0, #23620	; 0x5c44
     b98:	e3400000 	movt	r0, #0
     b9c:	e3a01001 	mov	r1, #1
     ba0:	eb000704 	bl	27b8 <LCD_text>
        LCD_text("Byte3=3B",2);
     ba4:	e3050f68 	movw	r0, #24424	; 0x5f68
     ba8:	e3400000 	movt	r0, #0
     bac:	e3a01002 	mov	r1, #2
     bb0:	eb000700 	bl	27b8 <LCD_text>
    }
    if(byte1==0x42)
     bb4:	e307319a 	movw	r3, #29082	; 0x719a
     bb8:	e3403000 	movt	r3, #0
     bbc:	e5d33000 	ldrb	r3, [r3]
     bc0:	e3530042 	cmp	r3, #66	; 0x42
     bc4:	1a00000b 	bne	bf8 <__cs3_region_zero_size_ram+0x6e0>
    {
        LCD_text("Byte1=42",0);
     bc8:	e3050f74 	movw	r0, #24436	; 0x5f74
     bcc:	e3400000 	movt	r0, #0
     bd0:	e3a01000 	mov	r1, #0
     bd4:	eb0006f7 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     bd8:	e3050c44 	movw	r0, #23620	; 0x5c44
     bdc:	e3400000 	movt	r0, #0
     be0:	e3a01001 	mov	r1, #1
     be4:	eb0006f3 	bl	27b8 <LCD_text>
        LCD_text("Byte3=42",2);
     be8:	e3050f80 	movw	r0, #24448	; 0x5f80
     bec:	e3400000 	movt	r0, #0
     bf0:	e3a01002 	mov	r1, #2
     bf4:	eb0006ef 	bl	27b8 <LCD_text>
    }
    if(byte1==0x4B)
     bf8:	e307319a 	movw	r3, #29082	; 0x719a
     bfc:	e3403000 	movt	r3, #0
     c00:	e5d33000 	ldrb	r3, [r3]
     c04:	e353004b 	cmp	r3, #75	; 0x4b
     c08:	1a00000b 	bne	c3c <__cs3_region_zero_size_ram+0x724>
    {
        LCD_text("Byte1=4B",0);
     c0c:	e3050f8c 	movw	r0, #24460	; 0x5f8c
     c10:	e3400000 	movt	r0, #0
     c14:	e3a01000 	mov	r1, #0
     c18:	eb0006e6 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     c1c:	e3050c44 	movw	r0, #23620	; 0x5c44
     c20:	e3400000 	movt	r0, #0
     c24:	e3a01001 	mov	r1, #1
     c28:	eb0006e2 	bl	27b8 <LCD_text>
        LCD_text("Byte3=4B",2);
     c2c:	e3050f98 	movw	r0, #24472	; 0x5f98
     c30:	e3400000 	movt	r0, #0
     c34:	e3a01002 	mov	r1, #2
     c38:	eb0006de 	bl	27b8 <LCD_text>
    }
    if(byte1==0x5A)
     c3c:	e307319a 	movw	r3, #29082	; 0x719a
     c40:	e3403000 	movt	r3, #0
     c44:	e5d33000 	ldrb	r3, [r3]
     c48:	e353005a 	cmp	r3, #90	; 0x5a
     c4c:	1a00000b 	bne	c80 <__cs3_region_zero_size_ram+0x768>
    {
        LCD_text("Byte1=5A",0);
     c50:	e3050fa4 	movw	r0, #24484	; 0x5fa4
     c54:	e3400000 	movt	r0, #0
     c58:	e3a01000 	mov	r1, #0
     c5c:	eb0006d5 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     c60:	e3050c44 	movw	r0, #23620	; 0x5c44
     c64:	e3400000 	movt	r0, #0
     c68:	e3a01001 	mov	r1, #1
     c6c:	eb0006d1 	bl	27b8 <LCD_text>
        LCD_text("Byte3=5A",2);
     c70:	e3050fb0 	movw	r0, #24496	; 0x5fb0
     c74:	e3400000 	movt	r0, #0
     c78:	e3a01002 	mov	r1, #2
     c7c:	eb0006cd 	bl	27b8 <LCD_text>
    }
    if(byte1==0x1A)
     c80:	e307319a 	movw	r3, #29082	; 0x719a
     c84:	e3403000 	movt	r3, #0
     c88:	e5d33000 	ldrb	r3, [r3]
     c8c:	e353001a 	cmp	r3, #26
     c90:	1a00000b 	bne	cc4 <__cs3_region_zero_size_ram+0x7ac>
    {
        LCD_text("Byte1=1A",0);
     c94:	e3050fbc 	movw	r0, #24508	; 0x5fbc
     c98:	e3400000 	movt	r0, #0
     c9c:	e3a01000 	mov	r1, #0
     ca0:	eb0006c4 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     ca4:	e3050c44 	movw	r0, #23620	; 0x5c44
     ca8:	e3400000 	movt	r0, #0
     cac:	e3a01001 	mov	r1, #1
     cb0:	eb0006c0 	bl	27b8 <LCD_text>
        LCD_text("Byte3=1A",2);
     cb4:	e3050fc8 	movw	r0, #24520	; 0x5fc8
     cb8:	e3400000 	movt	r0, #0
     cbc:	e3a01002 	mov	r1, #2
     cc0:	eb0006bc 	bl	27b8 <LCD_text>
    }
    if(byte1==0x22)
     cc4:	e307319a 	movw	r3, #29082	; 0x719a
     cc8:	e3403000 	movt	r3, #0
     ccc:	e5d33000 	ldrb	r3, [r3]
     cd0:	e3530022 	cmp	r3, #34	; 0x22
     cd4:	1a00000b 	bne	d08 <__cs3_region_zero_size_ram+0x7f0>
    {
        LCD_text("Byte1=22",0);
     cd8:	e3050fd4 	movw	r0, #24532	; 0x5fd4
     cdc:	e3400000 	movt	r0, #0
     ce0:	e3a01000 	mov	r1, #0
     ce4:	eb0006b3 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     ce8:	e3050c44 	movw	r0, #23620	; 0x5c44
     cec:	e3400000 	movt	r0, #0
     cf0:	e3a01001 	mov	r1, #1
     cf4:	eb0006af 	bl	27b8 <LCD_text>
        LCD_text("Byte3=22",2);
     cf8:	e3050fe0 	movw	r0, #24544	; 0x5fe0
     cfc:	e3400000 	movt	r0, #0
     d00:	e3a01002 	mov	r1, #2
     d04:	eb0006ab 	bl	27b8 <LCD_text>
    }
    if(byte1==0x21)
     d08:	e307319a 	movw	r3, #29082	; 0x719a
     d0c:	e3403000 	movt	r3, #0
     d10:	e5d33000 	ldrb	r3, [r3]
     d14:	e3530021 	cmp	r3, #33	; 0x21
     d18:	1a00000b 	bne	d4c <__cs3_region_zero_size_ram+0x834>
    {
        LCD_text("Byte1=21",0);
     d1c:	e3050fec 	movw	r0, #24556	; 0x5fec
     d20:	e3400000 	movt	r0, #0
     d24:	e3a01000 	mov	r1, #0
     d28:	eb0006a2 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     d2c:	e3050c44 	movw	r0, #23620	; 0x5c44
     d30:	e3400000 	movt	r0, #0
     d34:	e3a01001 	mov	r1, #1
     d38:	eb00069e 	bl	27b8 <LCD_text>
        LCD_text("Byte3=21",2);
     d3c:	e3050ff8 	movw	r0, #24568	; 0x5ff8
     d40:	e3400000 	movt	r0, #0
     d44:	e3a01002 	mov	r1, #2
     d48:	eb00069a 	bl	27b8 <LCD_text>
    }
    if(byte1==0x2A)
     d4c:	e307319a 	movw	r3, #29082	; 0x719a
     d50:	e3403000 	movt	r3, #0
     d54:	e5d33000 	ldrb	r3, [r3]
     d58:	e353002a 	cmp	r3, #42	; 0x2a
     d5c:	1a00000b 	bne	d90 <__cs3_region_zero_size_ram+0x878>
    {
        LCD_text("Byte1=2A",0);
     d60:	e3060004 	movw	r0, #24580	; 0x6004
     d64:	e3400000 	movt	r0, #0
     d68:	e3a01000 	mov	r1, #0
     d6c:	eb000691 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     d70:	e3050c44 	movw	r0, #23620	; 0x5c44
     d74:	e3400000 	movt	r0, #0
     d78:	e3a01001 	mov	r1, #1
     d7c:	eb00068d 	bl	27b8 <LCD_text>
        LCD_text("Byte3=2A",2);
     d80:	e3060010 	movw	r0, #24592	; 0x6010
     d84:	e3400000 	movt	r0, #0
     d88:	e3a01002 	mov	r1, #2
     d8c:	eb000689 	bl	27b8 <LCD_text>
    }
    if(byte1==0x32)
     d90:	e307319a 	movw	r3, #29082	; 0x719a
     d94:	e3403000 	movt	r3, #0
     d98:	e5d33000 	ldrb	r3, [r3]
     d9c:	e3530032 	cmp	r3, #50	; 0x32
     da0:	1a00000b 	bne	dd4 <__cs3_region_zero_size_ram+0x8bc>
    {
        LCD_text("Byte1=32",0);
     da4:	e306001c 	movw	r0, #24604	; 0x601c
     da8:	e3400000 	movt	r0, #0
     dac:	e3a01000 	mov	r1, #0
     db0:	eb000680 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     db4:	e3050c44 	movw	r0, #23620	; 0x5c44
     db8:	e3400000 	movt	r0, #0
     dbc:	e3a01001 	mov	r1, #1
     dc0:	eb00067c 	bl	27b8 <LCD_text>
        LCD_text("Byte3=32",2);
     dc4:	e3060028 	movw	r0, #24616	; 0x6028
     dc8:	e3400000 	movt	r0, #0
     dcc:	e3a01002 	mov	r1, #2
     dd0:	eb000678 	bl	27b8 <LCD_text>
    }
    if(byte1==0x31)
     dd4:	e307319a 	movw	r3, #29082	; 0x719a
     dd8:	e3403000 	movt	r3, #0
     ddc:	e5d33000 	ldrb	r3, [r3]
     de0:	e3530031 	cmp	r3, #49	; 0x31
     de4:	1a00000b 	bne	e18 <__cs3_region_zero_size_ram+0x900>
    {
        LCD_text("Byte1=31",0);
     de8:	e3060034 	movw	r0, #24628	; 0x6034
     dec:	e3400000 	movt	r0, #0
     df0:	e3a01000 	mov	r1, #0
     df4:	eb00066f 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     df8:	e3050c44 	movw	r0, #23620	; 0x5c44
     dfc:	e3400000 	movt	r0, #0
     e00:	e3a01001 	mov	r1, #1
     e04:	eb00066b 	bl	27b8 <LCD_text>
        LCD_text("Byte3=31",2);
     e08:	e3060040 	movw	r0, #24640	; 0x6040
     e0c:	e3400000 	movt	r0, #0
     e10:	e3a01002 	mov	r1, #2
     e14:	eb000667 	bl	27b8 <LCD_text>
    }
    if(byte1==0x3A)
     e18:	e307319a 	movw	r3, #29082	; 0x719a
     e1c:	e3403000 	movt	r3, #0
     e20:	e5d33000 	ldrb	r3, [r3]
     e24:	e353003a 	cmp	r3, #58	; 0x3a
     e28:	1a00000b 	bne	e5c <__cs3_region_zero_size_ram+0x944>
    {
        LCD_text("Byte1=3A",0);
     e2c:	e306004c 	movw	r0, #24652	; 0x604c
     e30:	e3400000 	movt	r0, #0
     e34:	e3a01000 	mov	r1, #0
     e38:	eb00065e 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     e3c:	e3050c44 	movw	r0, #23620	; 0x5c44
     e40:	e3400000 	movt	r0, #0
     e44:	e3a01001 	mov	r1, #1
     e48:	eb00065a 	bl	27b8 <LCD_text>
        LCD_text("Byte3=3A",2);
     e4c:	e3060058 	movw	r0, #24664	; 0x6058
     e50:	e3400000 	movt	r0, #0
     e54:	e3a01002 	mov	r1, #2
     e58:	eb000656 	bl	27b8 <LCD_text>
    }
    if(byte1==0x41)
     e5c:	e307319a 	movw	r3, #29082	; 0x719a
     e60:	e3403000 	movt	r3, #0
     e64:	e5d33000 	ldrb	r3, [r3]
     e68:	e3530041 	cmp	r3, #65	; 0x41
     e6c:	1a00000b 	bne	ea0 <__cs3_region_zero_size_ram+0x988>
    {
        LCD_text("Byte1=41",0);
     e70:	e3060064 	movw	r0, #24676	; 0x6064
     e74:	e3400000 	movt	r0, #0
     e78:	e3a01000 	mov	r1, #0
     e7c:	eb00064d 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     e80:	e3050c44 	movw	r0, #23620	; 0x5c44
     e84:	e3400000 	movt	r0, #0
     e88:	e3a01001 	mov	r1, #1
     e8c:	eb000649 	bl	27b8 <LCD_text>
        LCD_text("Byte3=41",2);
     e90:	e3060070 	movw	r0, #24688	; 0x6070
     e94:	e3400000 	movt	r0, #0
     e98:	e3a01002 	mov	r1, #2
     e9c:	eb000645 	bl	27b8 <LCD_text>
    }
    if(byte1==0x49)
     ea0:	e307319a 	movw	r3, #29082	; 0x719a
     ea4:	e3403000 	movt	r3, #0
     ea8:	e5d33000 	ldrb	r3, [r3]
     eac:	e3530049 	cmp	r3, #73	; 0x49
     eb0:	1a00000b 	bne	ee4 <__cs3_region_zero_size_ram+0x9cc>
    {
        LCD_text("Byte1=49",0);
     eb4:	e306007c 	movw	r0, #24700	; 0x607c
     eb8:	e3400000 	movt	r0, #0
     ebc:	e3a01000 	mov	r1, #0
     ec0:	eb00063c 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     ec4:	e3050c44 	movw	r0, #23620	; 0x5c44
     ec8:	e3400000 	movt	r0, #0
     ecc:	e3a01001 	mov	r1, #1
     ed0:	eb000638 	bl	27b8 <LCD_text>
        LCD_text("Byte3=49",2);
     ed4:	e3060088 	movw	r0, #24712	; 0x6088
     ed8:	e3400000 	movt	r0, #0
     edc:	e3a01002 	mov	r1, #2
     ee0:	eb000634 	bl	27b8 <LCD_text>
    }
    if(byte1==0x4A)
     ee4:	e307319a 	movw	r3, #29082	; 0x719a
     ee8:	e3403000 	movt	r3, #0
     eec:	e5d33000 	ldrb	r3, [r3]
     ef0:	e353004a 	cmp	r3, #74	; 0x4a
     ef4:	1a00000b 	bne	f28 <__cs3_region_zero_size_ram+0xa10>
    {
        LCD_text("Byte1=4A",0);
     ef8:	e3060094 	movw	r0, #24724	; 0x6094
     efc:	e3400000 	movt	r0, #0
     f00:	e3a01000 	mov	r1, #0
     f04:	eb00062b 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     f08:	e3050c44 	movw	r0, #23620	; 0x5c44
     f0c:	e3400000 	movt	r0, #0
     f10:	e3a01001 	mov	r1, #1
     f14:	eb000627 	bl	27b8 <LCD_text>
        LCD_text("Byte3=4A",2);
     f18:	e30600a0 	movw	r0, #24736	; 0x60a0
     f1c:	e3400000 	movt	r0, #0
     f20:	e3a01002 	mov	r1, #2
     f24:	eb000623 	bl	27b8 <LCD_text>
    }
    if(byte1==0x29)
     f28:	e307319a 	movw	r3, #29082	; 0x719a
     f2c:	e3403000 	movt	r3, #0
     f30:	e5d33000 	ldrb	r3, [r3]
     f34:	e3530029 	cmp	r3, #41	; 0x29
     f38:	1a00000b 	bne	f6c <__cs3_region_zero_size_ram+0xa54>
    {
        LCD_text("Byte1=29",0);
     f3c:	e30600ac 	movw	r0, #24748	; 0x60ac
     f40:	e3400000 	movt	r0, #0
     f44:	e3a01000 	mov	r1, #0
     f48:	eb00061a 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     f4c:	e3050c44 	movw	r0, #23620	; 0x5c44
     f50:	e3400000 	movt	r0, #0
     f54:	e3a01001 	mov	r1, #1
     f58:	eb000616 	bl	27b8 <LCD_text>
        LCD_text("Byte3=29",2);
     f5c:	e30600b8 	movw	r0, #24760	; 0x60b8
     f60:	e3400000 	movt	r0, #0
     f64:	e3a01002 	mov	r1, #2
     f68:	eb000612 	bl	27b8 <LCD_text>
    }
    if(byte1==0x0D)
     f6c:	e307319a 	movw	r3, #29082	; 0x719a
     f70:	e3403000 	movt	r3, #0
     f74:	e5d33000 	ldrb	r3, [r3]
     f78:	e353000d 	cmp	r3, #13
     f7c:	1a00000b 	bne	fb0 <__cs3_region_zero_size_ram+0xa98>
    {
        LCD_text("Byte1=0D",0);
     f80:	e30600c4 	movw	r0, #24772	; 0x60c4
     f84:	e3400000 	movt	r0, #0
     f88:	e3a01000 	mov	r1, #0
     f8c:	eb000609 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     f90:	e3050c44 	movw	r0, #23620	; 0x5c44
     f94:	e3400000 	movt	r0, #0
     f98:	e3a01001 	mov	r1, #1
     f9c:	eb000605 	bl	27b8 <LCD_text>
        LCD_text("Byte3=0D",2);
     fa0:	e30600d0 	movw	r0, #24784	; 0x60d0
     fa4:	e3400000 	movt	r0, #0
     fa8:	e3a01002 	mov	r1, #2
     fac:	eb000601 	bl	27b8 <LCD_text>
    }
    if(byte1==0x4C)
     fb0:	e307319a 	movw	r3, #29082	; 0x719a
     fb4:	e3403000 	movt	r3, #0
     fb8:	e5d33000 	ldrb	r3, [r3]
     fbc:	e353004c 	cmp	r3, #76	; 0x4c
     fc0:	1a00000b 	bne	ff4 <__cs3_region_zero_size_ram+0xadc>
    {
        LCD_text("Byte1=4C",0);
     fc4:	e30600dc 	movw	r0, #24796	; 0x60dc
     fc8:	e3400000 	movt	r0, #0
     fcc:	e3a01000 	mov	r1, #0
     fd0:	eb0005f8 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
     fd4:	e3050c44 	movw	r0, #23620	; 0x5c44
     fd8:	e3400000 	movt	r0, #0
     fdc:	e3a01001 	mov	r1, #1
     fe0:	eb0005f4 	bl	27b8 <LCD_text>
        LCD_text("Byte3=4C",2);
     fe4:	e30600e8 	movw	r0, #24808	; 0x60e8
     fe8:	e3400000 	movt	r0, #0
     fec:	e3a01002 	mov	r1, #2
     ff0:	eb0005f0 	bl	27b8 <LCD_text>
    }if(byte1==0x52)
     ff4:	e307319a 	movw	r3, #29082	; 0x719a
     ff8:	e3403000 	movt	r3, #0
     ffc:	e5d33000 	ldrb	r3, [r3]
    1000:	e3530052 	cmp	r3, #82	; 0x52
    1004:	1a00000b 	bne	1038 <__cs3_region_zero_size_ram+0xb20>
    {
        LCD_text("Byte1=52",0);
    1008:	e30600f4 	movw	r0, #24820	; 0x60f4
    100c:	e3400000 	movt	r0, #0
    1010:	e3a01000 	mov	r1, #0
    1014:	eb0005e7 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1018:	e3050c44 	movw	r0, #23620	; 0x5c44
    101c:	e3400000 	movt	r0, #0
    1020:	e3a01001 	mov	r1, #1
    1024:	eb0005e3 	bl	27b8 <LCD_text>
        LCD_text("Byte3=52",2);
    1028:	e3060100 	movw	r0, #24832	; 0x6100
    102c:	e3400000 	movt	r0, #0
    1030:	e3a01002 	mov	r1, #2
    1034:	eb0005df 	bl	27b8 <LCD_text>
    }if(byte1==0x5D)
    1038:	e307319a 	movw	r3, #29082	; 0x719a
    103c:	e3403000 	movt	r3, #0
    1040:	e5d33000 	ldrb	r3, [r3]
    1044:	e353005d 	cmp	r3, #93	; 0x5d
    1048:	1a00000b 	bne	107c <__cs3_region_zero_size_ram+0xb64>
    {
        LCD_text("Byte1=5D",0);
    104c:	e306010c 	movw	r0, #24844	; 0x610c
    1050:	e3400000 	movt	r0, #0
    1054:	e3a01000 	mov	r1, #0
    1058:	eb0005d6 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    105c:	e3050c44 	movw	r0, #23620	; 0x5c44
    1060:	e3400000 	movt	r0, #0
    1064:	e3a01001 	mov	r1, #1
    1068:	eb0005d2 	bl	27b8 <LCD_text>
        LCD_text("Byte3=5D",2);
    106c:	e3060118 	movw	r0, #24856	; 0x6118
    1070:	e3400000 	movt	r0, #0
    1074:	e3a01002 	mov	r1, #2
    1078:	eb0005ce 	bl	27b8 <LCD_text>
    }
    if(byte1==0x12)
    107c:	e307319a 	movw	r3, #29082	; 0x719a
    1080:	e3403000 	movt	r3, #0
    1084:	e5d33000 	ldrb	r3, [r3]
    1088:	e3530012 	cmp	r3, #18
    108c:	1a00000b 	bne	10c0 <__cs3_region_zero_size_ram+0xba8>
    {
        LCD_text("Byte1=12",0);
    1090:	e3060124 	movw	r0, #24868	; 0x6124
    1094:	e3400000 	movt	r0, #0
    1098:	e3a01000 	mov	r1, #0
    109c:	eb0005c5 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    10a0:	e3050c44 	movw	r0, #23620	; 0x5c44
    10a4:	e3400000 	movt	r0, #0
    10a8:	e3a01001 	mov	r1, #1
    10ac:	eb0005c1 	bl	27b8 <LCD_text>
        LCD_text("Byte3=12",2);
    10b0:	e3060130 	movw	r0, #24880	; 0x6130
    10b4:	e3400000 	movt	r0, #0
    10b8:	e3a01002 	mov	r1, #2
    10bc:	eb0005bd 	bl	27b8 <LCD_text>
    }
    if(byte1==0x61)
    10c0:	e307319a 	movw	r3, #29082	; 0x719a
    10c4:	e3403000 	movt	r3, #0
    10c8:	e5d33000 	ldrb	r3, [r3]
    10cc:	e3530061 	cmp	r3, #97	; 0x61
    10d0:	1a00000b 	bne	1104 <__cs3_region_zero_size_ram+0xbec>
    {
        LCD_text("Byte1=61",0);
    10d4:	e306013c 	movw	r0, #24892	; 0x613c
    10d8:	e3400000 	movt	r0, #0
    10dc:	e3a01000 	mov	r1, #0
    10e0:	eb0005b4 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    10e4:	e3050c44 	movw	r0, #23620	; 0x5c44
    10e8:	e3400000 	movt	r0, #0
    10ec:	e3a01001 	mov	r1, #1
    10f0:	eb0005b0 	bl	27b8 <LCD_text>
        LCD_text("Byte3=61",2);
    10f4:	e3060148 	movw	r0, #24904	; 0x6148
    10f8:	e3400000 	movt	r0, #0
    10fc:	e3a01002 	mov	r1, #2
    1100:	eb0005ac 	bl	27b8 <LCD_text>
    }
    if(byte1==0x29)
    1104:	e307319a 	movw	r3, #29082	; 0x719a
    1108:	e3403000 	movt	r3, #0
    110c:	e5d33000 	ldrb	r3, [r3]
    1110:	e3530029 	cmp	r3, #41	; 0x29
    1114:	1a00000b 	bne	1148 <__cs3_region_zero_size_ram+0xc30>
    {
        LCD_text("Byte1=29",0);
    1118:	e30600ac 	movw	r0, #24748	; 0x60ac
    111c:	e3400000 	movt	r0, #0
    1120:	e3a01000 	mov	r1, #0
    1124:	eb0005a3 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1128:	e3050c44 	movw	r0, #23620	; 0x5c44
    112c:	e3400000 	movt	r0, #0
    1130:	e3a01001 	mov	r1, #1
    1134:	eb00059f 	bl	27b8 <LCD_text>
        LCD_text("Byte3=29",2);
    1138:	e30600b8 	movw	r0, #24760	; 0x60b8
    113c:	e3400000 	movt	r0, #0
    1140:	e3a01002 	mov	r1, #2
    1144:	eb00059b 	bl	27b8 <LCD_text>
    }
    if(byte1==0x59)
    1148:	e307319a 	movw	r3, #29082	; 0x719a
    114c:	e3403000 	movt	r3, #0
    1150:	e5d33000 	ldrb	r3, [r3]
    1154:	e3530059 	cmp	r3, #89	; 0x59
    1158:	1a00000b 	bne	118c <__cs3_region_zero_size_ram+0xc74>
    {
        LCD_text("Byte1=59",0);
    115c:	e3060154 	movw	r0, #24916	; 0x6154
    1160:	e3400000 	movt	r0, #0
    1164:	e3a01000 	mov	r1, #0
    1168:	eb000592 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    116c:	e3050c44 	movw	r0, #23620	; 0x5c44
    1170:	e3400000 	movt	r0, #0
    1174:	e3a01001 	mov	r1, #1
    1178:	eb00058e 	bl	27b8 <LCD_text>
        LCD_text("Byte3=59",2);
    117c:	e3060160 	movw	r0, #24928	; 0x6160
    1180:	e3400000 	movt	r0, #0
    1184:	e3a01002 	mov	r1, #2
    1188:	eb00058a 	bl	27b8 <LCD_text>
    }
    if(byte1==0x14)
    118c:	e307319a 	movw	r3, #29082	; 0x719a
    1190:	e3403000 	movt	r3, #0
    1194:	e5d33000 	ldrb	r3, [r3]
    1198:	e3530014 	cmp	r3, #20
    119c:	1a00000b 	bne	11d0 <__cs3_region_zero_size_ram+0xcb8>
    {
        LCD_text("Byte1=14",0);
    11a0:	e306016c 	movw	r0, #24940	; 0x616c
    11a4:	e3400000 	movt	r0, #0
    11a8:	e3a01000 	mov	r1, #0
    11ac:	eb000581 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    11b0:	e3050c44 	movw	r0, #23620	; 0x5c44
    11b4:	e3400000 	movt	r0, #0
    11b8:	e3a01001 	mov	r1, #1
    11bc:	eb00057d 	bl	27b8 <LCD_text>
        LCD_text("Byte3=14",2);
    11c0:	e3060178 	movw	r0, #24952	; 0x6178
    11c4:	e3400000 	movt	r0, #0
    11c8:	e3a01002 	mov	r1, #2
    11cc:	eb000579 	bl	27b8 <LCD_text>
    }
    if(byte1==0x11)
    11d0:	e307319a 	movw	r3, #29082	; 0x719a
    11d4:	e3403000 	movt	r3, #0
    11d8:	e5d33000 	ldrb	r3, [r3]
    11dc:	e3530011 	cmp	r3, #17
    11e0:	1a00000b 	bne	1214 <__cs3_region_zero_size_ram+0xcfc>
    {
        LCD_text("Byte1=11",0);
    11e4:	e3060184 	movw	r0, #24964	; 0x6184
    11e8:	e3400000 	movt	r0, #0
    11ec:	e3a01000 	mov	r1, #0
    11f0:	eb000570 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    11f4:	e3050c44 	movw	r0, #23620	; 0x5c44
    11f8:	e3400000 	movt	r0, #0
    11fc:	e3a01001 	mov	r1, #1
    1200:	eb00056c 	bl	27b8 <LCD_text>
        LCD_text("Byte3=11",2);
    1204:	e3060190 	movw	r0, #24976	; 0x6190
    1208:	e3400000 	movt	r0, #0
    120c:	e3a01002 	mov	r1, #2
    1210:	eb000568 	bl	27b8 <LCD_text>
    }
    if(byte1==0x11)
    1214:	e307319a 	movw	r3, #29082	; 0x719a
    1218:	e3403000 	movt	r3, #0
    121c:	e5d33000 	ldrb	r3, [r3]
    1220:	e3530011 	cmp	r3, #17
    1224:	1a00000b 	bne	1258 <__cs3_region_zero_size_ram+0xd40>
    {
        LCD_text("Byte1=11",0);
    1228:	e3060184 	movw	r0, #24964	; 0x6184
    122c:	e3400000 	movt	r0, #0
    1230:	e3a01000 	mov	r1, #0
    1234:	eb00055f 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1238:	e3050c44 	movw	r0, #23620	; 0x5c44
    123c:	e3400000 	movt	r0, #0
    1240:	e3a01001 	mov	r1, #1
    1244:	eb00055b 	bl	27b8 <LCD_text>
        LCD_text("Byte3=11",2);
    1248:	e3060190 	movw	r0, #24976	; 0x6190
    124c:	e3400000 	movt	r0, #0
    1250:	e3a01002 	mov	r1, #2
    1254:	eb000557 	bl	27b8 <LCD_text>
    }
    if(byte1==0x76)
    1258:	e307319a 	movw	r3, #29082	; 0x719a
    125c:	e3403000 	movt	r3, #0
    1260:	e5d33000 	ldrb	r3, [r3]
    1264:	e3530076 	cmp	r3, #118	; 0x76
    1268:	1a00000b 	bne	129c <__cs3_region_zero_size_ram+0xd84>
    {
        LCD_text("Byte1=76",0);
    126c:	e306019c 	movw	r0, #24988	; 0x619c
    1270:	e3400000 	movt	r0, #0
    1274:	e3a01000 	mov	r1, #0
    1278:	eb00054e 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    127c:	e3050c44 	movw	r0, #23620	; 0x5c44
    1280:	e3400000 	movt	r0, #0
    1284:	e3a01001 	mov	r1, #1
    1288:	eb00054a 	bl	27b8 <LCD_text>
        LCD_text("Byte3=76",2);
    128c:	e30601a8 	movw	r0, #25000	; 0x61a8
    1290:	e3400000 	movt	r0, #0
    1294:	e3a01002 	mov	r1, #2
    1298:	eb000546 	bl	27b8 <LCD_text>
    }
    if(byte1==0x05)
    129c:	e307319a 	movw	r3, #29082	; 0x719a
    12a0:	e3403000 	movt	r3, #0
    12a4:	e5d33000 	ldrb	r3, [r3]
    12a8:	e3530005 	cmp	r3, #5
    12ac:	1a00000b 	bne	12e0 <__cs3_region_zero_size_ram+0xdc8>
    {
        LCD_text("Byte1=05",0);
    12b0:	e30601b4 	movw	r0, #25012	; 0x61b4
    12b4:	e3400000 	movt	r0, #0
    12b8:	e3a01000 	mov	r1, #0
    12bc:	eb00053d 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    12c0:	e3050c44 	movw	r0, #23620	; 0x5c44
    12c4:	e3400000 	movt	r0, #0
    12c8:	e3a01001 	mov	r1, #1
    12cc:	eb000539 	bl	27b8 <LCD_text>
        LCD_text("Byte3=05",2);
    12d0:	e30601c0 	movw	r0, #25024	; 0x61c0
    12d4:	e3400000 	movt	r0, #0
    12d8:	e3a01002 	mov	r1, #2
    12dc:	eb000535 	bl	27b8 <LCD_text>
    }
    if(byte1==0x06)
    12e0:	e307319a 	movw	r3, #29082	; 0x719a
    12e4:	e3403000 	movt	r3, #0
    12e8:	e5d33000 	ldrb	r3, [r3]
    12ec:	e3530006 	cmp	r3, #6
    12f0:	1a00000b 	bne	1324 <__cs3_region_zero_size_ram+0xe0c>
    {
        LCD_text("Byte1=06",0);
    12f4:	e30601cc 	movw	r0, #25036	; 0x61cc
    12f8:	e3400000 	movt	r0, #0
    12fc:	e3a01000 	mov	r1, #0
    1300:	eb00052c 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1304:	e3050c44 	movw	r0, #23620	; 0x5c44
    1308:	e3400000 	movt	r0, #0
    130c:	e3a01001 	mov	r1, #1
    1310:	eb000528 	bl	27b8 <LCD_text>
        LCD_text("Byte3=06",2);
    1314:	e30601d8 	movw	r0, #25048	; 0x61d8
    1318:	e3400000 	movt	r0, #0
    131c:	e3a01002 	mov	r1, #2
    1320:	eb000524 	bl	27b8 <LCD_text>
    }
    if(byte1==0x05)
    1324:	e307319a 	movw	r3, #29082	; 0x719a
    1328:	e3403000 	movt	r3, #0
    132c:	e5d33000 	ldrb	r3, [r3]
    1330:	e3530005 	cmp	r3, #5
    1334:	1a00000b 	bne	1368 <__cs3_region_zero_size_ram+0xe50>
    {
        LCD_text("Byte1=05",0);
    1338:	e30601b4 	movw	r0, #25012	; 0x61b4
    133c:	e3400000 	movt	r0, #0
    1340:	e3a01000 	mov	r1, #0
    1344:	eb00051b 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1348:	e3050c44 	movw	r0, #23620	; 0x5c44
    134c:	e3400000 	movt	r0, #0
    1350:	e3a01001 	mov	r1, #1
    1354:	eb000517 	bl	27b8 <LCD_text>
        LCD_text("Byte3=05",2);
    1358:	e30601c0 	movw	r0, #25024	; 0x61c0
    135c:	e3400000 	movt	r0, #0
    1360:	e3a01002 	mov	r1, #2
    1364:	eb000513 	bl	27b8 <LCD_text>
    }
    if(byte1==0x04)
    1368:	e307319a 	movw	r3, #29082	; 0x719a
    136c:	e3403000 	movt	r3, #0
    1370:	e5d33000 	ldrb	r3, [r3]
    1374:	e3530004 	cmp	r3, #4
    1378:	1a00000b 	bne	13ac <__cs3_region_zero_size_ram+0xe94>
    {
        LCD_text("Byte1=04",0);
    137c:	e30601e4 	movw	r0, #25060	; 0x61e4
    1380:	e3400000 	movt	r0, #0
    1384:	e3a01000 	mov	r1, #0
    1388:	eb00050a 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    138c:	e3050c44 	movw	r0, #23620	; 0x5c44
    1390:	e3400000 	movt	r0, #0
    1394:	e3a01001 	mov	r1, #1
    1398:	eb000506 	bl	27b8 <LCD_text>
        LCD_text("Byte3=04",2);
    139c:	e30601f0 	movw	r0, #25072	; 0x61f0
    13a0:	e3400000 	movt	r0, #0
    13a4:	e3a01002 	mov	r1, #2
    13a8:	eb000502 	bl	27b8 <LCD_text>
    }
    if(byte1==0x0C)
    13ac:	e307319a 	movw	r3, #29082	; 0x719a
    13b0:	e3403000 	movt	r3, #0
    13b4:	e5d33000 	ldrb	r3, [r3]
    13b8:	e353000c 	cmp	r3, #12
    13bc:	1a00000b 	bne	13f0 <__cs3_region_zero_size_ram+0xed8>
    {
        LCD_text("Byte1=0C",0);
    13c0:	e30601fc 	movw	r0, #25084	; 0x61fc
    13c4:	e3400000 	movt	r0, #0
    13c8:	e3a01000 	mov	r1, #0
    13cc:	eb0004f9 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    13d0:	e3050c44 	movw	r0, #23620	; 0x5c44
    13d4:	e3400000 	movt	r0, #0
    13d8:	e3a01001 	mov	r1, #1
    13dc:	eb0004f5 	bl	27b8 <LCD_text>
        LCD_text("Byte3=0C",2);
    13e0:	e3060208 	movw	r0, #25096	; 0x6208
    13e4:	e3400000 	movt	r0, #0
    13e8:	e3a01002 	mov	r1, #2
    13ec:	eb0004f1 	bl	27b8 <LCD_text>
    }
    if(byte1==0x03)
    13f0:	e307319a 	movw	r3, #29082	; 0x719a
    13f4:	e3403000 	movt	r3, #0
    13f8:	e5d33000 	ldrb	r3, [r3]
    13fc:	e3530003 	cmp	r3, #3
    1400:	1a00000b 	bne	1434 <__cs3_region_zero_size_ram+0xf1c>
    {
        LCD_text("Byte1=03",0);
    1404:	e3060214 	movw	r0, #25108	; 0x6214
    1408:	e3400000 	movt	r0, #0
    140c:	e3a01000 	mov	r1, #0
    1410:	eb0004e8 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1414:	e3050c44 	movw	r0, #23620	; 0x5c44
    1418:	e3400000 	movt	r0, #0
    141c:	e3a01001 	mov	r1, #1
    1420:	eb0004e4 	bl	27b8 <LCD_text>
        LCD_text("Byte3=03",2);
    1424:	e3060220 	movw	r0, #25120	; 0x6220
    1428:	e3400000 	movt	r0, #0
    142c:	e3a01002 	mov	r1, #2
    1430:	eb0004e0 	bl	27b8 <LCD_text>
    }
    if(byte1==0x0B)
    1434:	e307319a 	movw	r3, #29082	; 0x719a
    1438:	e3403000 	movt	r3, #0
    143c:	e5d33000 	ldrb	r3, [r3]
    1440:	e353000b 	cmp	r3, #11
    1444:	1a00000b 	bne	1478 <__cs3_region_zero_size_ram+0xf60>
    {
        LCD_text("Byte1=0B",0);
    1448:	e306022c 	movw	r0, #25132	; 0x622c
    144c:	e3400000 	movt	r0, #0
    1450:	e3a01000 	mov	r1, #0
    1454:	eb0004d7 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1458:	e3050c44 	movw	r0, #23620	; 0x5c44
    145c:	e3400000 	movt	r0, #0
    1460:	e3a01001 	mov	r1, #1
    1464:	eb0004d3 	bl	27b8 <LCD_text>
        LCD_text("Byte3=0B",2);
    1468:	e3060238 	movw	r0, #25144	; 0x6238
    146c:	e3400000 	movt	r0, #0
    1470:	e3a01002 	mov	r1, #2
    1474:	eb0004cf 	bl	27b8 <LCD_text>
    }
    if(byte1==0x83)
    1478:	e307319a 	movw	r3, #29082	; 0x719a
    147c:	e3403000 	movt	r3, #0
    1480:	e5d33000 	ldrb	r3, [r3]
    1484:	e3530083 	cmp	r3, #131	; 0x83
    1488:	1a00000b 	bne	14bc <__cs3_region_zero_size_ram+0xfa4>
    {
        LCD_text("Byte1=83",0);
    148c:	e3060244 	movw	r0, #25156	; 0x6244
    1490:	e3400000 	movt	r0, #0
    1494:	e3a01000 	mov	r1, #0
    1498:	eb0004c6 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    149c:	e3050c44 	movw	r0, #23620	; 0x5c44
    14a0:	e3400000 	movt	r0, #0
    14a4:	e3a01001 	mov	r1, #1
    14a8:	eb0004c2 	bl	27b8 <LCD_text>
        LCD_text("Byte3=83",2);
    14ac:	e3060250 	movw	r0, #25168	; 0x6250
    14b0:	e3400000 	movt	r0, #0
    14b4:	e3a01002 	mov	r1, #2
    14b8:	eb0004be 	bl	27b8 <LCD_text>
    }
    if(byte1==0x0A)
    14bc:	e307319a 	movw	r3, #29082	; 0x719a
    14c0:	e3403000 	movt	r3, #0
    14c4:	e5d33000 	ldrb	r3, [r3]
    14c8:	e353000a 	cmp	r3, #10
    14cc:	1a00000b 	bne	1500 <__cs3_region_zero_size_ram+0xfe8>
    {
        LCD_text("Byte1=0A",0);
    14d0:	e306025c 	movw	r0, #25180	; 0x625c
    14d4:	e3400000 	movt	r0, #0
    14d8:	e3a01000 	mov	r1, #0
    14dc:	eb0004b5 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    14e0:	e3050c44 	movw	r0, #23620	; 0x5c44
    14e4:	e3400000 	movt	r0, #0
    14e8:	e3a01001 	mov	r1, #1
    14ec:	eb0004b1 	bl	27b8 <LCD_text>
        LCD_text("Byte3=0A",2);
    14f0:	e3060268 	movw	r0, #25192	; 0x6268
    14f4:	e3400000 	movt	r0, #0
    14f8:	e3a01002 	mov	r1, #2
    14fc:	eb0004ad 	bl	27b8 <LCD_text>
    }
    if(byte1==0x01)
    1500:	e307319a 	movw	r3, #29082	; 0x719a
    1504:	e3403000 	movt	r3, #0
    1508:	e5d33000 	ldrb	r3, [r3]
    150c:	e3530001 	cmp	r3, #1
    1510:	1a00000b 	bne	1544 <__cs3_region_zero_size_ram+0x102c>
    {
        LCD_text("Byte1=01",0);
    1514:	e3060274 	movw	r0, #25204	; 0x6274
    1518:	e3400000 	movt	r0, #0
    151c:	e3a01000 	mov	r1, #0
    1520:	eb0004a4 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1524:	e3050c44 	movw	r0, #23620	; 0x5c44
    1528:	e3400000 	movt	r0, #0
    152c:	e3a01001 	mov	r1, #1
    1530:	eb0004a0 	bl	27b8 <LCD_text>
        LCD_text("Byte3=01",2);
    1534:	e3060280 	movw	r0, #25216	; 0x6280
    1538:	e3400000 	movt	r0, #0
    153c:	e3a01002 	mov	r1, #2
    1540:	eb00049c 	bl	27b8 <LCD_text>
    }
    if(byte1==0x09)
    1544:	e307319a 	movw	r3, #29082	; 0x719a
    1548:	e3403000 	movt	r3, #0
    154c:	e5d33000 	ldrb	r3, [r3]
    1550:	e3530009 	cmp	r3, #9
    1554:	1a00000b 	bne	1588 <__cs3_region_zero_size_ram+0x1070>
    {
        LCD_text("Byte1=09",0);
    1558:	e306028c 	movw	r0, #25228	; 0x628c
    155c:	e3400000 	movt	r0, #0
    1560:	e3a01000 	mov	r1, #0
    1564:	eb000493 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1568:	e3050c44 	movw	r0, #23620	; 0x5c44
    156c:	e3400000 	movt	r0, #0
    1570:	e3a01001 	mov	r1, #1
    1574:	eb00048f 	bl	27b8 <LCD_text>
        LCD_text("Byte3=09",2);
    1578:	e3060298 	movw	r0, #25240	; 0x6298
    157c:	e3400000 	movt	r0, #0
    1580:	e3a01002 	mov	r1, #2
    1584:	eb00048b 	bl	27b8 <LCD_text>
    }
    if(byte1==0x78)
    1588:	e307319a 	movw	r3, #29082	; 0x719a
    158c:	e3403000 	movt	r3, #0
    1590:	e5d33000 	ldrb	r3, [r3]
    1594:	e3530078 	cmp	r3, #120	; 0x78
    1598:	1a00000b 	bne	15cc <__cs3_region_zero_size_ram+0x10b4>
    {
        LCD_text("Byte1=78",0);
    159c:	e30602a4 	movw	r0, #25252	; 0x62a4
    15a0:	e3400000 	movt	r0, #0
    15a4:	e3a01000 	mov	r1, #0
    15a8:	eb000482 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    15ac:	e3050c44 	movw	r0, #23620	; 0x5c44
    15b0:	e3400000 	movt	r0, #0
    15b4:	e3a01001 	mov	r1, #1
    15b8:	eb00047e 	bl	27b8 <LCD_text>
        LCD_text("Byte3=78",2);
    15bc:	e30602b0 	movw	r0, #25264	; 0x62b0
    15c0:	e3400000 	movt	r0, #0
    15c4:	e3a01002 	mov	r1, #2
    15c8:	eb00047a 	bl	27b8 <LCD_text>
    }
    if(byte1==0x07)
    15cc:	e307319a 	movw	r3, #29082	; 0x719a
    15d0:	e3403000 	movt	r3, #0
    15d4:	e5d33000 	ldrb	r3, [r3]
    15d8:	e3530007 	cmp	r3, #7
    15dc:	1a00000b 	bne	1610 <__cs3_region_zero_size_ram+0x10f8>
    {
        LCD_text("Byte1=07",0);
    15e0:	e30602bc 	movw	r0, #25276	; 0x62bc
    15e4:	e3400000 	movt	r0, #0
    15e8:	e3a01000 	mov	r1, #0
    15ec:	eb000471 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    15f0:	e3050c44 	movw	r0, #23620	; 0x5c44
    15f4:	e3400000 	movt	r0, #0
    15f8:	e3a01001 	mov	r1, #1
    15fc:	eb00046d 	bl	27b8 <LCD_text>
        LCD_text("Byte3=07",2);
    1600:	e30602c8 	movw	r0, #25288	; 0x62c8
    1604:	e3400000 	movt	r0, #0
    1608:	e3a01002 	mov	r1, #2
    160c:	eb000469 	bl	27b8 <LCD_text>
    }
    if(byte1==0x7E)
    1610:	e307319a 	movw	r3, #29082	; 0x719a
    1614:	e3403000 	movt	r3, #0
    1618:	e5d33000 	ldrb	r3, [r3]
    161c:	e353007e 	cmp	r3, #126	; 0x7e
    1620:	1a00000b 	bne	1654 <__cs3_region_zero_size_ram+0x113c>
    {
        LCD_text("Byte1=7E",0);
    1624:	e30602d4 	movw	r0, #25300	; 0x62d4
    1628:	e3400000 	movt	r0, #0
    162c:	e3a01000 	mov	r1, #0
    1630:	eb000460 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1634:	e3050c44 	movw	r0, #23620	; 0x5c44
    1638:	e3400000 	movt	r0, #0
    163c:	e3a01001 	mov	r1, #1
    1640:	eb00045c 	bl	27b8 <LCD_text>
        LCD_text("Byte3=7E",2);
    1644:	e30602e0 	movw	r0, #25312	; 0x62e0
    1648:	e3400000 	movt	r0, #0
    164c:	e3a01002 	mov	r1, #2
    1650:	eb000458 	bl	27b8 <LCD_text>
    }
    if(byte1==0x77)
    1654:	e307319a 	movw	r3, #29082	; 0x719a
    1658:	e3403000 	movt	r3, #0
    165c:	e5d33000 	ldrb	r3, [r3]
    1660:	e3530077 	cmp	r3, #119	; 0x77
    1664:	1a00000b 	bne	1698 <__cs3_region_zero_size_ram+0x1180>
    {
        LCD_text("Byte1=77",0);
    1668:	e30602ec 	movw	r0, #25324	; 0x62ec
    166c:	e3400000 	movt	r0, #0
    1670:	e3a01000 	mov	r1, #0
    1674:	eb00044f 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1678:	e3050c44 	movw	r0, #23620	; 0x5c44
    167c:	e3400000 	movt	r0, #0
    1680:	e3a01001 	mov	r1, #1
    1684:	eb00044b 	bl	27b8 <LCD_text>
        LCD_text("Byte3=77",2);
    1688:	e30602f8 	movw	r0, #25336	; 0x62f8
    168c:	e3400000 	movt	r0, #0
    1690:	e3a01002 	mov	r1, #2
    1694:	eb000447 	bl	27b8 <LCD_text>
    }
    if(byte1==0x7C)
    1698:	e307319a 	movw	r3, #29082	; 0x719a
    169c:	e3403000 	movt	r3, #0
    16a0:	e5d33000 	ldrb	r3, [r3]
    16a4:	e353007c 	cmp	r3, #124	; 0x7c
    16a8:	1a00000b 	bne	16dc <__cs3_region_zero_size_ram+0x11c4>
    {
        LCD_text("Byte1=7C",0);
    16ac:	e3060304 	movw	r0, #25348	; 0x6304
    16b0:	e3400000 	movt	r0, #0
    16b4:	e3a01000 	mov	r1, #0
    16b8:	eb00043e 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    16bc:	e3050c44 	movw	r0, #23620	; 0x5c44
    16c0:	e3400000 	movt	r0, #0
    16c4:	e3a01001 	mov	r1, #1
    16c8:	eb00043a 	bl	27b8 <LCD_text>
        LCD_text("Byte3=7C",2);
    16cc:	e3060310 	movw	r0, #25360	; 0x6310
    16d0:	e3400000 	movt	r0, #0
    16d4:	e3a01002 	mov	r1, #2
    16d8:	eb000436 	bl	27b8 <LCD_text>
    }
    if(byte1==0x7B)
    16dc:	e307319a 	movw	r3, #29082	; 0x719a
    16e0:	e3403000 	movt	r3, #0
    16e4:	e5d33000 	ldrb	r3, [r3]
    16e8:	e353007b 	cmp	r3, #123	; 0x7b
    16ec:	1a00000b 	bne	1720 <__cs3_region_zero_size_ram+0x1208>
    {
        LCD_text("Byte1=7B",0);
    16f0:	e306031c 	movw	r0, #25372	; 0x631c
    16f4:	e3400000 	movt	r0, #0
    16f8:	e3a01000 	mov	r1, #0
    16fc:	eb00042d 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1700:	e3050c44 	movw	r0, #23620	; 0x5c44
    1704:	e3400000 	movt	r0, #0
    1708:	e3a01001 	mov	r1, #1
    170c:	eb000429 	bl	27b8 <LCD_text>
        LCD_text("Byte3=7B",2);
    1710:	e3060328 	movw	r0, #25384	; 0x6328
    1714:	e3400000 	movt	r0, #0
    1718:	e3a01002 	mov	r1, #2
    171c:	eb000425 	bl	27b8 <LCD_text>
    }
    if(byte1==0x6C)
    1720:	e307319a 	movw	r3, #29082	; 0x719a
    1724:	e3403000 	movt	r3, #0
    1728:	e5d33000 	ldrb	r3, [r3]
    172c:	e353006c 	cmp	r3, #108	; 0x6c
    1730:	1a00000b 	bne	1764 <__cs3_region_zero_size_ram+0x124c>
    {
        LCD_text("Byte1=6C",0);
    1734:	e3060334 	movw	r0, #25396	; 0x6334
    1738:	e3400000 	movt	r0, #0
    173c:	e3a01000 	mov	r1, #0
    1740:	eb00041c 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1744:	e3050c44 	movw	r0, #23620	; 0x5c44
    1748:	e3400000 	movt	r0, #0
    174c:	e3a01001 	mov	r1, #1
    1750:	eb000418 	bl	27b8 <LCD_text>
        LCD_text("Byte3=6C",2);
    1754:	e3060340 	movw	r0, #25408	; 0x6340
    1758:	e3400000 	movt	r0, #0
    175c:	e3a01002 	mov	r1, #2
    1760:	eb000414 	bl	27b8 <LCD_text>
    }
    if(byte1==0x75)
    1764:	e307319a 	movw	r3, #29082	; 0x719a
    1768:	e3403000 	movt	r3, #0
    176c:	e5d33000 	ldrb	r3, [r3]
    1770:	e3530075 	cmp	r3, #117	; 0x75
    1774:	1a00000b 	bne	17a8 <__cs3_region_zero_size_ram+0x1290>
    {
        LCD_text("Byte1=75",0);
    1778:	e306034c 	movw	r0, #25420	; 0x634c
    177c:	e3400000 	movt	r0, #0
    1780:	e3a01000 	mov	r1, #0
    1784:	eb00040b 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1788:	e3050c44 	movw	r0, #23620	; 0x5c44
    178c:	e3400000 	movt	r0, #0
    1790:	e3a01001 	mov	r1, #1
    1794:	eb000407 	bl	27b8 <LCD_text>
        LCD_text("Byte3=75",2);
    1798:	e3060358 	movw	r0, #25432	; 0x6358
    179c:	e3400000 	movt	r0, #0
    17a0:	e3a01002 	mov	r1, #2
    17a4:	eb000403 	bl	27b8 <LCD_text>
    }
    if(byte1==0x7D)
    17a8:	e307319a 	movw	r3, #29082	; 0x719a
    17ac:	e3403000 	movt	r3, #0
    17b0:	e5d33000 	ldrb	r3, [r3]
    17b4:	e353007d 	cmp	r3, #125	; 0x7d
    17b8:	1a00000b 	bne	17ec <__cs3_region_zero_size_ram+0x12d4>
    {
        LCD_text("Byte1=7D",0);
    17bc:	e3060364 	movw	r0, #25444	; 0x6364
    17c0:	e3400000 	movt	r0, #0
    17c4:	e3a01000 	mov	r1, #0
    17c8:	eb0003fa 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    17cc:	e3050c44 	movw	r0, #23620	; 0x5c44
    17d0:	e3400000 	movt	r0, #0
    17d4:	e3a01001 	mov	r1, #1
    17d8:	eb0003f6 	bl	27b8 <LCD_text>
        LCD_text("Byte3=7D",2);
    17dc:	e3060370 	movw	r0, #25456	; 0x6370
    17e0:	e3400000 	movt	r0, #0
    17e4:	e3a01002 	mov	r1, #2
    17e8:	eb0003f2 	bl	27b8 <LCD_text>
    }
    if(byte1==0x6B)
    17ec:	e307319a 	movw	r3, #29082	; 0x719a
    17f0:	e3403000 	movt	r3, #0
    17f4:	e5d33000 	ldrb	r3, [r3]
    17f8:	e353006b 	cmp	r3, #107	; 0x6b
    17fc:	1a00000b 	bne	1830 <__cs3_region_zero_size_ram+0x1318>
    {
        LCD_text("Byte1=6B",0);
    1800:	e306037c 	movw	r0, #25468	; 0x637c
    1804:	e3400000 	movt	r0, #0
    1808:	e3a01000 	mov	r1, #0
    180c:	eb0003e9 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1810:	e3050c44 	movw	r0, #23620	; 0x5c44
    1814:	e3400000 	movt	r0, #0
    1818:	e3a01001 	mov	r1, #1
    181c:	eb0003e5 	bl	27b8 <LCD_text>
        LCD_text("Byte3=6B",2);
    1820:	e3060388 	movw	r0, #25480	; 0x6388
    1824:	e3400000 	movt	r0, #0
    1828:	e3a01002 	mov	r1, #2
    182c:	eb0003e1 	bl	27b8 <LCD_text>
    }
    if(byte1==0x73)
    1830:	e307319a 	movw	r3, #29082	; 0x719a
    1834:	e3403000 	movt	r3, #0
    1838:	e5d33000 	ldrb	r3, [r3]
    183c:	e3530073 	cmp	r3, #115	; 0x73
    1840:	1a00000b 	bne	1874 <__cs3_region_zero_size_ram+0x135c>
    {
        LCD_text("Byte1=73",0);
    1844:	e3060394 	movw	r0, #25492	; 0x6394
    1848:	e3400000 	movt	r0, #0
    184c:	e3a01000 	mov	r1, #0
    1850:	eb0003d8 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1854:	e3050c44 	movw	r0, #23620	; 0x5c44
    1858:	e3400000 	movt	r0, #0
    185c:	e3a01001 	mov	r1, #1
    1860:	eb0003d4 	bl	27b8 <LCD_text>
        LCD_text("Byte3=73",2);
    1864:	e30603a0 	movw	r0, #25504	; 0x63a0
    1868:	e3400000 	movt	r0, #0
    186c:	e3a01002 	mov	r1, #2
    1870:	eb0003d0 	bl	27b8 <LCD_text>
    }
    if(byte1==0x74)
    1874:	e307319a 	movw	r3, #29082	; 0x719a
    1878:	e3403000 	movt	r3, #0
    187c:	e5d33000 	ldrb	r3, [r3]
    1880:	e3530074 	cmp	r3, #116	; 0x74
    1884:	1a00000b 	bne	18b8 <__cs3_region_zero_size_ram+0x13a0>
    {
        LCD_text("Byte1=74",0);
    1888:	e30603ac 	movw	r0, #25516	; 0x63ac
    188c:	e3400000 	movt	r0, #0
    1890:	e3a01000 	mov	r1, #0
    1894:	eb0003c7 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1898:	e3050c44 	movw	r0, #23620	; 0x5c44
    189c:	e3400000 	movt	r0, #0
    18a0:	e3a01001 	mov	r1, #1
    18a4:	eb0003c3 	bl	27b8 <LCD_text>
        LCD_text("Byte3=74",2);
    18a8:	e30603b8 	movw	r0, #25528	; 0x63b8
    18ac:	e3400000 	movt	r0, #0
    18b0:	e3a01002 	mov	r1, #2
    18b4:	eb0003bf 	bl	27b8 <LCD_text>
    }
    if(byte1==0x69)
    18b8:	e307319a 	movw	r3, #29082	; 0x719a
    18bc:	e3403000 	movt	r3, #0
    18c0:	e5d33000 	ldrb	r3, [r3]
    18c4:	e3530069 	cmp	r3, #105	; 0x69
    18c8:	1a00000b 	bne	18fc <__cs3_region_zero_size_ram+0x13e4>
    {
        LCD_text("Byte1=69",0);
    18cc:	e30603c4 	movw	r0, #25540	; 0x63c4
    18d0:	e3400000 	movt	r0, #0
    18d4:	e3a01000 	mov	r1, #0
    18d8:	eb0003b6 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    18dc:	e3050c44 	movw	r0, #23620	; 0x5c44
    18e0:	e3400000 	movt	r0, #0
    18e4:	e3a01001 	mov	r1, #1
    18e8:	eb0003b2 	bl	27b8 <LCD_text>
        LCD_text("Byte3=69",2);
    18ec:	e30603d0 	movw	r0, #25552	; 0x63d0
    18f0:	e3400000 	movt	r0, #0
    18f4:	e3a01002 	mov	r1, #2
    18f8:	eb0003ae 	bl	27b8 <LCD_text>
    }
    if(byte1==0x72)
    18fc:	e307319a 	movw	r3, #29082	; 0x719a
    1900:	e3403000 	movt	r3, #0
    1904:	e5d33000 	ldrb	r3, [r3]
    1908:	e3530072 	cmp	r3, #114	; 0x72
    190c:	1a00000b 	bne	1940 <__cs3_region_zero_size_ram+0x1428>
    {
        LCD_text("Byte1=72",0);
    1910:	e30603dc 	movw	r0, #25564	; 0x63dc
    1914:	e3400000 	movt	r0, #0
    1918:	e3a01000 	mov	r1, #0
    191c:	eb0003a5 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1920:	e3050c44 	movw	r0, #23620	; 0x5c44
    1924:	e3400000 	movt	r0, #0
    1928:	e3a01001 	mov	r1, #1
    192c:	eb0003a1 	bl	27b8 <LCD_text>
        LCD_text("Byte3=72",2);
    1930:	e30603e8 	movw	r0, #25576	; 0x63e8
    1934:	e3400000 	movt	r0, #0
    1938:	e3a01002 	mov	r1, #2
    193c:	eb00039d 	bl	27b8 <LCD_text>
    }
    if(byte1==0x7A)
    1940:	e307319a 	movw	r3, #29082	; 0x719a
    1944:	e3403000 	movt	r3, #0
    1948:	e5d33000 	ldrb	r3, [r3]
    194c:	e353007a 	cmp	r3, #122	; 0x7a
    1950:	1a00000b 	bne	1984 <__cs3_region_zero_size_ram+0x146c>
    {
        LCD_text("Byte1=7A",0);
    1954:	e30603f4 	movw	r0, #25588	; 0x63f4
    1958:	e3400000 	movt	r0, #0
    195c:	e3a01000 	mov	r1, #0
    1960:	eb000394 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1964:	e3050c44 	movw	r0, #23620	; 0x5c44
    1968:	e3400000 	movt	r0, #0
    196c:	e3a01001 	mov	r1, #1
    1970:	eb000390 	bl	27b8 <LCD_text>
        LCD_text("Byte3=7A",2);
    1974:	e3060400 	movw	r0, #25600	; 0x6400
    1978:	e3400000 	movt	r0, #0
    197c:	e3a01002 	mov	r1, #2
    1980:	eb00038c 	bl	27b8 <LCD_text>
    }
    if(byte1==0x70)
    1984:	e307319a 	movw	r3, #29082	; 0x719a
    1988:	e3403000 	movt	r3, #0
    198c:	e5d33000 	ldrb	r3, [r3]
    1990:	e3530070 	cmp	r3, #112	; 0x70
    1994:	1a00000b 	bne	19c8 <__cs3_region_zero_size_ram+0x14b0>
    {
        LCD_text("Byte1=70",0);
    1998:	e306040c 	movw	r0, #25612	; 0x640c
    199c:	e3400000 	movt	r0, #0
    19a0:	e3a01000 	mov	r1, #0
    19a4:	eb000383 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    19a8:	e3050c44 	movw	r0, #23620	; 0x5c44
    19ac:	e3400000 	movt	r0, #0
    19b0:	e3a01001 	mov	r1, #1
    19b4:	eb00037f 	bl	27b8 <LCD_text>
        LCD_text("Byte3=70",2);
    19b8:	e3060418 	movw	r0, #25624	; 0x6418
    19bc:	e3400000 	movt	r0, #0
    19c0:	e3a01002 	mov	r1, #2
    19c4:	eb00037b 	bl	27b8 <LCD_text>
    }
    if(byte1==0x71)
    19c8:	e307319a 	movw	r3, #29082	; 0x719a
    19cc:	e3403000 	movt	r3, #0
    19d0:	e5d33000 	ldrb	r3, [r3]
    19d4:	e3530071 	cmp	r3, #113	; 0x71
    19d8:	1a00000b 	bne	1a0c <__cs3_region_zero_size_ram+0x14f4>
    {
        LCD_text("Byte1=71",0);
    19dc:	e3060424 	movw	r0, #25636	; 0x6424
    19e0:	e3400000 	movt	r0, #0
    19e4:	e3a01000 	mov	r1, #0
    19e8:	eb000372 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    19ec:	e3050c44 	movw	r0, #23620	; 0x5c44
    19f0:	e3400000 	movt	r0, #0
    19f4:	e3a01001 	mov	r1, #1
    19f8:	eb00036e 	bl	27b8 <LCD_text>
        LCD_text("Byte3=71",2);
    19fc:	e3060430 	movw	r0, #25648	; 0x6430
    1a00:	e3400000 	movt	r0, #0
    1a04:	e3a01002 	mov	r1, #2
    1a08:	eb00036a 	bl	27b8 <LCD_text>
    }
    if(byte1==0x79)
    1a0c:	e307319a 	movw	r3, #29082	; 0x719a
    1a10:	e3403000 	movt	r3, #0
    1a14:	e5d33000 	ldrb	r3, [r3]
    1a18:	e3530079 	cmp	r3, #121	; 0x79
    1a1c:	1a00000b 	bne	1a50 <__cs3_region_zero_size_ram+0x1538>
    {
        LCD_text("Byte1=79",0);
    1a20:	e306043c 	movw	r0, #25660	; 0x643c
    1a24:	e3400000 	movt	r0, #0
    1a28:	e3a01000 	mov	r1, #0
    1a2c:	eb000361 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1a30:	e3050c44 	movw	r0, #23620	; 0x5c44
    1a34:	e3400000 	movt	r0, #0
    1a38:	e3a01001 	mov	r1, #1
    1a3c:	eb00035d 	bl	27b8 <LCD_text>
        LCD_text("Byte3=79",2);
    1a40:	e3060448 	movw	r0, #25672	; 0x6448
    1a44:	e3400000 	movt	r0, #0
    1a48:	e3a01002 	mov	r1, #2
    1a4c:	eb000359 	bl	27b8 <LCD_text>
    }
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x5A))
    1a50:	e307319a 	movw	r3, #29082	; 0x719a
    1a54:	e3403000 	movt	r3, #0
    1a58:	e5d33000 	ldrb	r3, [r3]
    1a5c:	e35300e0 	cmp	r3, #224	; 0xe0
    1a60:	1a000015 	bne	1abc <__cs3_region_zero_size_ram+0x15a4>
    1a64:	e3073199 	movw	r3, #29081	; 0x7199
    1a68:	e3403000 	movt	r3, #0
    1a6c:	e5d33000 	ldrb	r3, [r3]
    1a70:	e35300f0 	cmp	r3, #240	; 0xf0
    1a74:	1a000010 	bne	1abc <__cs3_region_zero_size_ram+0x15a4>
    1a78:	e3073198 	movw	r3, #29080	; 0x7198
    1a7c:	e3403000 	movt	r3, #0
    1a80:	e5d33000 	ldrb	r3, [r3]
    1a84:	e353005a 	cmp	r3, #90	; 0x5a
    1a88:	1a00000b 	bne	1abc <__cs3_region_zero_size_ram+0x15a4>
	{
		LCD_text("Byte1=E0",0);
    1a8c:	e3060454 	movw	r0, #25684	; 0x6454
    1a90:	e3400000 	movt	r0, #0
    1a94:	e3a01000 	mov	r1, #0
    1a98:	eb000346 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1a9c:	e3050c44 	movw	r0, #23620	; 0x5c44
    1aa0:	e3400000 	movt	r0, #0
    1aa4:	e3a01001 	mov	r1, #1
    1aa8:	eb000342 	bl	27b8 <LCD_text>
        LCD_text("Byte3=5A",2);	
    1aac:	e3050fb0 	movw	r0, #24496	; 0x5fb0
    1ab0:	e3400000 	movt	r0, #0
    1ab4:	e3a01002 	mov	r1, #2
    1ab8:	eb00033e 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x4A))
    1abc:	e307319a 	movw	r3, #29082	; 0x719a
    1ac0:	e3403000 	movt	r3, #0
    1ac4:	e5d33000 	ldrb	r3, [r3]
    1ac8:	e35300e0 	cmp	r3, #224	; 0xe0
    1acc:	1a000015 	bne	1b28 <__cs3_region_zero_size_ram+0x1610>
    1ad0:	e3073199 	movw	r3, #29081	; 0x7199
    1ad4:	e3403000 	movt	r3, #0
    1ad8:	e5d33000 	ldrb	r3, [r3]
    1adc:	e35300f0 	cmp	r3, #240	; 0xf0
    1ae0:	1a000010 	bne	1b28 <__cs3_region_zero_size_ram+0x1610>
    1ae4:	e3073198 	movw	r3, #29080	; 0x7198
    1ae8:	e3403000 	movt	r3, #0
    1aec:	e5d33000 	ldrb	r3, [r3]
    1af0:	e353004a 	cmp	r3, #74	; 0x4a
    1af4:	1a00000b 	bne	1b28 <__cs3_region_zero_size_ram+0x1610>
	{
		LCD_text("Byte1=E0",0);
    1af8:	e3060454 	movw	r0, #25684	; 0x6454
    1afc:	e3400000 	movt	r0, #0
    1b00:	e3a01000 	mov	r1, #0
    1b04:	eb00032b 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1b08:	e3050c44 	movw	r0, #23620	; 0x5c44
    1b0c:	e3400000 	movt	r0, #0
    1b10:	e3a01001 	mov	r1, #1
    1b14:	eb000327 	bl	27b8 <LCD_text>
        LCD_text("Byte3=4A",2);	
    1b18:	e30600a0 	movw	r0, #24736	; 0x60a0
    1b1c:	e3400000 	movt	r0, #0
    1b20:	e3a01002 	mov	r1, #2
    1b24:	eb000323 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x70))
    1b28:	e307319a 	movw	r3, #29082	; 0x719a
    1b2c:	e3403000 	movt	r3, #0
    1b30:	e5d33000 	ldrb	r3, [r3]
    1b34:	e35300e0 	cmp	r3, #224	; 0xe0
    1b38:	1a000015 	bne	1b94 <__cs3_region_zero_size_ram+0x167c>
    1b3c:	e3073199 	movw	r3, #29081	; 0x7199
    1b40:	e3403000 	movt	r3, #0
    1b44:	e5d33000 	ldrb	r3, [r3]
    1b48:	e35300f0 	cmp	r3, #240	; 0xf0
    1b4c:	1a000010 	bne	1b94 <__cs3_region_zero_size_ram+0x167c>
    1b50:	e3073198 	movw	r3, #29080	; 0x7198
    1b54:	e3403000 	movt	r3, #0
    1b58:	e5d33000 	ldrb	r3, [r3]
    1b5c:	e3530070 	cmp	r3, #112	; 0x70
    1b60:	1a00000b 	bne	1b94 <__cs3_region_zero_size_ram+0x167c>
	{
		LCD_text("Byte1=E0",0);
    1b64:	e3060454 	movw	r0, #25684	; 0x6454
    1b68:	e3400000 	movt	r0, #0
    1b6c:	e3a01000 	mov	r1, #0
    1b70:	eb000310 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1b74:	e3050c44 	movw	r0, #23620	; 0x5c44
    1b78:	e3400000 	movt	r0, #0
    1b7c:	e3a01001 	mov	r1, #1
    1b80:	eb00030c 	bl	27b8 <LCD_text>
        LCD_text("Byte3=70",2);	
    1b84:	e3060418 	movw	r0, #25624	; 0x6418
    1b88:	e3400000 	movt	r0, #0
    1b8c:	e3a01002 	mov	r1, #2
    1b90:	eb000308 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x6C))
    1b94:	e307319a 	movw	r3, #29082	; 0x719a
    1b98:	e3403000 	movt	r3, #0
    1b9c:	e5d33000 	ldrb	r3, [r3]
    1ba0:	e35300e0 	cmp	r3, #224	; 0xe0
    1ba4:	1a000015 	bne	1c00 <__cs3_region_zero_size_ram+0x16e8>
    1ba8:	e3073199 	movw	r3, #29081	; 0x7199
    1bac:	e3403000 	movt	r3, #0
    1bb0:	e5d33000 	ldrb	r3, [r3]
    1bb4:	e35300f0 	cmp	r3, #240	; 0xf0
    1bb8:	1a000010 	bne	1c00 <__cs3_region_zero_size_ram+0x16e8>
    1bbc:	e3073198 	movw	r3, #29080	; 0x7198
    1bc0:	e3403000 	movt	r3, #0
    1bc4:	e5d33000 	ldrb	r3, [r3]
    1bc8:	e353006c 	cmp	r3, #108	; 0x6c
    1bcc:	1a00000b 	bne	1c00 <__cs3_region_zero_size_ram+0x16e8>
	{
		LCD_text("Byte1=E0",0);
    1bd0:	e3060454 	movw	r0, #25684	; 0x6454
    1bd4:	e3400000 	movt	r0, #0
    1bd8:	e3a01000 	mov	r1, #0
    1bdc:	eb0002f5 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1be0:	e3050c44 	movw	r0, #23620	; 0x5c44
    1be4:	e3400000 	movt	r0, #0
    1be8:	e3a01001 	mov	r1, #1
    1bec:	eb0002f1 	bl	27b8 <LCD_text>
        LCD_text("Byte3=6C",2);	
    1bf0:	e3060340 	movw	r0, #25408	; 0x6340
    1bf4:	e3400000 	movt	r0, #0
    1bf8:	e3a01002 	mov	r1, #2
    1bfc:	eb0002ed 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x7D))
    1c00:	e307319a 	movw	r3, #29082	; 0x719a
    1c04:	e3403000 	movt	r3, #0
    1c08:	e5d33000 	ldrb	r3, [r3]
    1c0c:	e35300e0 	cmp	r3, #224	; 0xe0
    1c10:	1a000015 	bne	1c6c <__cs3_region_zero_size_ram+0x1754>
    1c14:	e3073199 	movw	r3, #29081	; 0x7199
    1c18:	e3403000 	movt	r3, #0
    1c1c:	e5d33000 	ldrb	r3, [r3]
    1c20:	e35300f0 	cmp	r3, #240	; 0xf0
    1c24:	1a000010 	bne	1c6c <__cs3_region_zero_size_ram+0x1754>
    1c28:	e3073198 	movw	r3, #29080	; 0x7198
    1c2c:	e3403000 	movt	r3, #0
    1c30:	e5d33000 	ldrb	r3, [r3]
    1c34:	e353007d 	cmp	r3, #125	; 0x7d
    1c38:	1a00000b 	bne	1c6c <__cs3_region_zero_size_ram+0x1754>
	{
		LCD_text("Byte1=E0",0);
    1c3c:	e3060454 	movw	r0, #25684	; 0x6454
    1c40:	e3400000 	movt	r0, #0
    1c44:	e3a01000 	mov	r1, #0
    1c48:	eb0002da 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1c4c:	e3050c44 	movw	r0, #23620	; 0x5c44
    1c50:	e3400000 	movt	r0, #0
    1c54:	e3a01001 	mov	r1, #1
    1c58:	eb0002d6 	bl	27b8 <LCD_text>
        LCD_text("Byte3=7D",2);	
    1c5c:	e3060370 	movw	r0, #25456	; 0x6370
    1c60:	e3400000 	movt	r0, #0
    1c64:	e3a01002 	mov	r1, #2
    1c68:	eb0002d2 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x71))
    1c6c:	e307319a 	movw	r3, #29082	; 0x719a
    1c70:	e3403000 	movt	r3, #0
    1c74:	e5d33000 	ldrb	r3, [r3]
    1c78:	e35300e0 	cmp	r3, #224	; 0xe0
    1c7c:	1a000015 	bne	1cd8 <__cs3_region_zero_size_ram+0x17c0>
    1c80:	e3073199 	movw	r3, #29081	; 0x7199
    1c84:	e3403000 	movt	r3, #0
    1c88:	e5d33000 	ldrb	r3, [r3]
    1c8c:	e35300f0 	cmp	r3, #240	; 0xf0
    1c90:	1a000010 	bne	1cd8 <__cs3_region_zero_size_ram+0x17c0>
    1c94:	e3073198 	movw	r3, #29080	; 0x7198
    1c98:	e3403000 	movt	r3, #0
    1c9c:	e5d33000 	ldrb	r3, [r3]
    1ca0:	e3530071 	cmp	r3, #113	; 0x71
    1ca4:	1a00000b 	bne	1cd8 <__cs3_region_zero_size_ram+0x17c0>
	{
		LCD_text("Byte1=E0",0);
    1ca8:	e3060454 	movw	r0, #25684	; 0x6454
    1cac:	e3400000 	movt	r0, #0
    1cb0:	e3a01000 	mov	r1, #0
    1cb4:	eb0002bf 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1cb8:	e3050c44 	movw	r0, #23620	; 0x5c44
    1cbc:	e3400000 	movt	r0, #0
    1cc0:	e3a01001 	mov	r1, #1
    1cc4:	eb0002bb 	bl	27b8 <LCD_text>
        LCD_text("Byte3=71",2);	
    1cc8:	e3060430 	movw	r0, #25648	; 0x6430
    1ccc:	e3400000 	movt	r0, #0
    1cd0:	e3a01002 	mov	r1, #2
    1cd4:	eb0002b7 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x69))
    1cd8:	e307319a 	movw	r3, #29082	; 0x719a
    1cdc:	e3403000 	movt	r3, #0
    1ce0:	e5d33000 	ldrb	r3, [r3]
    1ce4:	e35300e0 	cmp	r3, #224	; 0xe0
    1ce8:	1a000015 	bne	1d44 <__cs3_region_zero_size_ram+0x182c>
    1cec:	e3073199 	movw	r3, #29081	; 0x7199
    1cf0:	e3403000 	movt	r3, #0
    1cf4:	e5d33000 	ldrb	r3, [r3]
    1cf8:	e35300f0 	cmp	r3, #240	; 0xf0
    1cfc:	1a000010 	bne	1d44 <__cs3_region_zero_size_ram+0x182c>
    1d00:	e3073198 	movw	r3, #29080	; 0x7198
    1d04:	e3403000 	movt	r3, #0
    1d08:	e5d33000 	ldrb	r3, [r3]
    1d0c:	e3530069 	cmp	r3, #105	; 0x69
    1d10:	1a00000b 	bne	1d44 <__cs3_region_zero_size_ram+0x182c>
	{
		LCD_text("Byte1=E0",0);
    1d14:	e3060454 	movw	r0, #25684	; 0x6454
    1d18:	e3400000 	movt	r0, #0
    1d1c:	e3a01000 	mov	r1, #0
    1d20:	eb0002a4 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1d24:	e3050c44 	movw	r0, #23620	; 0x5c44
    1d28:	e3400000 	movt	r0, #0
    1d2c:	e3a01001 	mov	r1, #1
    1d30:	eb0002a0 	bl	27b8 <LCD_text>
        LCD_text("Byte3=69",2);	
    1d34:	e30603d0 	movw	r0, #25552	; 0x63d0
    1d38:	e3400000 	movt	r0, #0
    1d3c:	e3a01002 	mov	r1, #2
    1d40:	eb00029c 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x7A))
    1d44:	e307319a 	movw	r3, #29082	; 0x719a
    1d48:	e3403000 	movt	r3, #0
    1d4c:	e5d33000 	ldrb	r3, [r3]
    1d50:	e35300e0 	cmp	r3, #224	; 0xe0
    1d54:	1a000015 	bne	1db0 <__cs3_region_zero_size_ram+0x1898>
    1d58:	e3073199 	movw	r3, #29081	; 0x7199
    1d5c:	e3403000 	movt	r3, #0
    1d60:	e5d33000 	ldrb	r3, [r3]
    1d64:	e35300f0 	cmp	r3, #240	; 0xf0
    1d68:	1a000010 	bne	1db0 <__cs3_region_zero_size_ram+0x1898>
    1d6c:	e3073198 	movw	r3, #29080	; 0x7198
    1d70:	e3403000 	movt	r3, #0
    1d74:	e5d33000 	ldrb	r3, [r3]
    1d78:	e353007a 	cmp	r3, #122	; 0x7a
    1d7c:	1a00000b 	bne	1db0 <__cs3_region_zero_size_ram+0x1898>
	{
		LCD_text("Byte1=E0",0);
    1d80:	e3060454 	movw	r0, #25684	; 0x6454
    1d84:	e3400000 	movt	r0, #0
    1d88:	e3a01000 	mov	r1, #0
    1d8c:	eb000289 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1d90:	e3050c44 	movw	r0, #23620	; 0x5c44
    1d94:	e3400000 	movt	r0, #0
    1d98:	e3a01001 	mov	r1, #1
    1d9c:	eb000285 	bl	27b8 <LCD_text>
        LCD_text("Byte3=7A",2);	
    1da0:	e3060400 	movw	r0, #25600	; 0x6400
    1da4:	e3400000 	movt	r0, #0
    1da8:	e3a01002 	mov	r1, #2
    1dac:	eb000281 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x12))
    1db0:	e307319a 	movw	r3, #29082	; 0x719a
    1db4:	e3403000 	movt	r3, #0
    1db8:	e5d33000 	ldrb	r3, [r3]
    1dbc:	e35300e0 	cmp	r3, #224	; 0xe0
    1dc0:	1a000015 	bne	1e1c <__cs3_region_zero_size_ram+0x1904>
    1dc4:	e3073199 	movw	r3, #29081	; 0x7199
    1dc8:	e3403000 	movt	r3, #0
    1dcc:	e5d33000 	ldrb	r3, [r3]
    1dd0:	e35300f0 	cmp	r3, #240	; 0xf0
    1dd4:	1a000010 	bne	1e1c <__cs3_region_zero_size_ram+0x1904>
    1dd8:	e3073198 	movw	r3, #29080	; 0x7198
    1ddc:	e3403000 	movt	r3, #0
    1de0:	e5d33000 	ldrb	r3, [r3]
    1de4:	e3530012 	cmp	r3, #18
    1de8:	1a00000b 	bne	1e1c <__cs3_region_zero_size_ram+0x1904>
	{
		LCD_text("Byte1=E0",0);
    1dec:	e3060454 	movw	r0, #25684	; 0x6454
    1df0:	e3400000 	movt	r0, #0
    1df4:	e3a01000 	mov	r1, #0
    1df8:	eb00026e 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1dfc:	e3050c44 	movw	r0, #23620	; 0x5c44
    1e00:	e3400000 	movt	r0, #0
    1e04:	e3a01001 	mov	r1, #1
    1e08:	eb00026a 	bl	27b8 <LCD_text>
        LCD_text("Byte3=12",2);	
    1e0c:	e3060130 	movw	r0, #24880	; 0x6130
    1e10:	e3400000 	movt	r0, #0
    1e14:	e3a01002 	mov	r1, #2
    1e18:	eb000266 	bl	27b8 <LCD_text>
	}
    if((byte1==0x14)&&(byte2==0xF0)&&(byte3==0x77))
    1e1c:	e307319a 	movw	r3, #29082	; 0x719a
    1e20:	e3403000 	movt	r3, #0
    1e24:	e5d33000 	ldrb	r3, [r3]
    1e28:	e3530014 	cmp	r3, #20
    1e2c:	1a000015 	bne	1e88 <__cs3_region_zero_size_ram+0x1970>
    1e30:	e3073199 	movw	r3, #29081	; 0x7199
    1e34:	e3403000 	movt	r3, #0
    1e38:	e5d33000 	ldrb	r3, [r3]
    1e3c:	e35300f0 	cmp	r3, #240	; 0xf0
    1e40:	1a000010 	bne	1e88 <__cs3_region_zero_size_ram+0x1970>
    1e44:	e3073198 	movw	r3, #29080	; 0x7198
    1e48:	e3403000 	movt	r3, #0
    1e4c:	e5d33000 	ldrb	r3, [r3]
    1e50:	e3530077 	cmp	r3, #119	; 0x77
    1e54:	1a00000b 	bne	1e88 <__cs3_region_zero_size_ram+0x1970>
	{
		LCD_text("Byte1=14",0);
    1e58:	e306016c 	movw	r0, #24940	; 0x616c
    1e5c:	e3400000 	movt	r0, #0
    1e60:	e3a01000 	mov	r1, #0
    1e64:	eb000253 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1e68:	e3050c44 	movw	r0, #23620	; 0x5c44
    1e6c:	e3400000 	movt	r0, #0
    1e70:	e3a01001 	mov	r1, #1
    1e74:	eb00024f 	bl	27b8 <LCD_text>
        LCD_text("Byte3=77",2);	
    1e78:	e30602f8 	movw	r0, #25336	; 0x62f8
    1e7c:	e3400000 	movt	r0, #0
    1e80:	e3a01002 	mov	r1, #2
    1e84:	eb00024b 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x14))
    1e88:	e307319a 	movw	r3, #29082	; 0x719a
    1e8c:	e3403000 	movt	r3, #0
    1e90:	e5d33000 	ldrb	r3, [r3]
    1e94:	e35300e0 	cmp	r3, #224	; 0xe0
    1e98:	1a000015 	bne	1ef4 <__cs3_region_zero_size_ram+0x19dc>
    1e9c:	e3073199 	movw	r3, #29081	; 0x7199
    1ea0:	e3403000 	movt	r3, #0
    1ea4:	e5d33000 	ldrb	r3, [r3]
    1ea8:	e35300f0 	cmp	r3, #240	; 0xf0
    1eac:	1a000010 	bne	1ef4 <__cs3_region_zero_size_ram+0x19dc>
    1eb0:	e3073198 	movw	r3, #29080	; 0x7198
    1eb4:	e3403000 	movt	r3, #0
    1eb8:	e5d33000 	ldrb	r3, [r3]
    1ebc:	e3530014 	cmp	r3, #20
    1ec0:	1a00000b 	bne	1ef4 <__cs3_region_zero_size_ram+0x19dc>
	{
		LCD_text("Byte1=E0",0);
    1ec4:	e3060454 	movw	r0, #25684	; 0x6454
    1ec8:	e3400000 	movt	r0, #0
    1ecc:	e3a01000 	mov	r1, #0
    1ed0:	eb000238 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1ed4:	e3050c44 	movw	r0, #23620	; 0x5c44
    1ed8:	e3400000 	movt	r0, #0
    1edc:	e3a01001 	mov	r1, #1
    1ee0:	eb000234 	bl	27b8 <LCD_text>
        LCD_text("Byte3=14",2);	
    1ee4:	e3060178 	movw	r0, #24952	; 0x6178
    1ee8:	e3400000 	movt	r0, #0
    1eec:	e3a01002 	mov	r1, #2
    1ef0:	eb000230 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x2F))
    1ef4:	e307319a 	movw	r3, #29082	; 0x719a
    1ef8:	e3403000 	movt	r3, #0
    1efc:	e5d33000 	ldrb	r3, [r3]
    1f00:	e35300e0 	cmp	r3, #224	; 0xe0
    1f04:	1a000015 	bne	1f60 <__cs3_region_zero_size_ram+0x1a48>
    1f08:	e3073199 	movw	r3, #29081	; 0x7199
    1f0c:	e3403000 	movt	r3, #0
    1f10:	e5d33000 	ldrb	r3, [r3]
    1f14:	e35300f0 	cmp	r3, #240	; 0xf0
    1f18:	1a000010 	bne	1f60 <__cs3_region_zero_size_ram+0x1a48>
    1f1c:	e3073198 	movw	r3, #29080	; 0x7198
    1f20:	e3403000 	movt	r3, #0
    1f24:	e5d33000 	ldrb	r3, [r3]
    1f28:	e353002f 	cmp	r3, #47	; 0x2f
    1f2c:	1a00000b 	bne	1f60 <__cs3_region_zero_size_ram+0x1a48>
	{
		LCD_text("Byte1=E0",0);
    1f30:	e3060454 	movw	r0, #25684	; 0x6454
    1f34:	e3400000 	movt	r0, #0
    1f38:	e3a01000 	mov	r1, #0
    1f3c:	eb00021d 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1f40:	e3050c44 	movw	r0, #23620	; 0x5c44
    1f44:	e3400000 	movt	r0, #0
    1f48:	e3a01001 	mov	r1, #1
    1f4c:	eb000219 	bl	27b8 <LCD_text>
        LCD_text("Byte3=2F",2);	
    1f50:	e3060460 	movw	r0, #25696	; 0x6460
    1f54:	e3400000 	movt	r0, #0
    1f58:	e3a01002 	mov	r1, #2
    1f5c:	eb000215 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x27))
    1f60:	e307319a 	movw	r3, #29082	; 0x719a
    1f64:	e3403000 	movt	r3, #0
    1f68:	e5d33000 	ldrb	r3, [r3]
    1f6c:	e35300e0 	cmp	r3, #224	; 0xe0
    1f70:	1a000015 	bne	1fcc <__cs3_region_zero_size_ram+0x1ab4>
    1f74:	e3073199 	movw	r3, #29081	; 0x7199
    1f78:	e3403000 	movt	r3, #0
    1f7c:	e5d33000 	ldrb	r3, [r3]
    1f80:	e35300f0 	cmp	r3, #240	; 0xf0
    1f84:	1a000010 	bne	1fcc <__cs3_region_zero_size_ram+0x1ab4>
    1f88:	e3073198 	movw	r3, #29080	; 0x7198
    1f8c:	e3403000 	movt	r3, #0
    1f90:	e5d33000 	ldrb	r3, [r3]
    1f94:	e3530027 	cmp	r3, #39	; 0x27
    1f98:	1a00000b 	bne	1fcc <__cs3_region_zero_size_ram+0x1ab4>
	{
		LCD_text("Byte1=E0",0);
    1f9c:	e3060454 	movw	r0, #25684	; 0x6454
    1fa0:	e3400000 	movt	r0, #0
    1fa4:	e3a01000 	mov	r1, #0
    1fa8:	eb000202 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    1fac:	e3050c44 	movw	r0, #23620	; 0x5c44
    1fb0:	e3400000 	movt	r0, #0
    1fb4:	e3a01001 	mov	r1, #1
    1fb8:	eb0001fe 	bl	27b8 <LCD_text>
        LCD_text("Byte3=27",2);	
    1fbc:	e306046c 	movw	r0, #25708	; 0x646c
    1fc0:	e3400000 	movt	r0, #0
    1fc4:	e3a01002 	mov	r1, #2
    1fc8:	eb0001fa 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x11))
    1fcc:	e307319a 	movw	r3, #29082	; 0x719a
    1fd0:	e3403000 	movt	r3, #0
    1fd4:	e5d33000 	ldrb	r3, [r3]
    1fd8:	e35300e0 	cmp	r3, #224	; 0xe0
    1fdc:	1a000015 	bne	2038 <__cs3_region_zero_size_ram+0x1b20>
    1fe0:	e3073199 	movw	r3, #29081	; 0x7199
    1fe4:	e3403000 	movt	r3, #0
    1fe8:	e5d33000 	ldrb	r3, [r3]
    1fec:	e35300f0 	cmp	r3, #240	; 0xf0
    1ff0:	1a000010 	bne	2038 <__cs3_region_zero_size_ram+0x1b20>
    1ff4:	e3073198 	movw	r3, #29080	; 0x7198
    1ff8:	e3403000 	movt	r3, #0
    1ffc:	e5d33000 	ldrb	r3, [r3]
    2000:	e3530011 	cmp	r3, #17
    2004:	1a00000b 	bne	2038 <__cs3_region_zero_size_ram+0x1b20>
	{
		LCD_text("Byte1=E0",0);
    2008:	e3060454 	movw	r0, #25684	; 0x6454
    200c:	e3400000 	movt	r0, #0
    2010:	e3a01000 	mov	r1, #0
    2014:	eb0001e7 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    2018:	e3050c44 	movw	r0, #23620	; 0x5c44
    201c:	e3400000 	movt	r0, #0
    2020:	e3a01001 	mov	r1, #1
    2024:	eb0001e3 	bl	27b8 <LCD_text>
        LCD_text("Byte3=11",2);	
    2028:	e3060190 	movw	r0, #24976	; 0x6190
    202c:	e3400000 	movt	r0, #0
    2030:	e3a01002 	mov	r1, #2
    2034:	eb0001df 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x1F))
    2038:	e307319a 	movw	r3, #29082	; 0x719a
    203c:	e3403000 	movt	r3, #0
    2040:	e5d33000 	ldrb	r3, [r3]
    2044:	e35300e0 	cmp	r3, #224	; 0xe0
    2048:	1a000015 	bne	20a4 <__cs3_region_zero_size_ram+0x1b8c>
    204c:	e3073199 	movw	r3, #29081	; 0x7199
    2050:	e3403000 	movt	r3, #0
    2054:	e5d33000 	ldrb	r3, [r3]
    2058:	e35300f0 	cmp	r3, #240	; 0xf0
    205c:	1a000010 	bne	20a4 <__cs3_region_zero_size_ram+0x1b8c>
    2060:	e3073198 	movw	r3, #29080	; 0x7198
    2064:	e3403000 	movt	r3, #0
    2068:	e5d33000 	ldrb	r3, [r3]
    206c:	e353001f 	cmp	r3, #31
    2070:	1a00000b 	bne	20a4 <__cs3_region_zero_size_ram+0x1b8c>
	{
		LCD_text("Byte1=E0",0);
    2074:	e3060454 	movw	r0, #25684	; 0x6454
    2078:	e3400000 	movt	r0, #0
    207c:	e3a01000 	mov	r1, #0
    2080:	eb0001cc 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    2084:	e3050c44 	movw	r0, #23620	; 0x5c44
    2088:	e3400000 	movt	r0, #0
    208c:	e3a01001 	mov	r1, #1
    2090:	eb0001c8 	bl	27b8 <LCD_text>
        LCD_text("Byte3=1F",2);	
    2094:	e3060478 	movw	r0, #25720	; 0x6478
    2098:	e3400000 	movt	r0, #0
    209c:	e3a01002 	mov	r1, #2
    20a0:	eb0001c4 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x74))
    20a4:	e307319a 	movw	r3, #29082	; 0x719a
    20a8:	e3403000 	movt	r3, #0
    20ac:	e5d33000 	ldrb	r3, [r3]
    20b0:	e35300e0 	cmp	r3, #224	; 0xe0
    20b4:	1a000015 	bne	2110 <__cs3_region_zero_size_ram+0x1bf8>
    20b8:	e3073199 	movw	r3, #29081	; 0x7199
    20bc:	e3403000 	movt	r3, #0
    20c0:	e5d33000 	ldrb	r3, [r3]
    20c4:	e35300f0 	cmp	r3, #240	; 0xf0
    20c8:	1a000010 	bne	2110 <__cs3_region_zero_size_ram+0x1bf8>
    20cc:	e3073198 	movw	r3, #29080	; 0x7198
    20d0:	e3403000 	movt	r3, #0
    20d4:	e5d33000 	ldrb	r3, [r3]
    20d8:	e3530074 	cmp	r3, #116	; 0x74
    20dc:	1a00000b 	bne	2110 <__cs3_region_zero_size_ram+0x1bf8>
	{
		LCD_text("Byte1=E0",0);
    20e0:	e3060454 	movw	r0, #25684	; 0x6454
    20e4:	e3400000 	movt	r0, #0
    20e8:	e3a01000 	mov	r1, #0
    20ec:	eb0001b1 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    20f0:	e3050c44 	movw	r0, #23620	; 0x5c44
    20f4:	e3400000 	movt	r0, #0
    20f8:	e3a01001 	mov	r1, #1
    20fc:	eb0001ad 	bl	27b8 <LCD_text>
        LCD_text("Byte3=74",2);	
    2100:	e30603b8 	movw	r0, #25528	; 0x63b8
    2104:	e3400000 	movt	r0, #0
    2108:	e3a01002 	mov	r1, #2
    210c:	eb0001a9 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x72))
    2110:	e307319a 	movw	r3, #29082	; 0x719a
    2114:	e3403000 	movt	r3, #0
    2118:	e5d33000 	ldrb	r3, [r3]
    211c:	e35300e0 	cmp	r3, #224	; 0xe0
    2120:	1a000015 	bne	217c <__cs3_region_zero_size_ram+0x1c64>
    2124:	e3073199 	movw	r3, #29081	; 0x7199
    2128:	e3403000 	movt	r3, #0
    212c:	e5d33000 	ldrb	r3, [r3]
    2130:	e35300f0 	cmp	r3, #240	; 0xf0
    2134:	1a000010 	bne	217c <__cs3_region_zero_size_ram+0x1c64>
    2138:	e3073198 	movw	r3, #29080	; 0x7198
    213c:	e3403000 	movt	r3, #0
    2140:	e5d33000 	ldrb	r3, [r3]
    2144:	e3530072 	cmp	r3, #114	; 0x72
    2148:	1a00000b 	bne	217c <__cs3_region_zero_size_ram+0x1c64>
	{
		LCD_text("Byte1=E0",0);
    214c:	e3060454 	movw	r0, #25684	; 0x6454
    2150:	e3400000 	movt	r0, #0
    2154:	e3a01000 	mov	r1, #0
    2158:	eb000196 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    215c:	e3050c44 	movw	r0, #23620	; 0x5c44
    2160:	e3400000 	movt	r0, #0
    2164:	e3a01001 	mov	r1, #1
    2168:	eb000192 	bl	27b8 <LCD_text>
        LCD_text("Byte3=72",2);
    216c:	e30603e8 	movw	r0, #25576	; 0x63e8
    2170:	e3400000 	movt	r0, #0
    2174:	e3a01002 	mov	r1, #2
    2178:	eb00018e 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x75))
    217c:	e307319a 	movw	r3, #29082	; 0x719a
    2180:	e3403000 	movt	r3, #0
    2184:	e5d33000 	ldrb	r3, [r3]
    2188:	e35300e0 	cmp	r3, #224	; 0xe0
    218c:	1a000015 	bne	21e8 <__cs3_region_zero_size_ram+0x1cd0>
    2190:	e3073199 	movw	r3, #29081	; 0x7199
    2194:	e3403000 	movt	r3, #0
    2198:	e5d33000 	ldrb	r3, [r3]
    219c:	e35300f0 	cmp	r3, #240	; 0xf0
    21a0:	1a000010 	bne	21e8 <__cs3_region_zero_size_ram+0x1cd0>
    21a4:	e3073198 	movw	r3, #29080	; 0x7198
    21a8:	e3403000 	movt	r3, #0
    21ac:	e5d33000 	ldrb	r3, [r3]
    21b0:	e3530075 	cmp	r3, #117	; 0x75
    21b4:	1a00000b 	bne	21e8 <__cs3_region_zero_size_ram+0x1cd0>
	{
		LCD_text("Byte1=E0",0);
    21b8:	e3060454 	movw	r0, #25684	; 0x6454
    21bc:	e3400000 	movt	r0, #0
    21c0:	e3a01000 	mov	r1, #0
    21c4:	eb00017b 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    21c8:	e3050c44 	movw	r0, #23620	; 0x5c44
    21cc:	e3400000 	movt	r0, #0
    21d0:	e3a01001 	mov	r1, #1
    21d4:	eb000177 	bl	27b8 <LCD_text>
        LCD_text("Byte3=75",2);
    21d8:	e3060358 	movw	r0, #25432	; 0x6358
    21dc:	e3400000 	movt	r0, #0
    21e0:	e3a01002 	mov	r1, #2
    21e4:	eb000173 	bl	27b8 <LCD_text>
	}
    if((byte1==0xE0)&&(byte2==0xF0)&&(byte3==0x6B))
    21e8:	e307319a 	movw	r3, #29082	; 0x719a
    21ec:	e3403000 	movt	r3, #0
    21f0:	e5d33000 	ldrb	r3, [r3]
    21f4:	e35300e0 	cmp	r3, #224	; 0xe0
    21f8:	1a000015 	bne	2254 <__cs3_region_zero_size_ram+0x1d3c>
    21fc:	e3073199 	movw	r3, #29081	; 0x7199
    2200:	e3403000 	movt	r3, #0
    2204:	e5d33000 	ldrb	r3, [r3]
    2208:	e35300f0 	cmp	r3, #240	; 0xf0
    220c:	1a000010 	bne	2254 <__cs3_region_zero_size_ram+0x1d3c>
    2210:	e3073198 	movw	r3, #29080	; 0x7198
    2214:	e3403000 	movt	r3, #0
    2218:	e5d33000 	ldrb	r3, [r3]
    221c:	e353006b 	cmp	r3, #107	; 0x6b
    2220:	1a00000b 	bne	2254 <__cs3_region_zero_size_ram+0x1d3c>
    {
        LCD_text("Byte1=E0",0);
    2224:	e3060454 	movw	r0, #25684	; 0x6454
    2228:	e3400000 	movt	r0, #0
    222c:	e3a01000 	mov	r1, #0
    2230:	eb000160 	bl	27b8 <LCD_text>
        LCD_text("Byte2=F0",1);
    2234:	e3050c44 	movw	r0, #23620	; 0x5c44
    2238:	e3400000 	movt	r0, #0
    223c:	e3a01001 	mov	r1, #1
    2240:	eb00015c 	bl	27b8 <LCD_text>
        LCD_text("Byte3=6B",2);
    2244:	e3060388 	movw	r0, #25480	; 0x6388
    2248:	e3400000 	movt	r0, #0
    224c:	e3a01002 	mov	r1, #2
    2250:	eb000158 	bl	27b8 <LCD_text>
    }
    refresh_buffer();
    2254:	eb0000fa 	bl	2644 <refresh_buffer>
    2258:	e8bd8008 	pop	{r3, pc}

0000225c <config_MPcore_private_timer>:
void config_MPcore_private_timer() {
    volatile int * MPcore_private_timer_ptr = (int *)MPCORE_PRIV_TIMER; // timer base address

    /* set the timer period */
    int counter = 20000000; // period = 1/(200 MHz) x 40x10^6 = 0.2 sec
    *(MPcore_private_timer_ptr) = counter; // write to timer load register
    225c:	e3e03a13 	mvn	r3, #77824	; 0x13000
    2260:	e3a02c2d 	mov	r2, #11520	; 0x2d00
    2264:	e3402131 	movt	r2, #305	; 0x131
    2268:	e50329ff 	str	r2, [r3, #-2559]	; 0xfffff601

    /* write to control register to start timer, with interrupts */
    *(MPcore_private_timer_ptr + 2) = 0x7; // int mask = 1, mode = 1, enable = 1
    226c:	e3a02007 	mov	r2, #7
    2270:	e50329f7 	str	r2, [r3, #-2551]	; 0xfffff609
    2274:	e12fff1e 	bx	lr

00002278 <config_PS2>:

/* setup the PS/2 interrupts */
void config_PS2() {
    volatile int * PS2_ptr = (int *)PS2_BASE; // PS/2 port address

    *(PS2_ptr) = 0xFF; /* reset */
    2278:	e3a03000 	mov	r3, #0
    227c:	e34f3f20 	movt	r3, #65312	; 0xff20
    2280:	e3a020ff 	mov	r2, #255	; 0xff
    2284:	e5832100 	str	r2, [r3, #256]	; 0x100
    *(PS2_ptr + 1) = 0x1; /* write to the PS/2 Control register to enable interrupts */
    2288:	e3a02001 	mov	r2, #1
    228c:	e5832104 	str	r2, [r3, #260]	; 0x104
    2290:	e12fff1e 	bx	lr

00002294 <HEX_PS2>:
}

/****************************************************************************************
 * Subroutine to show a string of HEX data on the HEX displays
****************************************************************************************/
void HEX_PS2(char b1, char b2, char b3) {
    2294:	e92d0070 	push	{r4, r5, r6}
    2298:	e24dd01c 	sub	sp, sp, #28
    229c:	e1a04000 	mov	r4, r0
    22a0:	e1a06001 	mov	r6, r1
    22a4:	e1a05002 	mov	r5, r2
    volatile int * HEX5_HEX4_ptr = (int *)HEX5_HEX4_BASE;

    /* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in
     * a single 7-seg display in the DE2 Media Computer, for the hex digits 0 -
     * F */
    unsigned char seven_seg_decode_table[] = {
    22a8:	e3053c28 	movw	r3, #23592	; 0x5c28
    22ac:	e3403000 	movt	r3, #0
    22b0:	e28dc008 	add	r12, sp, #8
    22b4:	e5930000 	ldr	r0, [r3]
    22b8:	e5931004 	ldr	r1, [r3, #4]
    22bc:	e5932008 	ldr	r2, [r3, #8]
    22c0:	e593300c 	ldr	r3, [r3, #12]
    22c4:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
        0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
        0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
    unsigned char hex_segs[] = {0, 0, 0, 0, 0, 0, 0, 0};
    22c8:	e3a03000 	mov	r3, #0
    22cc:	e5cd3000 	strb	r3, [sp]
    22d0:	e5cd3001 	strb	r3, [sp, #1]
    22d4:	e5cd3002 	strb	r3, [sp, #2]
    22d8:	e5cd3003 	strb	r3, [sp, #3]
    22dc:	e5cd3004 	strb	r3, [sp, #4]
    22e0:	e5cd3005 	strb	r3, [sp, #5]
    22e4:	e5cd3006 	strb	r3, [sp, #6]
    22e8:	e5cd3007 	strb	r3, [sp, #7]
    unsigned int  shift_buffer, nibble;
    unsigned char code;
    int           i;

    shift_buffer = (b1 << 16) | (b2 << 8) | b3;
    22ec:	e1850406 	orr	r0, r5, r6, lsl #8
    22f0:	e1800804 	orr	r0, r0, r4, lsl #16
}

/****************************************************************************************
 * Subroutine to show a string of HEX data on the HEX displays
****************************************************************************************/
void HEX_PS2(char b1, char b2, char b3) {
    22f4:	e24d3001 	sub	r3, sp, #1
    22f8:	e28d1005 	add	r1, sp, #5

    shift_buffer = (b1 << 16) | (b2 << 8) | b3;

    for (i = 0; i < 6; ++i) 
    {
        nibble = shift_buffer & 0x0000000F; // character is in rightmost nibble
    22fc:	e200200f 	and	r2, r0, #15
        code   = seven_seg_decode_table[nibble];
    2300:	e28dc018 	add	r12, sp, #24
    2304:	e08c2002 	add	r2, r12, r2
        hex_segs[i]  = code;
    2308:	e5522010 	ldrb	r2, [r2, #-16]
    230c:	e5e32001 	strb	r2, [r3, #1]!
        shift_buffer = shift_buffer >> 4;
    2310:	e1a00220 	lsr	r0, r0, #4
    unsigned char code;
    int           i;

    shift_buffer = (b1 << 16) | (b2 << 8) | b3;

    for (i = 0; i < 6; ++i) 
    2314:	e1530001 	cmp	r3, r1
    2318:	1afffff7 	bne	22fc <HEX_PS2+0x68>
        hex_segs[i]  = code;
        shift_buffer = shift_buffer >> 4;
    }

    /* drive the hex displays */
    *(HEX3_HEX0_ptr) = *(int *)(hex_segs);
    231c:	e3a03000 	mov	r3, #0
    2320:	e34f3f20 	movt	r3, #65312	; 0xff20
    2324:	e59d2000 	ldr	r2, [sp]
    2328:	e5832020 	str	r2, [r3, #32]
    *(HEX5_HEX4_ptr) = *(int *)(hex_segs + 4);
    232c:	e59d2004 	ldr	r2, [sp, #4]
    2330:	e5832030 	str	r2, [r3, #48]	; 0x30
    2334:	e28dd01c 	add	sp, sp, #28
    2338:	e8bd0070 	pop	{r4, r5, r6}
    233c:	e12fff1e 	bx	lr

00002340 <main>:
 * This program performs the following:
 * 	   Displays the last three bytes of data received from the PS/2 port
 * 	   on the HEX displays on the board. The PS/2 port is handled using
 * 	   interrupts
********************************************************************************/
int main(void) {
    2340:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    /* initialize some variables */
    byte1        = 0;
    2344:	e307219a 	movw	r2, #29082	; 0x719a
    2348:	e3402000 	movt	r2, #0
    234c:	e3a03000 	mov	r3, #0
    2350:	e5c23000 	strb	r3, [r2]
    byte2        = 0;
    2354:	e3072199 	movw	r2, #29081	; 0x7199
    2358:	e3402000 	movt	r2, #0
    235c:	e5c23000 	strb	r3, [r2]
    byte3        = 0; // used to hold PS/2 data
    2360:	e3072198 	movw	r2, #29080	; 0x7198
    2364:	e3402000 	movt	r2, #0
    2368:	e5c23000 	strb	r3, [r2]
    timeout      = 0; // synchronize with the timer
    236c:	e3072194 	movw	r2, #29076	; 0x7194
    2370:	e3402000 	movt	r2, #0
    2374:	e5823000 	str	r3, [r2]

    volatile int delay_count; // volatile so C compiler doesn't remove the loop

    set_A9_IRQ_stack();            // initialize the stack pointer for IRQ mode
    2378:	eb00002f 	bl	243c <set_A9_IRQ_stack>
    config_GIC();                  // configure the general interrupt controller
    237c:	eb000057 	bl	24e0 <config_GIC>
    config_MPcore_private_timer(); // configure ARM A9 private timer
    2380:	ebffffb5 	bl	225c <config_MPcore_private_timer>
    config_PS2();  // configure PS/2 port to generate interrupts
    2384:	ebffffbb 	bl	2278 <config_PS2>
    init_spim0();
    2388:	eb000079 	bl	2574 <init_spim0>
    init_lcd();
    238c:	eb00008d 	bl	25c8 <init_lcd>

    enable_A9_interrupts(); // enable interrupts
    2390:	eb000030 	bl	2458 <enable_A9_interrupts>

    //Limpia la pantalla
    clear_screen();
    2394:	eb0000c6 	bl	26b4 <clear_screen>

    while (1) 
    {
        //clear_screen();

        while (!timeout); // wait to synchronize with timer
    2398:	e3074194 	movw	r4, #29076	; 0x7194
    239c:	e3404000 	movt	r4, #0

        /* display PS/2 data (from interrupt service routine) on HEX displays */
        HEX_PS2(byte1, byte2, byte3); 
    23a0:	e307719a 	movw	r7, #29082	; 0x719a
    23a4:	e3407000 	movt	r7, #0
    23a8:	e3076199 	movw	r6, #29081	; 0x7199
    23ac:	e3406000 	movt	r6, #0
    23b0:	e3075198 	movw	r5, #29080	; 0x7198
    23b4:	e3405000 	movt	r5, #0

        debugButton();

        timeout = 0;
    23b8:	e3a08000 	mov	r8, #0

    while (1) 
    {
        //clear_screen();

        while (!timeout); // wait to synchronize with timer
    23bc:	e5943000 	ldr	r3, [r4]
    23c0:	e3530000 	cmp	r3, #0
    23c4:	0afffffc 	beq	23bc <main+0x7c>

        /* display PS/2 data (from interrupt service routine) on HEX displays */
        HEX_PS2(byte1, byte2, byte3); 
    23c8:	e5d70000 	ldrb	r0, [r7]
    23cc:	e5d61000 	ldrb	r1, [r6]
    23d0:	e5d52000 	ldrb	r2, [r5]
    23d4:	ebffffae 	bl	2294 <HEX_PS2>

        debugButton();
    23d8:	ebfff7b1 	bl	2a4 <debugButton>

        timeout = 0;
    23dc:	e5848000 	str	r8, [r4]
    }
    23e0:	eafffff5 	b	23bc <main+0x7c>

000023e4 <__cs3_reset>:
void MPcore_private_timer_ISR (void);
void PS2_ISR (void);

// Define the exception handlers here 
void __attribute__ ((interrupt)) __cs3_reset (void)
{
    23e4:	eafffffe 	b	23e4 <__cs3_reset>

000023e8 <__cs3_isr_undef>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
    23e8:	eafffffe 	b	23e8 <__cs3_isr_undef>

000023ec <__cs3_isr_swi>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
    23ec:	eafffffe 	b	23ec <__cs3_isr_swi>

000023f0 <__cs3_isr_pabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
    23f0:	eafffffe 	b	23f0 <__cs3_isr_pabort>

000023f4 <__cs3_isr_dabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
    23f4:	eafffffe 	b	23f4 <__cs3_isr_dabort>

000023f8 <__cs3_isr_irq>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
    23f8:	e24ee004 	sub	lr, lr, #4
    23fc:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
	// Read the ICCIAR from the processor interface 
	int address = MPCORE_GIC_CPUIF + ICCIAR; 
	int int_ID = *((int *) address); 
    2400:	e3e03a13 	mvn	r3, #77824	; 0x13000
    2404:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
   
	if (int_ID == MPCORE_PRIV_TIMER_IRQ)	// check if interrupt is from the private timer
    2408:	e354001d 	cmp	r4, #29
    240c:	1a000001 	bne	2418 <__cs3_isr_irq+0x20>
		MPcore_private_timer_ISR ();
    2410:	eb000041 	bl	251c <MPcore_private_timer_ISR>
    2414:	ea000004 	b	242c <__cs3_isr_irq+0x34>
	else if (int_ID == PS2_IRQ)				// check if interrupt is from the PS/2
    2418:	e354004f 	cmp	r4, #79	; 0x4f
    241c:	1a000001 	bne	2428 <__cs3_isr_irq+0x30>
		PS2_ISR ();
    2420:	ebfff78d 	bl	25c <PS2_ISR>
    2424:	ea000000 	b	242c <__cs3_isr_irq+0x34>
    2428:	eafffffe 	b	2428 <__cs3_isr_irq+0x30>
	else
		while (1);									// if unexpected, then halt

	// Write to the End of Interrupt Register (ICCEOIR)
	address = MPCORE_GIC_CPUIF + ICCEOIR;
	*((int *) address) = int_ID;
    242c:	e3e03a13 	mvn	r3, #77824	; 0x13000
    2430:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
    2434:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

00002438 <__cs3_isr_fiq>:

	return;
} 

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
    2438:	eafffffe 	b	2438 <__cs3_isr_fiq>

0000243c <set_A9_IRQ_stack>:
{
	int stack, mode;
	stack = A9_ONCHIP_END - 7;		// top of A9 onchip memory, aligned to 8 bytes
	/* change processor to IRQ mode with interrupts disabled */
	mode = INT_DISABLE | IRQ_MODE;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    243c:	e3a030d2 	mov	r3, #210	; 0xd2
    2440:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    2444:	e3e03007 	mvn	r3, #7
    2448:	e1a0d003 	mov	sp, r3

	/* go back to SVC mode before executing subroutine return! */
	mode = INT_DISABLE | SVC_MODE;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    244c:	e3a030d3 	mov	r3, #211	; 0xd3
    2450:	e129f003 	msr	CPSR_fc, r3
    2454:	e12fff1e 	bx	lr

00002458 <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
	int status = SVC_MODE | INT_ENABLE;
	asm("msr cpsr,%[ps]" : : [ps]"r"(status));
    2458:	e3a03053 	mov	r3, #83	; 0x53
    245c:	e129f003 	msr	CPSR_fc, r3
    2460:	e12fff1e 	bx	lr

00002464 <hw_write_bits>:
	address = MPCORE_GIC_DIST + addr_offset;
	hw_write_bits((int *) address, 0x1 << (int_ID & 0x1f), value);    
}

void hw_write_bits(volatile int * addr, volatile int unmask, volatile int value)
{     
    2464:	e24dd008 	sub	sp, sp, #8
    2468:	e58d1004 	str	r1, [sp, #4]
    246c:	e58d2000 	str	r2, [sp]
    *addr = ((~unmask) & *addr) | value;
    2470:	e59d1004 	ldr	r1, [sp, #4]
    2474:	e5903000 	ldr	r3, [r0]
    2478:	e59d2000 	ldr	r2, [sp]
    247c:	e1c33001 	bic	r3, r3, r1
    2480:	e1833002 	orr	r3, r3, r2
    2484:	e5803000 	str	r3, [r0]
}
    2488:	e28dd008 	add	sp, sp, #8
    248c:	e12fff1e 	bx	lr

00002490 <config_interrupt>:

/* 
 * Configure registers in the GIC for individual interrupt IDs.
*/
void config_interrupt (int int_ID, int CPU_target)
{
    2490:	e92d4010 	push	{r4, lr}
    2494:	e1a04000 	mov	r4, r0
	 * addr_offet = #ICDIPTR + n
	 * value = CPU_target << ((int_ID & 0x3) * 8)
	 */
	n = (int_ID >> 2) << 2;
	addr_offset = ICDIPTR + n;
	value = CPU_target << ((int_ID & 0x3) << 3);
    2498:	e2003003 	and	r3, r0, #3
    249c:	e1a03183 	lsl	r3, r3, #3
	/* Set Interrupt Processor Targets Register (ICDIPTRn) to cpu0. 
	 * n = integer_div(int_ID / 4) * 4
	 * addr_offet = #ICDIPTR + n
	 * value = CPU_target << ((int_ID & 0x3) * 8)
	 */
	n = (int_ID >> 2) << 2;
    24a0:	e3c00003 	bic	r0, r0, #3
	addr_offset = ICDIPTR + n;
	value = CPU_target << ((int_ID & 0x3) << 3);
    24a4:	e1a02311 	lsl	r2, r1, r3
	
	/* Now that we know the register address and value, we need to set the correct bits in 
	 * the GIC register, without changing the other bits */
	address = MPCORE_GIC_DIST + addr_offset;
	hw_write_bits((int *) address, 0xff << ((int_ID & 0x3) << 3), value);  
    24a8:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
    24ac:	e3a010ff 	mov	r1, #255	; 0xff
    24b0:	e1a01311 	lsl	r1, r1, r3
    24b4:	ebffffea 	bl	2464 <hw_write_bits>
	 * n = (integer_div(in_ID / 32) * 4
	 * addr_offset = 0x100 + n
	 * value = enable << (int_ID & 0x1F) */
	n = (int_ID >> 5) << 2; 
	addr_offset = ICDISER + n;
	value = 0x1 << (int_ID & 0x1f);
    24b8:	e204301f 	and	r3, r4, #31
    24bc:	e3a02001 	mov	r2, #1
    24c0:	e1a02312 	lsl	r2, r2, r3
    
	/* Set Interrupt Set-Enable Registers (ICDISERn). 
	 * n = (integer_div(in_ID / 32) * 4
	 * addr_offset = 0x100 + n
	 * value = enable << (int_ID & 0x1F) */
	n = (int_ID >> 5) << 2; 
    24c4:	e1a002c4 	asr	r0, r4, #5
    24c8:	e1a00100 	lsl	r0, r0, #2
	addr_offset = ICDISER + n;
    24cc:	e2800c01 	add	r0, r0, #256	; 0x100
	value = 0x1 << (int_ID & 0x1f);
	/* Now that we know the register address and value, we need to set the correct bits in 
	 * the GIC register, without changing the other bits */
	address = MPCORE_GIC_DIST + addr_offset;
	hw_write_bits((int *) address, 0x1 << (int_ID & 0x1f), value);    
    24d0:	e2400a13 	sub	r0, r0, #77824	; 0x13000
    24d4:	e1a01002 	mov	r1, r2
    24d8:	ebffffe1 	bl	2464 <hw_write_bits>
    24dc:	e8bd8010 	pop	{r4, pc}

000024e0 <config_GIC>:

/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
void config_GIC(void)
{
    24e0:	e92d4008 	push	{r3, lr}
	int address;	// used to calculate register addresses

	/* enable some examples of interrupts */
  	config_interrupt (MPCORE_PRIV_TIMER_IRQ, CPU0);
    24e4:	e3a0001d 	mov	r0, #29
    24e8:	e3a01001 	mov	r1, #1
    24ec:	ebffffe7 	bl	2490 <config_interrupt>
  	config_interrupt (PS2_IRQ, CPU0);
    24f0:	e3a0004f 	mov	r0, #79	; 0x4f
    24f4:	e3a01001 	mov	r1, #1
    24f8:	ebffffe4 	bl	2490 <config_interrupt>
    
  	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts for lowest priority 
	address = MPCORE_GIC_CPUIF + ICCPMR;
  	*((int *) address) = 0xFFFF;       
    24fc:	e3e02a13 	mvn	r2, #77824	; 0x13000
    2500:	e30f3fff 	movw	r3, #65535	; 0xffff
    2504:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105

  	// Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
	address = MPCORE_GIC_CPUIF + ICCICR;
	*((int *) address) = ENABLE;
    2508:	e3a03001 	mov	r3, #1
    250c:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101

	// Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
	address = MPCORE_GIC_DIST + ICDDCR;
	*((int *) address) = ENABLE;   
    2510:	e3e02a12 	mvn	r2, #73728	; 0x12000
    2514:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
    2518:	e8bd8008 	pop	{r3, pc}

0000251c <MPcore_private_timer_ISR>:
******************************************************************************/
void MPcore_private_timer_ISR( )
{
	volatile int * MPcore_private_timer_ptr = (int *) MPCORE_PRIV_TIMER;	// private timer address

	*(MPcore_private_timer_ptr + 3) = 1;	// Write to timer interrupt status register to
    251c:	e3a02001 	mov	r2, #1
    2520:	e3e03a13 	mvn	r3, #77824	; 0x13000
    2524:	e50329f3 	str	r2, [r3, #-2547]	; 0xfffff60d
														// clear the interrupt (note: not really necessary)

	timeout = 1;									// set global variable
    2528:	e3073194 	movw	r3, #29076	; 0x7194
    252c:	e3403000 	movt	r3, #0
    2530:	e5832000 	str	r2, [r3]
    2534:	e12fff1e 	bx	lr

00002538 <spim_write>:

void spim_write(int data)
{
    volatile int * spim0_sr = (int *) SPIM0_SR;
    volatile int * spim0_dr = (int *) SPIM0_DR;
    while (((*spim0_sr) & 0x4) != 0x4)
    2538:	e3e02aff 	mvn	r2, #1044480	; 0xff000
    253c:	e5123fd7 	ldr	r3, [r2, #-4055]	; 0xfffff029
    2540:	e3130004 	tst	r3, #4
    2544:	0afffffc 	beq	253c <spim_write+0x4>
        ; // check status reg for empty
    (*spim0_dr) = data;
    2548:	e3e03aff 	mvn	r3, #1044480	; 0xff000
    254c:	e5030f9f 	str	r0, [r3, #-3999]	; 0xfffff061
    while (((*spim0_sr) & 0x4) != 0x4)
    2550:	e1a02003 	mov	r2, r3
    2554:	e5123fd7 	ldr	r3, [r2, #-4055]	; 0xfffff029
    2558:	e3130004 	tst	r3, #4
    255c:	0afffffc 	beq	2554 <spim_write+0x1c>
        ; // check fifo is empty
    while (((*spim0_sr) & 0x1) != 0x0)
    2560:	e3e02aff 	mvn	r2, #1044480	; 0xff000
    2564:	e5123fd7 	ldr	r3, [r2, #-4055]	; 0xfffff029
    2568:	e3130001 	tst	r3, #1
    256c:	1afffffc 	bne	2564 <spim_write+0x2c>
        ; // check spim has completed the transfer
}
    2570:	e12fff1e 	bx	lr

00002574 <init_spim0>:
{
    volatile int * rstmgr_premodrst = (int *) HPS_RSTMGR_PREMODRST;
    volatile int * spim0            = (int *) SPIM0_BASE;

    // Take SPIM0 out of reset
    *rstmgr_premodrst = *rstmgr_premodrst & (~0x00040000);
    2574:	e3053fff 	movw	r3, #24575	; 0x5fff
    2578:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    257c:	e5132feb 	ldr	r2, [r3, #-4075]	; 0xfffff015
    2580:	e3c22701 	bic	r2, r2, #262144	; 0x40000
    2584:	e5032feb 	str	r2, [r3, #-4075]	; 0xfffff015

    // Turn SPIM0 OFF
    *(spim0 + 2) = 0x00000000;
    2588:	e3e03aff 	mvn	r3, #1044480	; 0xff000
    258c:	e3a01000 	mov	r1, #0
    2590:	e5031ff7 	str	r1, [r3, #-4087]	; 0xfffff009

    // Put SPIM0 in Tx Only Mode
    *(spim0 + 0) = *(spim0 + 0) & ~0x00000300;
    2594:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    2598:	e3c22c03 	bic	r2, r2, #768	; 0x300
    259c:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
    *(spim0 + 0) = *(spim0 + 0) | 0x00000100;
    25a0:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    25a4:	e3822c01 	orr	r2, r2, #256	; 0x100
    25a8:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001

    // Set SPIM0 BAUD RATE
    *(spim0 + 5) = 0x00000040;
    25ac:	e3a02040 	mov	r2, #64	; 0x40
    25b0:	e5032feb 	str	r2, [r3, #-4075]	; 0xfffff015

    // Set SPIM0 Slave Enable Register
    *(spim0 + 4) = 0x00000001;
    25b4:	e3a02001 	mov	r2, #1
    25b8:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011

    // Turn off interrupts
    *(spim0 + 11) = 0x00000000;
    25bc:	e5031fd3 	str	r1, [r3, #-4051]	; 0xfffff02d

    // Turn SPIM0 ON
    *(spim0 + 2) = 0x00000001;
    25c0:	e5032ff7 	str	r2, [r3, #-4087]	; 0xfffff009
    25c4:	e12fff1e 	bx	lr

000025c8 <init_lcd>:
}

void init_lcd(void)
{
    25c8:	e92d4008 	push	{r3, lr}
    volatile int * gpio1 = (int *) HPS_GPIO1_BASE;
    // Set GPIO1's direction register for the outputs to the LCD
    *(gpio1 + 1) = *(gpio1 + 1) | 0x00009100;
    25cc:	e3093fff 	movw	r3, #40959	; 0x9fff
    25d0:	e34f3f70 	movt	r3, #65392	; 0xff70
    25d4:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
    25d8:	e3822c91 	orr	r2, r2, #37120	; 0x9100
    25dc:	e5032ffb 	str	r2, [r3, #-4091]	; 0xfffff005
    // Turn on the LCD Backlight and take it out of reset
    *(gpio1) = 0x00008100;
    25e0:	e3a02c81 	mov	r2, #33024	; 0x8100
    25e4:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001

    // Initialize LCD's registers
    spim_write(0x000000C8);
    25e8:	e3a000c8 	mov	r0, #200	; 0xc8
    25ec:	ebffffd1 	bl	2538 <spim_write>
    spim_write(0x0000002F);
    25f0:	e3a0002f 	mov	r0, #47	; 0x2f
    25f4:	ebffffcf 	bl	2538 <spim_write>
    spim_write(0x00000040);
    25f8:	e3a00040 	mov	r0, #64	; 0x40
    25fc:	ebffffcd 	bl	2538 <spim_write>
    spim_write(0x000000B0);
    2600:	e3a000b0 	mov	r0, #176	; 0xb0
    2604:	ebffffcb 	bl	2538 <spim_write>
    spim_write(0x00000000);
    2608:	e3a00000 	mov	r0, #0
    260c:	ebffffc9 	bl	2538 <spim_write>
    spim_write(0x00000010);
    2610:	e3a00010 	mov	r0, #16
    2614:	ebffffc7 	bl	2538 <spim_write>
    spim_write(0x000000AF);
    2618:	e3a000af 	mov	r0, #175	; 0xaf
    261c:	ebffffc5 	bl	2538 <spim_write>
    2620:	e8bd8008 	pop	{r3, pc}

00002624 <set_mode>:
 */
void set_mode(int mode)
{
    volatile int * gpio1 = (int *) HPS_GPIO1_BASE;

    if (mode) // Enter command mode
    2624:	e3500000 	cmp	r0, #0
        *(gpio1) = (*gpio1) & (~0x00001000);
    2628:	e3093fff 	movw	r3, #40959	; 0x9fff
    262c:	e34f3f70 	movt	r3, #65392	; 0xff70
    2630:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    2634:	13c22a01 	bicne	r2, r2, #4096	; 0x1000
    else // Enter data mode
        *(gpio1) = (*gpio1) | (0x00001000);
    2638:	03822a01 	orreq	r2, r2, #4096	; 0x1000
    263c:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
    2640:	e12fff1e 	bx	lr

00002644 <refresh_buffer>:

/*
 * Writes the contents of the frame buffer to the LCD display.
 */
void refresh_buffer(void)
{
    2644:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    2648:	e307519c 	movw	r5, #29084	; 0x719c
    264c:	e3405000 	movt	r5, #0
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
    2650:	e3a06000 	mov	r6, #0
    {
        set_mode(1);
    2654:	e3a0a001 	mov	r10, #1

        // Set page address
        spim_write(0x00B0 | i);
        // Set column address
        spim_write(0x0000);
    2658:	e1a07006 	mov	r7, r6
        spim_write(0x0010);
    265c:	e3a08010 	mov	r8, #16
void refresh_buffer(void)
{
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
    {
        set_mode(1);
    2660:	e1a0000a 	mov	r0, r10
    2664:	ebffffee 	bl	2624 <set_mode>

        // Set page address
        spim_write(0x00B0 | i);
    2668:	e38600b0 	orr	r0, r6, #176	; 0xb0
    266c:	ebffffb1 	bl	2538 <spim_write>
        // Set column address
        spim_write(0x0000);
    2670:	e1a00007 	mov	r0, r7
    2674:	ebffffaf 	bl	2538 <spim_write>
        spim_write(0x0010);
    2678:	e1a00008 	mov	r0, r8
    267c:	ebffffad 	bl	2538 <spim_write>

        set_mode(0);
    2680:	e1a00007 	mov	r0, r7
    2684:	ebffffe6 	bl	2624 <set_mode>
        for (j = 0; j < FRAME_WIDTH; j++)
    2688:	e1a04007 	mov	r4, r7
            spim_write(frame_buffer[i][j]);
    268c:	e7d50004 	ldrb	r0, [r5, r4]
    2690:	ebffffa8 	bl	2538 <spim_write>
        // Set column address
        spim_write(0x0000);
        spim_write(0x0010);

        set_mode(0);
        for (j = 0; j < FRAME_WIDTH; j++)
    2694:	e2844001 	add	r4, r4, #1
    2698:	e3540080 	cmp	r4, #128	; 0x80
    269c:	1afffffa 	bne	268c <refresh_buffer+0x48>
 * Writes the contents of the frame buffer to the LCD display.
 */
void refresh_buffer(void)
{
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
    26a0:	e2866001 	add	r6, r6, #1
    26a4:	e2855080 	add	r5, r5, #128	; 0x80
    26a8:	e3560008 	cmp	r6, #8
    26ac:	1affffeb 	bne	2660 <refresh_buffer+0x1c>

        set_mode(0);
        for (j = 0; j < FRAME_WIDTH; j++)
            spim_write(frame_buffer[i][j]);
    }
}
    26b0:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

000026b4 <clear_screen>:

/*
 * Clears the entire LCD display.
 */
void clear_screen(void)
{
    26b4:	e92d4008 	push	{r3, lr}
    26b8:	e307219c 	movw	r2, #29084	; 0x719c
    26bc:	e3402000 	movt	r2, #0
char frame_buffer[8][128];

/*
 * Clears the entire LCD display.
 */
void clear_screen(void)
    26c0:	e2820b01 	add	r0, r2, #1024	; 0x400
{
    26c4:	e3a01000 	mov	r1, #0
    26c8:	ea000006 	b	26e8 <clear_screen+0x34>
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
    {
        for (j = 0; j < FRAME_WIDTH; j++)
        {
            frame_buffer[i][j] = 0;
    26cc:	e7c21003 	strb	r1, [r2, r3]
void clear_screen(void)
{
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
    {
        for (j = 0; j < FRAME_WIDTH; j++)
    26d0:	e2833001 	add	r3, r3, #1
    26d4:	e3530080 	cmp	r3, #128	; 0x80
    26d8:	1afffffb 	bne	26cc <clear_screen+0x18>
    26dc:	e2822080 	add	r2, r2, #128	; 0x80
 * Clears the entire LCD display.
 */
void clear_screen(void)
{
    int i, j;
    for (i = 0; i < FRAME_HEIGHT; i++)
    26e0:	e1520000 	cmp	r2, r0
    26e4:	0a000001 	beq	26f0 <clear_screen+0x3c>

/*
 * Clears the entire LCD display.
 */
void clear_screen(void)
{
    26e8:	e1a03001 	mov	r3, r1
    26ec:	eafffff6 	b	26cc <clear_screen+0x18>
        {
            frame_buffer[i][j] = 0;
        }
    }

    refresh_buffer();
    26f0:	ebffffd3 	bl	2644 <refresh_buffer>
    26f4:	e8bd8008 	pop	{r3, pc}

000026f8 <LCD_line>:
 * length: length of line.
 * color: color of line (0 for white, 1 for black).
 * vert: orientation of line (0 for horizontal, 1 for vertical).
 */
void LCD_line(int x, int y, int length, int color, int vert)
{
    26f8:	e92d0070 	push	{r4, r5, r6}
    int  x_start, x_end, y_start, y_end;
    int  i, page;
    char mask;

        x_start = x;
        x_end   = x + length;
    26fc:	e0802002 	add	r2, r0, r2

        page = y >> 3; // y/8
    2700:	e1a061c1 	asr	r6, r1, #3
        mask = 0x01 << (y % 8);
    2704:	e1a0cfc1 	asr	r12, r1, #31
    2708:	e1a0ceac 	lsr	r12, r12, #29
    270c:	e081400c 	add	r4, r1, r12
    2710:	e2044007 	and	r4, r4, #7
    2714:	e06cc004 	rsb	r12, r12, r4
    2718:	e3a05001 	mov	r5, #1
    271c:	e1a05c15 	lsl	r5, r5, r12
    2720:	e6ef4075 	uxtb	r4, r5
        for (i = x_start; i < x_end; i++)
    2724:	e1500002 	cmp	r0, r2
    2728:	aa00000b 	bge	275c <LCD_line+0x64>
 * y: y coordinate of line start.
 * length: length of line.
 * color: color of line (0 for white, 1 for black).
 * vert: orientation of line (0 for horizontal, 1 for vertical).
 */
void LCD_line(int x, int y, int length, int color, int vert)
    272c:	e307119c 	movw	r1, #29084	; 0x719c
    2730:	e3401000 	movt	r1, #0
    2734:	e0811386 	add	r1, r1, r6, lsl #7
        for (i = x_start; i < x_end; i++)
        {
            if (color)
                frame_buffer[page][i] |= mask;
            else
                frame_buffer[page][i] &= ~mask;
    2738:	e1e05005 	mvn	r5, r5

        page = y >> 3; // y/8
        mask = 0x01 << (y % 8);
        for (i = x_start; i < x_end; i++)
        {
            if (color)
    273c:	e3530000 	cmp	r3, #0
                frame_buffer[page][i] |= mask;
    2740:	e7d1c000 	ldrb	r12, [r1, r0]
    2744:	1184c00c 	orrne	r12, r4, r12
            else
                frame_buffer[page][i] &= ~mask;
    2748:	000cc005 	andeq	r12, r12, r5
    274c:	e7c1c000 	strb	r12, [r1, r0]
        x_start = x;
        x_end   = x + length;

        page = y >> 3; // y/8
        mask = 0x01 << (y % 8);
        for (i = x_start; i < x_end; i++)
    2750:	e2800001 	add	r0, r0, #1
    2754:	e1500002 	cmp	r0, r2
    2758:	1afffff7 	bne	273c <LCD_line+0x44>
            if (color)
                frame_buffer[page][i] |= mask;
            else
                frame_buffer[page][i] &= ~mask;
        }
}
    275c:	e8bd0070 	pop	{r4, r5, r6}
    2760:	e12fff1e 	bx	lr

00002764 <LCD_rect>:
 * height: height of rectangle.
 * color: color of rectangle (o for white, 1 for black).
 * fill: 1 if rectangle should be filled in, 0 to only draw rectangle outline.
 */
void LCD_rect(int x1, int y1, int width, int color)
{
    2764:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
    2768:	e24dd00c 	sub	sp, sp, #12
    276c:	e1a07000 	mov	r7, r0
    2770:	e1a06002 	mov	r6, r2
    2774:	e1a08003 	mov	r8, r3
    int x2 = x1 + width;
    int y2 = y1 + width;
    2778:	e0815002 	add	r5, r1, r2
    int i;

    for (i = y1; i <= y2; i++)
    277c:	e1510005 	cmp	r1, r5
    2780:	ca00000a 	bgt	27b0 <LCD_rect+0x4c>
    2784:	e1a04001 	mov	r4, r1
        LCD_line(x1, i, width, color, 0);
    2788:	e3a0a000 	mov	r10, #0
    278c:	e58da000 	str	r10, [sp]
    2790:	e1a00007 	mov	r0, r7
    2794:	e1a01004 	mov	r1, r4
    2798:	e1a02006 	mov	r2, r6
    279c:	e1a03008 	mov	r3, r8
    27a0:	ebffffd4 	bl	26f8 <LCD_line>
{
    int x2 = x1 + width;
    int y2 = y1 + width;
    int i;

    for (i = y1; i <= y2; i++)
    27a4:	e2844001 	add	r4, r4, #1
    27a8:	e1550004 	cmp	r5, r4
    27ac:	aafffff6 	bge	278c <LCD_rect+0x28>
        LCD_line(x1, i, width, color, 0);
    
}
    27b0:	e28dd00c 	add	sp, sp, #12
    27b4:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, r10, pc}

000027b8 <LCD_text>:
 *
 * str: the string to write.
 * page: the row on the LCD to start writing at.
 */
void LCD_text(char * str, int page)
{
    27b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    27bc:	e1a08000 	mov	r8, r0
    27c0:	e1a07001 	mov	r7, r1
    int i, j, c, offset = 0, len = strlen(str);
    27c4:	eb000067 	bl	2968 <strlen>
    27c8:	e1a09000 	mov	r9, r0
    if (len > (8 - page) * 16)
    27cc:	e2673008 	rsb	r3, r7, #8
    27d0:	e1500203 	cmp	r0, r3, lsl #4
    27d4:	ca000002 	bgt	27e4 <LCD_text+0x2c>
    {
        printf("String is too long for LCD display.\n");
        return;
    }

    for (i = 0; i < len; i++)
    27d8:	e3500000 	cmp	r0, #0
    27dc:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, r10, pc}
    27e0:	ea000007 	b	2804 <LCD_text+0x4c>
void LCD_text(char * str, int page)
{
    int i, j, c, offset = 0, len = strlen(str);
    if (len > (8 - page) * 16)
    {
        printf("String is too long for LCD display.\n");
    27e4:	e3060484 	movw	r0, #25732	; 0x6484
    27e8:	e3400000 	movt	r0, #0
    27ec:	eb000058 	bl	2954 <puts>
        return;
    27f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
    }

    for (i = 0; i < len; i++)
    {
        if (offset >= FRAME_WIDTH)
    27f4:	e355007f 	cmp	r5, #127	; 0x7f
        {
            page++;
    27f8:	c2877001 	addgt	r7, r7, #1
            offset = 0;
    27fc:	c1a05001 	movgt	r5, r1
    2800:	ea000006 	b	2820 <LCD_text+0x68>
    {
        printf("String is too long for LCD display.\n");
        return;
    }

    for (i = 0; i < len; i++)
    2804:	e3a06000 	mov	r6, #0
    2808:	e1a05006 	mov	r5, r6
 * Writes a string to the frame buffer starting at the given row.
 *
 * str: the string to write.
 * page: the row on the LCD to start writing at.
 */
void LCD_text(char * str, int page)
    280c:	e306a520 	movw	r10, #25888	; 0x6520
    2810:	e340a000 	movt	r10, #0
    2814:	e307019c 	movw	r0, #29084	; 0x719c
    2818:	e3400000 	movt	r0, #0
        {
            page++;
            offset = 0;
        }
        c = (unsigned int)str[i];
        for (j                             = 0; j < 8; j++)
    281c:	e1a01006 	mov	r1, r6
 * Writes a string to the frame buffer starting at the given row.
 *
 * str: the string to write.
 * page: the row on the LCD to start writing at.
 */
void LCD_text(char * str, int page)
    2820:	e7d84006 	ldrb	r4, [r8, r6]
    2824:	e08a4184 	add	r4, r10, r4, lsl #3
    2828:	e085c387 	add	r12, r5, r7, lsl #7
    282c:	e080c00c 	add	r12, r0, r12
        {
            page++;
            offset = 0;
        }
        c = (unsigned int)str[i];
        for (j                             = 0; j < 8; j++)
    2830:	e1a03001 	mov	r3, r1
            frame_buffer[page][offset + j] = chars[c][j];
    2834:	e7d42003 	ldrb	r2, [r4, r3]
    2838:	e7cc2003 	strb	r2, [r12, r3]
        {
            page++;
            offset = 0;
        }
        c = (unsigned int)str[i];
        for (j                             = 0; j < 8; j++)
    283c:	e2833001 	add	r3, r3, #1
    2840:	e3530008 	cmp	r3, #8
    2844:	1afffffa 	bne	2834 <LCD_text+0x7c>
            frame_buffer[page][offset + j] = chars[c][j];
        offset += 8;
    2848:	e2855008 	add	r5, r5, #8
    {
        printf("String is too long for LCD display.\n");
        return;
    }

    for (i = 0; i < len; i++)
    284c:	e2866001 	add	r6, r6, #1
    2850:	e1590006 	cmp	r9, r6
    2854:	1affffe6 	bne	27f4 <LCD_text+0x3c>
    2858:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

0000285c <atexit>:
    285c:	e1a01000 	mov	r1, r0
    2860:	e3a00000 	mov	r0, #0
    2864:	e92d4008 	push	{r3, lr}
    2868:	e1a02000 	mov	r2, r0
    286c:	e1a03000 	mov	r3, r0
    2870:	eb000054 	bl	29c8 <__register_exitproc>
    2874:	e8bd4008 	pop	{r3, lr}
    2878:	e12fff1e 	bx	lr

0000287c <exit>:
    287c:	e92d4008 	push	{r3, lr}
    2880:	e3a01000 	mov	r1, #0
    2884:	e1a04000 	mov	r4, r0
    2888:	eb00008b 	bl	2abc <__call_exitprocs>
    288c:	e59f3018 	ldr	r3, [pc, #24]	; 28ac <exit+0x30>
    2890:	e5930000 	ldr	r0, [r3]
    2894:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    2898:	e3530000 	cmp	r3, #0
    289c:	11a0e00f 	movne	lr, pc
    28a0:	112fff13 	bxne	r3
    28a4:	e1a00004 	mov	r0, r4
    28a8:	eb000b4a 	bl	55d8 <_exit>
    28ac:	000064a8 	.word	0x000064a8

000028b0 <_puts_r>:
    28b0:	e92d4030 	push	{r4, r5, lr}
    28b4:	e1a05000 	mov	r5, r0
    28b8:	e24dd024 	sub	sp, sp, #36	; 0x24
    28bc:	e1a00001 	mov	r0, r1
    28c0:	e1a04001 	mov	r4, r1
    28c4:	eb000027 	bl	2968 <strlen>
    28c8:	e59f307c 	ldr	r3, [pc, #124]	; 294c <_puts_r+0x9c>
    28cc:	e5933000 	ldr	r3, [r3]
    28d0:	e1a02000 	mov	r2, r0
    28d4:	e5933008 	ldr	r3, [r3, #8]
    28d8:	e58d2014 	str	r2, [sp, #20]
    28dc:	e59f206c 	ldr	r2, [pc, #108]	; 2950 <_puts_r+0xa0>
    28e0:	e1d310bc 	ldrh	r1, [r3, #12]
    28e4:	e58d2018 	str	r2, [sp, #24]
    28e8:	e3a02001 	mov	r2, #1
    28ec:	e58d201c 	str	r2, [sp, #28]
    28f0:	e28d2010 	add	r2, sp, #16
    28f4:	e3110a02 	tst	r1, #8192	; 0x2000
    28f8:	e58d2004 	str	r2, [sp, #4]
    28fc:	e3a02002 	mov	r2, #2
    2900:	e58d2008 	str	r2, [sp, #8]
    2904:	05932064 	ldreq	r2, [r3, #100]	; 0x64
    2908:	03811a02 	orreq	r1, r1, #8192	; 0x2000
    290c:	03c22a02 	biceq	r2, r2, #8192	; 0x2000
    2910:	e2800001 	add	r0, r0, #1
    2914:	01c310bc 	strheq	r1, [r3, #12]
    2918:	05832064 	streq	r2, [r3, #100]	; 0x64
    291c:	e58d000c 	str	r0, [sp, #12]
    2920:	e5951008 	ldr	r1, [r5, #8]
    2924:	e1a00005 	mov	r0, r5
    2928:	e28d2004 	add	r2, sp, #4
    292c:	e58d4010 	str	r4, [sp, #16]
    2930:	eb0000da 	bl	2ca0 <__sfvwrite_r>
    2934:	e3500000 	cmp	r0, #0
    2938:	03a0000a 	moveq	r0, #10
    293c:	13e00000 	mvnne	r0, #0
    2940:	e28dd024 	add	sp, sp, #36	; 0x24
    2944:	e8bd4030 	pop	{r4, r5, lr}
    2948:	e12fff1e 	bx	lr
    294c:	00006920 	.word	0x00006920
    2950:	000064b0 	.word	0x000064b0

00002954 <puts>:
    2954:	e59f3008 	ldr	r3, [pc, #8]	; 2964 <puts+0x10>
    2958:	e1a01000 	mov	r1, r0
    295c:	e5930000 	ldr	r0, [r3]
    2960:	eaffffd2 	b	28b0 <_puts_r>
    2964:	00006920 	.word	0x00006920

00002968 <strlen>:
    2968:	e3c01003 	bic	r1, r0, #3
    296c:	e2100003 	ands	r0, r0, #3
    2970:	e2600000 	rsb	r0, r0, #0
    2974:	e4913004 	ldr	r3, [r1], #4
    2978:	e280c004 	add	r12, r0, #4
    297c:	e1a0c18c 	lsl	r12, r12, #3
    2980:	e3e02000 	mvn	r2, #0
    2984:	11833c32 	orrne	r3, r3, r2, lsr r12
    2988:	e3a0c001 	mov	r12, #1
    298c:	e18cc40c 	orr	r12, r12, r12, lsl #8
    2990:	e18cc80c 	orr	r12, r12, r12, lsl #16
    2994:	e043200c 	sub	r2, r3, r12
    2998:	e1c22003 	bic	r2, r2, r3
    299c:	e012238c 	ands	r2, r2, r12, lsl #7
    29a0:	04913004 	ldreq	r3, [r1], #4
    29a4:	02800004 	addeq	r0, r0, #4
    29a8:	0afffff9 	beq	2994 <strlen+0x2c>
    29ac:	e31300ff 	tst	r3, #255	; 0xff
    29b0:	12800001 	addne	r0, r0, #1
    29b4:	13130cff 	tstne	r3, #65280	; 0xff00
    29b8:	12800001 	addne	r0, r0, #1
    29bc:	131308ff 	tstne	r3, #16711680	; 0xff0000
    29c0:	12800001 	addne	r0, r0, #1
    29c4:	e12fff1e 	bx	lr

000029c8 <__register_exitproc>:
    29c8:	e59fc0e4 	ldr	r12, [pc, #228]	; 2ab4 <__register_exitproc+0xec>
    29cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    29d0:	e59c4000 	ldr	r4, [r12]
    29d4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    29d8:	e35c0000 	cmp	r12, #0
    29dc:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    29e0:	e59c5004 	ldr	r5, [r12, #4]
    29e4:	0584c148 	streq	r12, [r4, #328]	; 0x148
    29e8:	e355001f 	cmp	r5, #31
    29ec:	e24dd010 	sub	sp, sp, #16
    29f0:	e1a06000 	mov	r6, r0
    29f4:	da000015 	ble	2a50 <__register_exitproc+0x88>
    29f8:	e59f00b8 	ldr	r0, [pc, #184]	; 2ab8 <__register_exitproc+0xf0>
    29fc:	e3500000 	cmp	r0, #0
    2a00:	1a000001 	bne	2a0c <__register_exitproc+0x44>
    2a04:	e3e00000 	mvn	r0, #0
    2a08:	ea000018 	b	2a70 <__register_exitproc+0xa8>
    2a0c:	e3a00e19 	mov	r0, #400	; 0x190
    2a10:	e58d100c 	str	r1, [sp, #12]
    2a14:	e58d2008 	str	r2, [sp, #8]
    2a18:	e58d3004 	str	r3, [sp, #4]
    2a1c:	e320f000 	nop	{0}
    2a20:	e250c000 	subs	r12, r0, #0
    2a24:	e59d100c 	ldr	r1, [sp, #12]
    2a28:	e59d2008 	ldr	r2, [sp, #8]
    2a2c:	e59d3004 	ldr	r3, [sp, #4]
    2a30:	0afffff3 	beq	2a04 <__register_exitproc+0x3c>
    2a34:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    2a38:	e3a00000 	mov	r0, #0
    2a3c:	e58c0004 	str	r0, [r12, #4]
    2a40:	e58c5000 	str	r5, [r12]
    2a44:	e584c148 	str	r12, [r4, #328]	; 0x148
    2a48:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2a4c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2a50:	e3560000 	cmp	r6, #0
    2a54:	e59c4004 	ldr	r4, [r12, #4]
    2a58:	1a000007 	bne	2a7c <__register_exitproc+0xb4>
    2a5c:	e2843002 	add	r3, r4, #2
    2a60:	e2844001 	add	r4, r4, #1
    2a64:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2a68:	e58c4004 	str	r4, [r12, #4]
    2a6c:	e3a00000 	mov	r0, #0
    2a70:	e28dd010 	add	sp, sp, #16
    2a74:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2a78:	e12fff1e 	bx	lr
    2a7c:	e3a00001 	mov	r0, #1
    2a80:	e1a00410 	lsl	r0, r0, r4
    2a84:	e08c8104 	add	r8, r12, r4, lsl #2
    2a88:	e3560002 	cmp	r6, #2
    2a8c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2a90:	e5883108 	str	r3, [r8, #264]	; 0x108
    2a94:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2a98:	e1877000 	orr	r7, r7, r0
    2a9c:	01830000 	orreq	r0, r3, r0
    2aa0:	e1a05008 	mov	r5, r8
    2aa4:	e5882088 	str	r2, [r8, #136]	; 0x88
    2aa8:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2aac:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2ab0:	eaffffe9 	b	2a5c <__register_exitproc+0x94>
    2ab4:	000064a8 	.word	0x000064a8
    2ab8:	00000000 	.word	0x00000000

00002abc <__call_exitprocs>:
    2abc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2ac0:	e59f3168 	ldr	r3, [pc, #360]	; 2c30 <__call_exitprocs+0x174>
    2ac4:	e5933000 	ldr	r3, [r3]
    2ac8:	e24dd014 	sub	sp, sp, #20
    2acc:	e58d3004 	str	r3, [sp, #4]
    2ad0:	e2833f52 	add	r3, r3, #328	; 0x148
    2ad4:	e58d0008 	str	r0, [sp, #8]
    2ad8:	e58d300c 	str	r3, [sp, #12]
    2adc:	e1a07001 	mov	r7, r1
    2ae0:	e3a08001 	mov	r8, #1
    2ae4:	e59d3004 	ldr	r3, [sp, #4]
    2ae8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    2aec:	e3560000 	cmp	r6, #0
    2af0:	e59db00c 	ldr	r11, [sp, #12]
    2af4:	0a000033 	beq	2bc8 <__call_exitprocs+0x10c>
    2af8:	e5965004 	ldr	r5, [r6, #4]
    2afc:	e2554001 	subs	r4, r5, #1
    2b00:	5286a088 	addpl	r10, r6, #136	; 0x88
    2b04:	5285501f 	addpl	r5, r5, #31
    2b08:	508a5105 	addpl	r5, r10, r5, lsl #2
    2b0c:	5a000007 	bpl	2b30 <__call_exitprocs+0x74>
    2b10:	ea000029 	b	2bbc <__call_exitprocs+0x100>
    2b14:	e5953000 	ldr	r3, [r5]
    2b18:	e1530007 	cmp	r3, r7
    2b1c:	0a000005 	beq	2b38 <__call_exitprocs+0x7c>
    2b20:	e2444001 	sub	r4, r4, #1
    2b24:	e3740001 	cmn	r4, #1
    2b28:	e2455004 	sub	r5, r5, #4
    2b2c:	0a000022 	beq	2bbc <__call_exitprocs+0x100>
    2b30:	e3570000 	cmp	r7, #0
    2b34:	1afffff6 	bne	2b14 <__call_exitprocs+0x58>
    2b38:	e5963004 	ldr	r3, [r6, #4]
    2b3c:	e06a2005 	rsb	r2, r10, r5
    2b40:	e2433001 	sub	r3, r3, #1
    2b44:	e0862002 	add	r2, r6, r2
    2b48:	e1530004 	cmp	r3, r4
    2b4c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2b50:	13a01000 	movne	r1, #0
    2b54:	05864004 	streq	r4, [r6, #4]
    2b58:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2b5c:	e3530000 	cmp	r3, #0
    2b60:	0affffee 	beq	2b20 <__call_exitprocs+0x64>
    2b64:	e1a02418 	lsl	r2, r8, r4
    2b68:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2b6c:	e1120001 	tst	r2, r1
    2b70:	e5969004 	ldr	r9, [r6, #4]
    2b74:	0a000016 	beq	2bd4 <__call_exitprocs+0x118>
    2b78:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2b7c:	e1120001 	tst	r2, r1
    2b80:	1a000016 	bne	2be0 <__call_exitprocs+0x124>
    2b84:	e59d0008 	ldr	r0, [sp, #8]
    2b88:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2b8c:	e1a0e00f 	mov	lr, pc
    2b90:	e12fff13 	bx	r3
    2b94:	e5963004 	ldr	r3, [r6, #4]
    2b98:	e1530009 	cmp	r3, r9
    2b9c:	1affffd0 	bne	2ae4 <__call_exitprocs+0x28>
    2ba0:	e59b3000 	ldr	r3, [r11]
    2ba4:	e1530006 	cmp	r3, r6
    2ba8:	1affffcd 	bne	2ae4 <__call_exitprocs+0x28>
    2bac:	e2444001 	sub	r4, r4, #1
    2bb0:	e3740001 	cmn	r4, #1
    2bb4:	e2455004 	sub	r5, r5, #4
    2bb8:	1affffdc 	bne	2b30 <__call_exitprocs+0x74>
    2bbc:	e59f1070 	ldr	r1, [pc, #112]	; 2c34 <__call_exitprocs+0x178>
    2bc0:	e3510000 	cmp	r1, #0
    2bc4:	1a000009 	bne	2bf0 <__call_exitprocs+0x134>
    2bc8:	e28dd014 	add	sp, sp, #20
    2bcc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2bd0:	e12fff1e 	bx	lr
    2bd4:	e1a0e00f 	mov	lr, pc
    2bd8:	e12fff13 	bx	r3
    2bdc:	eaffffec 	b	2b94 <__call_exitprocs+0xd8>
    2be0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    2be4:	e1a0e00f 	mov	lr, pc
    2be8:	e12fff13 	bx	r3
    2bec:	eaffffe8 	b	2b94 <__call_exitprocs+0xd8>
    2bf0:	e5963004 	ldr	r3, [r6, #4]
    2bf4:	e3530000 	cmp	r3, #0
    2bf8:	e5963000 	ldr	r3, [r6]
    2bfc:	1a000008 	bne	2c24 <__call_exitprocs+0x168>
    2c00:	e3530000 	cmp	r3, #0
    2c04:	0a000006 	beq	2c24 <__call_exitprocs+0x168>
    2c08:	e1a00006 	mov	r0, r6
    2c0c:	e58b3000 	str	r3, [r11]
    2c10:	e320f000 	nop	{0}
    2c14:	e59b6000 	ldr	r6, [r11]
    2c18:	e3560000 	cmp	r6, #0
    2c1c:	1affffb5 	bne	2af8 <__call_exitprocs+0x3c>
    2c20:	eaffffe8 	b	2bc8 <__call_exitprocs+0x10c>
    2c24:	e1a0b006 	mov	r11, r6
    2c28:	e1a06003 	mov	r6, r3
    2c2c:	eafffff9 	b	2c18 <__call_exitprocs+0x15c>
    2c30:	000064a8 	.word	0x000064a8
    2c34:	00000000 	.word	0x00000000

00002c38 <register_fini>:
    2c38:	e92d4008 	push	{r3, lr}
    2c3c:	e59f3010 	ldr	r3, [pc, #16]	; 2c54 <register_fini+0x1c>
    2c40:	e3530000 	cmp	r3, #0
    2c44:	159f000c 	ldrne	r0, [pc, #12]	; 2c58 <register_fini+0x20>
    2c48:	1bffff03 	blne	285c <atexit>
    2c4c:	e8bd4008 	pop	{r3, lr}
    2c50:	e12fff1e 	bx	lr
    2c54:	000064dc 	.word	0x000064dc
    2c58:	00002c5c 	.word	0x00002c5c

00002c5c <__libc_fini_array>:
    2c5c:	e92d4038 	push	{r3, r4, r5, lr}
    2c60:	e59f5030 	ldr	r5, [pc, #48]	; 2c98 <__libc_fini_array+0x3c>
    2c64:	e59f4030 	ldr	r4, [pc, #48]	; 2c9c <__libc_fini_array+0x40>
    2c68:	e0654004 	rsb	r4, r5, r4
    2c6c:	e1b04144 	asrs	r4, r4, #2
    2c70:	10855104 	addne	r5, r5, r4, lsl #2
    2c74:	0a000004 	beq	2c8c <__libc_fini_array+0x30>
    2c78:	e5353004 	ldr	r3, [r5, #-4]!
    2c7c:	e1a0e00f 	mov	lr, pc
    2c80:	e12fff13 	bx	r3
    2c84:	e2544001 	subs	r4, r4, #1
    2c88:	1afffffa 	bne	2c78 <__libc_fini_array+0x1c>
    2c8c:	eb000e12 	bl	64dc <__libc_fini>
    2c90:	e8bd4038 	pop	{r3, r4, r5, lr}
    2c94:	e12fff1e 	bx	lr
    2c98:	000064f4 	.word	0x000064f4
    2c9c:	000064f8 	.word	0x000064f8

00002ca0 <__sfvwrite_r>:
    2ca0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2ca4:	e5923008 	ldr	r3, [r2, #8]
    2ca8:	e3530000 	cmp	r3, #0
    2cac:	e24dd00c 	sub	sp, sp, #12
    2cb0:	e1a07002 	mov	r7, r2
    2cb4:	e1a0a000 	mov	r10, r0
    2cb8:	e1a04001 	mov	r4, r1
    2cbc:	0a00001e 	beq	2d3c <__sfvwrite_r+0x9c>
    2cc0:	e1d130bc 	ldrh	r3, [r1, #12]
    2cc4:	e3130008 	tst	r3, #8
    2cc8:	0a00001f 	beq	2d4c <__sfvwrite_r+0xac>
    2ccc:	e5912010 	ldr	r2, [r1, #16]
    2cd0:	e3520000 	cmp	r2, #0
    2cd4:	0a00001c 	beq	2d4c <__sfvwrite_r+0xac>
    2cd8:	e2132002 	ands	r2, r3, #2
    2cdc:	e5975000 	ldr	r5, [r7]
    2ce0:	0a000029 	beq	2d8c <__sfvwrite_r+0xec>
    2ce4:	e3a08000 	mov	r8, #0
    2ce8:	e1a06008 	mov	r6, r8
    2cec:	e3560000 	cmp	r6, #0
    2cf0:	e1a02008 	mov	r2, r8
    2cf4:	e1a0000a 	mov	r0, r10
    2cf8:	0a00001f 	beq	2d7c <__sfvwrite_r+0xdc>
    2cfc:	e3560b01 	cmp	r6, #1024	; 0x400
    2d00:	31a03006 	movcc	r3, r6
    2d04:	23a03b01 	movcs	r3, #1024	; 0x400
    2d08:	e594101c 	ldr	r1, [r4, #28]
    2d0c:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    2d10:	e1a0e00f 	mov	lr, pc
    2d14:	e12fff1c 	bx	r12
    2d18:	e3500000 	cmp	r0, #0
    2d1c:	da000050 	ble	2e64 <__sfvwrite_r+0x1c4>
    2d20:	e5973008 	ldr	r3, [r7, #8]
    2d24:	e0603003 	rsb	r3, r0, r3
    2d28:	e3530000 	cmp	r3, #0
    2d2c:	e0888000 	add	r8, r8, r0
    2d30:	e0606006 	rsb	r6, r0, r6
    2d34:	e5873008 	str	r3, [r7, #8]
    2d38:	1affffeb 	bne	2cec <__sfvwrite_r+0x4c>
    2d3c:	e3a00000 	mov	r0, #0
    2d40:	e28dd00c 	add	sp, sp, #12
    2d44:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2d48:	e12fff1e 	bx	lr
    2d4c:	e1a0000a 	mov	r0, r10
    2d50:	e1a01004 	mov	r1, r4
    2d54:	eb00054f 	bl	4298 <__swsetup_r>
    2d58:	e3500000 	cmp	r0, #0
    2d5c:	e1d430bc 	ldrh	r3, [r4, #12]
    2d60:	0affffdc 	beq	2cd8 <__sfvwrite_r+0x38>
    2d64:	e3833040 	orr	r3, r3, #64	; 0x40
    2d68:	e1c430bc 	strh	r3, [r4, #12]
    2d6c:	e3a03009 	mov	r3, #9
    2d70:	e3e00000 	mvn	r0, #0
    2d74:	e58a3000 	str	r3, [r10]
    2d78:	eafffff0 	b	2d40 <__sfvwrite_r+0xa0>
    2d7c:	e5958000 	ldr	r8, [r5]
    2d80:	e5956004 	ldr	r6, [r5, #4]
    2d84:	e2855008 	add	r5, r5, #8
    2d88:	eaffffd7 	b	2cec <__sfvwrite_r+0x4c>
    2d8c:	e2139001 	ands	r9, r3, #1
    2d90:	1a000038 	bne	2e78 <__sfvwrite_r+0x1d8>
    2d94:	e1a06009 	mov	r6, r9
    2d98:	e3560000 	cmp	r6, #0
    2d9c:	0a000024 	beq	2e34 <__sfvwrite_r+0x194>
    2da0:	e3130c02 	tst	r3, #512	; 0x200
    2da4:	e5948008 	ldr	r8, [r4, #8]
    2da8:	e1a02003 	mov	r2, r3
    2dac:	0a000062 	beq	2f3c <__sfvwrite_r+0x29c>
    2db0:	e1560008 	cmp	r6, r8
    2db4:	e1a0c008 	mov	r12, r8
    2db8:	3a000089 	bcc	2fe4 <__sfvwrite_r+0x344>
    2dbc:	e2022d12 	and	r2, r2, #1152	; 0x480
    2dc0:	e3520000 	cmp	r2, #0
    2dc4:	1a0000a2 	bne	3054 <__sfvwrite_r+0x3b4>
    2dc8:	e5940000 	ldr	r0, [r4]
    2dcc:	e1a0b008 	mov	r11, r8
    2dd0:	e1a03006 	mov	r3, r6
    2dd4:	e1a08006 	mov	r8, r6
    2dd8:	e1a0200c 	mov	r2, r12
    2ddc:	e1a01009 	mov	r1, r9
    2de0:	e58d3004 	str	r3, [sp, #4]
    2de4:	e58dc000 	str	r12, [sp]
    2de8:	eb00036e 	bl	3ba8 <memmove>
    2dec:	e59dc000 	ldr	r12, [sp]
    2df0:	e5941008 	ldr	r1, [r4, #8]
    2df4:	e5942000 	ldr	r2, [r4]
    2df8:	e06bb001 	rsb	r11, r11, r1
    2dfc:	e082c00c 	add	r12, r2, r12
    2e00:	e584b008 	str	r11, [r4, #8]
    2e04:	e584c000 	str	r12, [r4]
    2e08:	e59d3004 	ldr	r3, [sp, #4]
    2e0c:	e5972008 	ldr	r2, [r7, #8]
    2e10:	e0688002 	rsb	r8, r8, r2
    2e14:	e3580000 	cmp	r8, #0
    2e18:	e0899003 	add	r9, r9, r3
    2e1c:	e0636006 	rsb	r6, r3, r6
    2e20:	e5878008 	str	r8, [r7, #8]
    2e24:	0affffc4 	beq	2d3c <__sfvwrite_r+0x9c>
    2e28:	e3560000 	cmp	r6, #0
    2e2c:	e1d430bc 	ldrh	r3, [r4, #12]
    2e30:	1affffda 	bne	2da0 <__sfvwrite_r+0x100>
    2e34:	e5959000 	ldr	r9, [r5]
    2e38:	e5956004 	ldr	r6, [r5, #4]
    2e3c:	e2855008 	add	r5, r5, #8
    2e40:	eaffffd4 	b	2d98 <__sfvwrite_r+0xf8>
    2e44:	eb0003a6 	bl	3ce4 <_realloc_r>
    2e48:	e2503000 	subs	r3, r0, #0
    2e4c:	1a00009d 	bne	30c8 <__sfvwrite_r+0x428>
    2e50:	e1a0000a 	mov	r0, r10
    2e54:	e5941010 	ldr	r1, [r4, #16]
    2e58:	eb0006e7 	bl	49fc <_free_r>
    2e5c:	e3a0300c 	mov	r3, #12
    2e60:	e58a3000 	str	r3, [r10]
    2e64:	e1d430bc 	ldrh	r3, [r4, #12]
    2e68:	e3833040 	orr	r3, r3, #64	; 0x40
    2e6c:	e1c430bc 	strh	r3, [r4, #12]
    2e70:	e3e00000 	mvn	r0, #0
    2e74:	eaffffb1 	b	2d40 <__sfvwrite_r+0xa0>
    2e78:	e1a09002 	mov	r9, r2
    2e7c:	e1a0c002 	mov	r12, r2
    2e80:	e1a0b002 	mov	r11, r2
    2e84:	e1a08002 	mov	r8, r2
    2e88:	e3580000 	cmp	r8, #0
    2e8c:	0a000025 	beq	2f28 <__sfvwrite_r+0x288>
    2e90:	e35c0000 	cmp	r12, #0
    2e94:	0a000064 	beq	302c <__sfvwrite_r+0x38c>
    2e98:	e5940000 	ldr	r0, [r4]
    2e9c:	e5942010 	ldr	r2, [r4, #16]
    2ea0:	e1590008 	cmp	r9, r8
    2ea4:	31a03009 	movcc	r3, r9
    2ea8:	21a03008 	movcs	r3, r8
    2eac:	e1500002 	cmp	r0, r2
    2eb0:	e5946008 	ldr	r6, [r4, #8]
    2eb4:	e594e014 	ldr	lr, [r4, #20]
    2eb8:	9a000002 	bls	2ec8 <__sfvwrite_r+0x228>
    2ebc:	e086600e 	add	r6, r6, lr
    2ec0:	e1530006 	cmp	r3, r6
    2ec4:	ca00008a 	bgt	30f4 <__sfvwrite_r+0x454>
    2ec8:	e153000e 	cmp	r3, lr
    2ecc:	ba00002d 	blt	2f88 <__sfvwrite_r+0x2e8>
    2ed0:	e594101c 	ldr	r1, [r4, #28]
    2ed4:	e1a0000a 	mov	r0, r10
    2ed8:	e58dc000 	str	r12, [sp]
    2edc:	e1a0200b 	mov	r2, r11
    2ee0:	e1a0300e 	mov	r3, lr
    2ee4:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    2ee8:	e1a0e00f 	mov	lr, pc
    2eec:	e12fff1c 	bx	r12
    2ef0:	e2506000 	subs	r6, r0, #0
    2ef4:	e59dc000 	ldr	r12, [sp]
    2ef8:	daffffd9 	ble	2e64 <__sfvwrite_r+0x1c4>
    2efc:	e0599006 	subs	r9, r9, r6
    2f00:	0a000030 	beq	2fc8 <__sfvwrite_r+0x328>
    2f04:	e5973008 	ldr	r3, [r7, #8]
    2f08:	e0663003 	rsb	r3, r6, r3
    2f0c:	e3530000 	cmp	r3, #0
    2f10:	e08bb006 	add	r11, r11, r6
    2f14:	e0668008 	rsb	r8, r6, r8
    2f18:	e5873008 	str	r3, [r7, #8]
    2f1c:	0affff86 	beq	2d3c <__sfvwrite_r+0x9c>
    2f20:	e3580000 	cmp	r8, #0
    2f24:	1affffd9 	bne	2e90 <__sfvwrite_r+0x1f0>
    2f28:	e595b000 	ldr	r11, [r5]
    2f2c:	e5958004 	ldr	r8, [r5, #4]
    2f30:	e3a0c000 	mov	r12, #0
    2f34:	e2855008 	add	r5, r5, #8
    2f38:	eaffffd2 	b	2e88 <__sfvwrite_r+0x1e8>
    2f3c:	e5940000 	ldr	r0, [r4]
    2f40:	e5943010 	ldr	r3, [r4, #16]
    2f44:	e1500003 	cmp	r0, r3
    2f48:	9a000001 	bls	2f54 <__sfvwrite_r+0x2b4>
    2f4c:	e1560008 	cmp	r6, r8
    2f50:	8a000075 	bhi	312c <__sfvwrite_r+0x48c>
    2f54:	e5943014 	ldr	r3, [r4, #20]
    2f58:	e1560003 	cmp	r6, r3
    2f5c:	3a000026 	bcc	2ffc <__sfvwrite_r+0x35c>
    2f60:	e1a0000a 	mov	r0, r10
    2f64:	e594101c 	ldr	r1, [r4, #28]
    2f68:	e1a02009 	mov	r2, r9
    2f6c:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    2f70:	e1a0e00f 	mov	lr, pc
    2f74:	e12fff1c 	bx	r12
    2f78:	e2508000 	subs	r8, r0, #0
    2f7c:	daffffb8 	ble	2e64 <__sfvwrite_r+0x1c4>
    2f80:	e1a03008 	mov	r3, r8
    2f84:	eaffffa0 	b	2e0c <__sfvwrite_r+0x16c>
    2f88:	e1a02003 	mov	r2, r3
    2f8c:	e1a0100b 	mov	r1, r11
    2f90:	e58d3004 	str	r3, [sp, #4]
    2f94:	e58dc000 	str	r12, [sp]
    2f98:	eb000302 	bl	3ba8 <memmove>
    2f9c:	e59d3004 	ldr	r3, [sp, #4]
    2fa0:	e5941008 	ldr	r1, [r4, #8]
    2fa4:	e5942000 	ldr	r2, [r4]
    2fa8:	e1a06003 	mov	r6, r3
    2fac:	e0631001 	rsb	r1, r3, r1
    2fb0:	e0822003 	add	r2, r2, r3
    2fb4:	e0599006 	subs	r9, r9, r6
    2fb8:	e5841008 	str	r1, [r4, #8]
    2fbc:	e5842000 	str	r2, [r4]
    2fc0:	e59dc000 	ldr	r12, [sp]
    2fc4:	1affffce 	bne	2f04 <__sfvwrite_r+0x264>
    2fc8:	e1a0000a 	mov	r0, r10
    2fcc:	e1a01004 	mov	r1, r4
    2fd0:	eb0004fe 	bl	43d0 <_fflush_r>
    2fd4:	e3500000 	cmp	r0, #0
    2fd8:	1affffa1 	bne	2e64 <__sfvwrite_r+0x1c4>
    2fdc:	e1a0c009 	mov	r12, r9
    2fe0:	eaffffc7 	b	2f04 <__sfvwrite_r+0x264>
    2fe4:	e5940000 	ldr	r0, [r4]
    2fe8:	e1a0b006 	mov	r11, r6
    2fec:	e1a03006 	mov	r3, r6
    2ff0:	e1a08006 	mov	r8, r6
    2ff4:	e1a0c006 	mov	r12, r6
    2ff8:	eaffff76 	b	2dd8 <__sfvwrite_r+0x138>
    2ffc:	e1a02006 	mov	r2, r6
    3000:	e1a01009 	mov	r1, r9
    3004:	eb0002e7 	bl	3ba8 <memmove>
    3008:	e5942008 	ldr	r2, [r4, #8]
    300c:	e5943000 	ldr	r3, [r4]
    3010:	e0662002 	rsb	r2, r6, r2
    3014:	e0833006 	add	r3, r3, r6
    3018:	e5843000 	str	r3, [r4]
    301c:	e5842008 	str	r2, [r4, #8]
    3020:	e1a08006 	mov	r8, r6
    3024:	e1a03006 	mov	r3, r6
    3028:	eaffff77 	b	2e0c <__sfvwrite_r+0x16c>
    302c:	e1a0000b 	mov	r0, r11
    3030:	e3a0100a 	mov	r1, #10
    3034:	e1a02008 	mov	r2, r8
    3038:	eb000210 	bl	3880 <memchr>
    303c:	e3500000 	cmp	r0, #0
    3040:	12809001 	addne	r9, r0, #1
    3044:	106b9009 	rsbne	r9, r11, r9
    3048:	02889001 	addeq	r9, r8, #1
    304c:	e3a0c001 	mov	r12, #1
    3050:	eaffff90 	b	2e98 <__sfvwrite_r+0x1f8>
    3054:	e5941010 	ldr	r1, [r4, #16]
    3058:	e594b000 	ldr	r11, [r4]
    305c:	e5948014 	ldr	r8, [r4, #20]
    3060:	e061b00b 	rsb	r11, r1, r11
    3064:	e0888088 	add	r8, r8, r8, lsl #1
    3068:	e0888fa8 	add	r8, r8, r8, lsr #31
    306c:	e28b0001 	add	r0, r11, #1
    3070:	e1a080c8 	asr	r8, r8, #1
    3074:	e0800006 	add	r0, r0, r6
    3078:	e1580000 	cmp	r8, r0
    307c:	e1a02008 	mov	r2, r8
    3080:	31a08000 	movcc	r8, r0
    3084:	31a02008 	movcc	r2, r8
    3088:	e3130b01 	tst	r3, #1024	; 0x400
    308c:	e1a0000a 	mov	r0, r10
    3090:	0affff6b 	beq	2e44 <__sfvwrite_r+0x1a4>
    3094:	e1a01002 	mov	r1, r2
    3098:	eb000031 	bl	3164 <_malloc_r>
    309c:	e2503000 	subs	r3, r0, #0
    30a0:	0affff6d 	beq	2e5c <__sfvwrite_r+0x1bc>
    30a4:	e5941010 	ldr	r1, [r4, #16]
    30a8:	e1a0200b 	mov	r2, r11
    30ac:	e58d3004 	str	r3, [sp, #4]
    30b0:	eb000239 	bl	399c <memcpy>
    30b4:	e1d420bc 	ldrh	r2, [r4, #12]
    30b8:	e3c22d12 	bic	r2, r2, #1152	; 0x480
    30bc:	e3822080 	orr	r2, r2, #128	; 0x80
    30c0:	e1c420bc 	strh	r2, [r4, #12]
    30c4:	e59d3004 	ldr	r3, [sp, #4]
    30c8:	e083000b 	add	r0, r3, r11
    30cc:	e06b2008 	rsb	r2, r11, r8
    30d0:	e5843010 	str	r3, [r4, #16]
    30d4:	e5848014 	str	r8, [r4, #20]
    30d8:	e5840000 	str	r0, [r4]
    30dc:	e1a0b006 	mov	r11, r6
    30e0:	e5842008 	str	r2, [r4, #8]
    30e4:	e1a03006 	mov	r3, r6
    30e8:	e1a08006 	mov	r8, r6
    30ec:	e1a0c006 	mov	r12, r6
    30f0:	eaffff38 	b	2dd8 <__sfvwrite_r+0x138>
    30f4:	e1a0100b 	mov	r1, r11
    30f8:	e1a02006 	mov	r2, r6
    30fc:	e58dc000 	str	r12, [sp]
    3100:	eb0002a8 	bl	3ba8 <memmove>
    3104:	e5943000 	ldr	r3, [r4]
    3108:	e0833006 	add	r3, r3, r6
    310c:	e5843000 	str	r3, [r4]
    3110:	e1a0000a 	mov	r0, r10
    3114:	e1a01004 	mov	r1, r4
    3118:	eb0004ac 	bl	43d0 <_fflush_r>
    311c:	e3500000 	cmp	r0, #0
    3120:	e59dc000 	ldr	r12, [sp]
    3124:	0affff74 	beq	2efc <__sfvwrite_r+0x25c>
    3128:	eaffff4d 	b	2e64 <__sfvwrite_r+0x1c4>
    312c:	e1a01009 	mov	r1, r9
    3130:	e1a02008 	mov	r2, r8
    3134:	e58d8004 	str	r8, [sp, #4]
    3138:	eb00029a 	bl	3ba8 <memmove>
    313c:	e5942000 	ldr	r2, [r4]
    3140:	e0822008 	add	r2, r2, r8
    3144:	e5842000 	str	r2, [r4]
    3148:	e1a0000a 	mov	r0, r10
    314c:	e1a01004 	mov	r1, r4
    3150:	eb00049e 	bl	43d0 <_fflush_r>
    3154:	e3500000 	cmp	r0, #0
    3158:	e59d3004 	ldr	r3, [sp, #4]
    315c:	0affff2a 	beq	2e0c <__sfvwrite_r+0x16c>
    3160:	eaffff3f 	b	2e64 <__sfvwrite_r+0x1c4>

00003164 <_malloc_r>:
    3164:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3168:	e281500b 	add	r5, r1, #11
    316c:	e3550016 	cmp	r5, #22
    3170:	83c55007 	bichi	r5, r5, #7
    3174:	81a03fa5 	lsrhi	r3, r5, #31
    3178:	93a03000 	movls	r3, #0
    317c:	93a05010 	movls	r5, #16
    3180:	e1550001 	cmp	r5, r1
    3184:	21a01003 	movcs	r1, r3
    3188:	33831001 	orrcc	r1, r3, #1
    318c:	e3510000 	cmp	r1, #0
    3190:	13a0300c 	movne	r3, #12
    3194:	e24dd00c 	sub	sp, sp, #12
    3198:	e1a06000 	mov	r6, r0
    319c:	15803000 	strne	r3, [r0]
    31a0:	13a04000 	movne	r4, #0
    31a4:	1a000015 	bne	3200 <_malloc_r+0x9c>
    31a8:	eb0002cb 	bl	3cdc <__malloc_lock>
    31ac:	e3550f7e 	cmp	r5, #504	; 0x1f8
    31b0:	2a000016 	bcs	3210 <_malloc_r+0xac>
    31b4:	e59f76b8 	ldr	r7, [pc, #1720]	; 3874 <_malloc_r+0x710>
    31b8:	e1a0e1a5 	lsr	lr, r5, #3
    31bc:	e087318e 	add	r3, r7, lr, lsl #3
    31c0:	e593400c 	ldr	r4, [r3, #12]
    31c4:	e1540003 	cmp	r4, r3
    31c8:	0a00014b 	beq	36fc <_malloc_r+0x598>
    31cc:	e5943004 	ldr	r3, [r4, #4]
    31d0:	e3c33003 	bic	r3, r3, #3
    31d4:	e0843003 	add	r3, r4, r3
    31d8:	e5930004 	ldr	r0, [r3, #4]
    31dc:	e2841008 	add	r1, r4, #8
    31e0:	e8910006 	ldm	r1, {r1, r2}
    31e4:	e3800001 	orr	r0, r0, #1
    31e8:	e5830004 	str	r0, [r3, #4]
    31ec:	e581200c 	str	r2, [r1, #12]
    31f0:	e5821008 	str	r1, [r2, #8]
    31f4:	e1a00006 	mov	r0, r6
    31f8:	eb0002b8 	bl	3ce0 <__malloc_unlock>
    31fc:	e2844008 	add	r4, r4, #8
    3200:	e1a00004 	mov	r0, r4
    3204:	e28dd00c 	add	sp, sp, #12
    3208:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    320c:	e12fff1e 	bx	lr
    3210:	e1b0e4a5 	lsrs	lr, r5, #9
    3214:	01a0e1a5 	lsreq	lr, r5, #3
    3218:	01a0108e 	lsleq	r1, lr, #1
    321c:	1a000061 	bne	33a8 <_malloc_r+0x244>
    3220:	e59f764c 	ldr	r7, [pc, #1612]	; 3874 <_malloc_r+0x710>
    3224:	e0871101 	add	r1, r7, r1, lsl #2
    3228:	e591400c 	ldr	r4, [r1, #12]
    322c:	e1510004 	cmp	r1, r4
    3230:	1a000005 	bne	324c <_malloc_r+0xe8>
    3234:	ea00000a 	b	3264 <_malloc_r+0x100>
    3238:	e3530000 	cmp	r3, #0
    323c:	aa0000d7 	bge	35a0 <_malloc_r+0x43c>
    3240:	e594400c 	ldr	r4, [r4, #12]
    3244:	e1510004 	cmp	r1, r4
    3248:	0a000005 	beq	3264 <_malloc_r+0x100>
    324c:	e5942004 	ldr	r2, [r4, #4]
    3250:	e3c22003 	bic	r2, r2, #3
    3254:	e0653002 	rsb	r3, r5, r2
    3258:	e353000f 	cmp	r3, #15
    325c:	dafffff5 	ble	3238 <_malloc_r+0xd4>
    3260:	e24ee001 	sub	lr, lr, #1
    3264:	e28ee001 	add	lr, lr, #1
    3268:	e59f3604 	ldr	r3, [pc, #1540]	; 3874 <_malloc_r+0x710>
    326c:	e5974010 	ldr	r4, [r7, #16]
    3270:	e2838008 	add	r8, r3, #8
    3274:	e1540008 	cmp	r4, r8
    3278:	05931004 	ldreq	r1, [r3, #4]
    327c:	0a000016 	beq	32dc <_malloc_r+0x178>
    3280:	e5942004 	ldr	r2, [r4, #4]
    3284:	e3c22003 	bic	r2, r2, #3
    3288:	e0651002 	rsb	r1, r5, r2
    328c:	e351000f 	cmp	r1, #15
    3290:	ca0000f7 	bgt	3674 <_malloc_r+0x510>
    3294:	e3510000 	cmp	r1, #0
    3298:	e5838014 	str	r8, [r3, #20]
    329c:	e5838010 	str	r8, [r3, #16]
    32a0:	aa000046 	bge	33c0 <_malloc_r+0x25c>
    32a4:	e3520c02 	cmp	r2, #512	; 0x200
    32a8:	2a0000d2 	bcs	35f8 <_malloc_r+0x494>
    32ac:	e5930004 	ldr	r0, [r3, #4]
    32b0:	e1a021a2 	lsr	r2, r2, #3
    32b4:	e1a01142 	asr	r1, r2, #2
    32b8:	e3a0c001 	mov	r12, #1
    32bc:	e180111c 	orr	r1, r0, r12, lsl r1
    32c0:	e0832182 	add	r2, r3, r2, lsl #3
    32c4:	e5920008 	ldr	r0, [r2, #8]
    32c8:	e584200c 	str	r2, [r4, #12]
    32cc:	e5840008 	str	r0, [r4, #8]
    32d0:	e5831004 	str	r1, [r3, #4]
    32d4:	e5824008 	str	r4, [r2, #8]
    32d8:	e580400c 	str	r4, [r0, #12]
    32dc:	e1a0014e 	asr	r0, lr, #2
    32e0:	e3a03001 	mov	r3, #1
    32e4:	e1a00013 	lsl	r0, r3, r0
    32e8:	e1500001 	cmp	r0, r1
    32ec:	8a00003b 	bhi	33e0 <_malloc_r+0x27c>
    32f0:	e1110000 	tst	r1, r0
    32f4:	1a000008 	bne	331c <_malloc_r+0x1b8>
    32f8:	e1a00310 	lsl	r0, r0, r3
    32fc:	e3cee003 	bic	lr, lr, #3
    3300:	e1110000 	tst	r1, r0
    3304:	e28ee004 	add	lr, lr, #4
    3308:	1a000003 	bne	331c <_malloc_r+0x1b8>
    330c:	e1a00080 	lsl	r0, r0, #1
    3310:	e1110000 	tst	r1, r0
    3314:	e28ee004 	add	lr, lr, #4
    3318:	0afffffb 	beq	330c <_malloc_r+0x1a8>
    331c:	e087a18e 	add	r10, r7, lr, lsl #3
    3320:	e1a0c00a 	mov	r12, r10
    3324:	e1a0400e 	mov	r4, lr
    3328:	e59c300c 	ldr	r3, [r12, #12]
    332c:	e15c0003 	cmp	r12, r3
    3330:	1a000005 	bne	334c <_malloc_r+0x1e8>
    3334:	ea0000db 	b	36a8 <_malloc_r+0x544>
    3338:	e3520000 	cmp	r2, #0
    333c:	aa0000f4 	bge	3714 <_malloc_r+0x5b0>
    3340:	e593300c 	ldr	r3, [r3, #12]
    3344:	e15c0003 	cmp	r12, r3
    3348:	0a0000d6 	beq	36a8 <_malloc_r+0x544>
    334c:	e5931004 	ldr	r1, [r3, #4]
    3350:	e3c11003 	bic	r1, r1, #3
    3354:	e0652001 	rsb	r2, r5, r1
    3358:	e352000f 	cmp	r2, #15
    335c:	dafffff5 	ble	3338 <_malloc_r+0x1d4>
    3360:	e1a04003 	mov	r4, r3
    3364:	e593000c 	ldr	r0, [r3, #12]
    3368:	e5b4c008 	ldr	r12, [r4, #8]!
    336c:	e0831005 	add	r1, r3, r5
    3370:	e382e001 	orr	lr, r2, #1
    3374:	e3855001 	orr	r5, r5, #1
    3378:	e58c000c 	str	r0, [r12, #12]
    337c:	e580c008 	str	r12, [r0, #8]
    3380:	e5835004 	str	r5, [r3, #4]
    3384:	e5871014 	str	r1, [r7, #20]
    3388:	e5871010 	str	r1, [r7, #16]
    338c:	e581800c 	str	r8, [r1, #12]
    3390:	e5818008 	str	r8, [r1, #8]
    3394:	e581e004 	str	lr, [r1, #4]
    3398:	e7812002 	str	r2, [r1, r2]
    339c:	e1a00006 	mov	r0, r6
    33a0:	eb00024e 	bl	3ce0 <__malloc_unlock>
    33a4:	eaffff95 	b	3200 <_malloc_r+0x9c>
    33a8:	e35e0004 	cmp	lr, #4
    33ac:	8a000087 	bhi	35d0 <_malloc_r+0x46c>
    33b0:	e1a0e325 	lsr	lr, r5, #6
    33b4:	e28ee038 	add	lr, lr, #56	; 0x38
    33b8:	e1a0108e 	lsl	r1, lr, #1
    33bc:	eaffff97 	b	3220 <_malloc_r+0xbc>
    33c0:	e0842002 	add	r2, r4, r2
    33c4:	e5923004 	ldr	r3, [r2, #4]
    33c8:	e3833001 	orr	r3, r3, #1
    33cc:	e5823004 	str	r3, [r2, #4]
    33d0:	e1a00006 	mov	r0, r6
    33d4:	eb000241 	bl	3ce0 <__malloc_unlock>
    33d8:	e2844008 	add	r4, r4, #8
    33dc:	eaffff87 	b	3200 <_malloc_r+0x9c>
    33e0:	e5974008 	ldr	r4, [r7, #8]
    33e4:	e594a004 	ldr	r10, [r4, #4]
    33e8:	e3caa003 	bic	r10, r10, #3
    33ec:	e155000a 	cmp	r5, r10
    33f0:	8a000002 	bhi	3400 <_malloc_r+0x29c>
    33f4:	e065300a 	rsb	r3, r5, r10
    33f8:	e353000f 	cmp	r3, #15
    33fc:	ca00005d 	bgt	3578 <_malloc_r+0x414>
    3400:	e59f9470 	ldr	r9, [pc, #1136]	; 3878 <_malloc_r+0x714>
    3404:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    3408:	e599b000 	ldr	r11, [r9]
    340c:	e3730001 	cmn	r3, #1
    3410:	e085b00b 	add	r11, r5, r11
    3414:	128bba01 	addne	r11, r11, #4096	; 0x1000
    3418:	128bb00f 	addne	r11, r11, #15
    341c:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    3420:	028bb010 	addeq	r11, r11, #16
    3424:	13cbb00f 	bicne	r11, r11, #15
    3428:	e084200a 	add	r2, r4, r10
    342c:	e1a00006 	mov	r0, r6
    3430:	e1a0100b 	mov	r1, r11
    3434:	e58d2004 	str	r2, [sp, #4]
    3438:	eb000386 	bl	4258 <_sbrk_r>
    343c:	e3700001 	cmn	r0, #1
    3440:	e1a08000 	mov	r8, r0
    3444:	e59d2004 	ldr	r2, [sp, #4]
    3448:	0a0000e2 	beq	37d8 <_malloc_r+0x674>
    344c:	e1520000 	cmp	r2, r0
    3450:	8a0000bf 	bhi	3754 <_malloc_r+0x5f0>
    3454:	e5993004 	ldr	r3, [r9, #4]
    3458:	e1520008 	cmp	r2, r8
    345c:	e08b3003 	add	r3, r11, r3
    3460:	e5893004 	str	r3, [r9, #4]
    3464:	0a0000df 	beq	37e8 <_malloc_r+0x684>
    3468:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    346c:	e3710001 	cmn	r1, #1
    3470:	10622008 	rsbne	r2, r2, r8
    3474:	059f33f8 	ldreq	r3, [pc, #1016]	; 3874 <_malloc_r+0x710>
    3478:	10833002 	addne	r3, r3, r2
    347c:	05838408 	streq	r8, [r3, #1032]	; 0x408
    3480:	15893004 	strne	r3, [r9, #4]
    3484:	e2183007 	ands	r3, r8, #7
    3488:	12632008 	rsbne	r2, r3, #8
    348c:	10888002 	addne	r8, r8, r2
    3490:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    3494:	12832008 	addne	r2, r3, #8
    3498:	e088300b 	add	r3, r8, r11
    349c:	03a02a01 	moveq	r2, #4096	; 0x1000
    34a0:	e1a03a03 	lsl	r3, r3, #20
    34a4:	e042ba23 	sub	r11, r2, r3, lsr #20
    34a8:	e1a0100b 	mov	r1, r11
    34ac:	e1a00006 	mov	r0, r6
    34b0:	eb000368 	bl	4258 <_sbrk_r>
    34b4:	e3700001 	cmn	r0, #1
    34b8:	10682000 	rsbne	r2, r8, r0
    34bc:	e5993004 	ldr	r3, [r9, #4]
    34c0:	108b2002 	addne	r2, r11, r2
    34c4:	03a0b000 	moveq	r11, #0
    34c8:	13822001 	orrne	r2, r2, #1
    34cc:	03a02001 	moveq	r2, #1
    34d0:	e08b3003 	add	r3, r11, r3
    34d4:	e1540007 	cmp	r4, r7
    34d8:	e5893004 	str	r3, [r9, #4]
    34dc:	e5878008 	str	r8, [r7, #8]
    34e0:	e5882004 	str	r2, [r8, #4]
    34e4:	0a00000d 	beq	3520 <_malloc_r+0x3bc>
    34e8:	e35a000f 	cmp	r10, #15
    34ec:	9a0000ac 	bls	37a4 <_malloc_r+0x640>
    34f0:	e594c004 	ldr	r12, [r4, #4]
    34f4:	e24a200c 	sub	r2, r10, #12
    34f8:	e3c22007 	bic	r2, r2, #7
    34fc:	e20cc001 	and	r12, r12, #1
    3500:	e0841002 	add	r1, r4, r2
    3504:	e3a00005 	mov	r0, #5
    3508:	e182c00c 	orr	r12, r2, r12
    350c:	e352000f 	cmp	r2, #15
    3510:	e584c004 	str	r12, [r4, #4]
    3514:	e5810004 	str	r0, [r1, #4]
    3518:	e5810008 	str	r0, [r1, #8]
    351c:	8a0000b8 	bhi	3804 <_malloc_r+0x6a0>
    3520:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    3524:	e1530002 	cmp	r3, r2
    3528:	859f2348 	ldrhi	r2, [pc, #840]	; 3878 <_malloc_r+0x714>
    352c:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    3530:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    3534:	e5974008 	ldr	r4, [r7, #8]
    3538:	e1530002 	cmp	r3, r2
    353c:	95943004 	ldrls	r3, [r4, #4]
    3540:	85942004 	ldrhi	r2, [r4, #4]
    3544:	859f132c 	ldrhi	r1, [pc, #812]	; 3878 <_malloc_r+0x714>
    3548:	93c33003 	bicls	r3, r3, #3
    354c:	85813030 	strhi	r3, [r1, #48]	; 0x30
    3550:	83c23003 	bichi	r3, r2, #3
    3554:	e1550003 	cmp	r5, r3
    3558:	e0653003 	rsb	r3, r5, r3
    355c:	8a000001 	bhi	3568 <_malloc_r+0x404>
    3560:	e353000f 	cmp	r3, #15
    3564:	ca000003 	bgt	3578 <_malloc_r+0x414>
    3568:	e1a00006 	mov	r0, r6
    356c:	eb0001db 	bl	3ce0 <__malloc_unlock>
    3570:	e3a04000 	mov	r4, #0
    3574:	eaffff21 	b	3200 <_malloc_r+0x9c>
    3578:	e0842005 	add	r2, r4, r5
    357c:	e3833001 	orr	r3, r3, #1
    3580:	e3855001 	orr	r5, r5, #1
    3584:	e5845004 	str	r5, [r4, #4]
    3588:	e1a00006 	mov	r0, r6
    358c:	e5823004 	str	r3, [r2, #4]
    3590:	e5872008 	str	r2, [r7, #8]
    3594:	e2844008 	add	r4, r4, #8
    3598:	eb0001d0 	bl	3ce0 <__malloc_unlock>
    359c:	eaffff17 	b	3200 <_malloc_r+0x9c>
    35a0:	e0842002 	add	r2, r4, r2
    35a4:	e5920004 	ldr	r0, [r2, #4]
    35a8:	e2841008 	add	r1, r4, #8
    35ac:	e891000a 	ldm	r1, {r1, r3}
    35b0:	e3800001 	orr	r0, r0, #1
    35b4:	e5820004 	str	r0, [r2, #4]
    35b8:	e581300c 	str	r3, [r1, #12]
    35bc:	e5831008 	str	r1, [r3, #8]
    35c0:	e1a00006 	mov	r0, r6
    35c4:	eb0001c5 	bl	3ce0 <__malloc_unlock>
    35c8:	e2844008 	add	r4, r4, #8
    35cc:	eaffff0b 	b	3200 <_malloc_r+0x9c>
    35d0:	e35e0014 	cmp	lr, #20
    35d4:	928ee05b 	addls	lr, lr, #91	; 0x5b
    35d8:	91a0108e 	lslls	r1, lr, #1
    35dc:	9affff0f 	bls	3220 <_malloc_r+0xbc>
    35e0:	e35e0054 	cmp	lr, #84	; 0x54
    35e4:	8a000061 	bhi	3770 <_malloc_r+0x60c>
    35e8:	e1a0e625 	lsr	lr, r5, #12
    35ec:	e28ee06e 	add	lr, lr, #110	; 0x6e
    35f0:	e1a0108e 	lsl	r1, lr, #1
    35f4:	eaffff09 	b	3220 <_malloc_r+0xbc>
    35f8:	e1a034a2 	lsr	r3, r2, #9
    35fc:	e3530004 	cmp	r3, #4
    3600:	9a00004f 	bls	3744 <_malloc_r+0x5e0>
    3604:	e3530014 	cmp	r3, #20
    3608:	9283a05b 	addls	r10, r3, #91	; 0x5b
    360c:	91a0008a 	lslls	r0, r10, #1
    3610:	9a000004 	bls	3628 <_malloc_r+0x4c4>
    3614:	e3530054 	cmp	r3, #84	; 0x54
    3618:	8a00007f 	bhi	381c <_malloc_r+0x6b8>
    361c:	e1a0a622 	lsr	r10, r2, #12
    3620:	e28aa06e 	add	r10, r10, #110	; 0x6e
    3624:	e1a0008a 	lsl	r0, r10, #1
    3628:	e0870100 	add	r0, r7, r0, lsl #2
    362c:	e5903008 	ldr	r3, [r0, #8]
    3630:	e1530000 	cmp	r3, r0
    3634:	e59fc238 	ldr	r12, [pc, #568]	; 3874 <_malloc_r+0x710>
    3638:	0a000052 	beq	3788 <_malloc_r+0x624>
    363c:	e5931004 	ldr	r1, [r3, #4]
    3640:	e3c11003 	bic	r1, r1, #3
    3644:	e1520001 	cmp	r2, r1
    3648:	2a000002 	bcs	3658 <_malloc_r+0x4f4>
    364c:	e5933008 	ldr	r3, [r3, #8]
    3650:	e1500003 	cmp	r0, r3
    3654:	1afffff8 	bne	363c <_malloc_r+0x4d8>
    3658:	e593200c 	ldr	r2, [r3, #12]
    365c:	e5971004 	ldr	r1, [r7, #4]
    3660:	e584200c 	str	r2, [r4, #12]
    3664:	e5843008 	str	r3, [r4, #8]
    3668:	e583400c 	str	r4, [r3, #12]
    366c:	e5824008 	str	r4, [r2, #8]
    3670:	eaffff19 	b	32dc <_malloc_r+0x178>
    3674:	e0842005 	add	r2, r4, r5
    3678:	e3810001 	orr	r0, r1, #1
    367c:	e3855001 	orr	r5, r5, #1
    3680:	e5845004 	str	r5, [r4, #4]
    3684:	e5832014 	str	r2, [r3, #20]
    3688:	e5832010 	str	r2, [r3, #16]
    368c:	e582800c 	str	r8, [r2, #12]
    3690:	e9820101 	stmib	r2, {r0, r8}
    3694:	e7821001 	str	r1, [r2, r1]
    3698:	e1a00006 	mov	r0, r6
    369c:	eb00018f 	bl	3ce0 <__malloc_unlock>
    36a0:	e2844008 	add	r4, r4, #8
    36a4:	eafffed5 	b	3200 <_malloc_r+0x9c>
    36a8:	e2844001 	add	r4, r4, #1
    36ac:	e3140003 	tst	r4, #3
    36b0:	e28cc008 	add	r12, r12, #8
    36b4:	1affff1b 	bne	3328 <_malloc_r+0x1c4>
    36b8:	e31e0003 	tst	lr, #3
    36bc:	e24a3008 	sub	r3, r10, #8
    36c0:	0a000062 	beq	3850 <_malloc_r+0x6ec>
    36c4:	e59aa000 	ldr	r10, [r10]
    36c8:	e15a0003 	cmp	r10, r3
    36cc:	e24ee001 	sub	lr, lr, #1
    36d0:	0afffff8 	beq	36b8 <_malloc_r+0x554>
    36d4:	e5973004 	ldr	r3, [r7, #4]
    36d8:	e1a00080 	lsl	r0, r0, #1
    36dc:	e1500003 	cmp	r0, r3
    36e0:	8affff3e 	bhi	33e0 <_malloc_r+0x27c>
    36e4:	e3500000 	cmp	r0, #0
    36e8:	0affff3c 	beq	33e0 <_malloc_r+0x27c>
    36ec:	e1130000 	tst	r3, r0
    36f0:	0a00005a 	beq	3860 <_malloc_r+0x6fc>
    36f4:	e1a0e004 	mov	lr, r4
    36f8:	eaffff07 	b	331c <_malloc_r+0x1b8>
    36fc:	e2843008 	add	r3, r4, #8
    3700:	e5944014 	ldr	r4, [r4, #20]
    3704:	e1530004 	cmp	r3, r4
    3708:	028ee002 	addeq	lr, lr, #2
    370c:	0afffed5 	beq	3268 <_malloc_r+0x104>
    3710:	eafffead 	b	31cc <_malloc_r+0x68>
    3714:	e0831001 	add	r1, r3, r1
    3718:	e5910004 	ldr	r0, [r1, #4]
    371c:	e1a04003 	mov	r4, r3
    3720:	e5b42008 	ldr	r2, [r4, #8]!
    3724:	e593300c 	ldr	r3, [r3, #12]
    3728:	e3800001 	orr	r0, r0, #1
    372c:	e5810004 	str	r0, [r1, #4]
    3730:	e582300c 	str	r3, [r2, #12]
    3734:	e5832008 	str	r2, [r3, #8]
    3738:	e1a00006 	mov	r0, r6
    373c:	eb000167 	bl	3ce0 <__malloc_unlock>
    3740:	eafffeae 	b	3200 <_malloc_r+0x9c>
    3744:	e1a0a322 	lsr	r10, r2, #6
    3748:	e28aa038 	add	r10, r10, #56	; 0x38
    374c:	e1a0008a 	lsl	r0, r10, #1
    3750:	eaffffb4 	b	3628 <_malloc_r+0x4c4>
    3754:	e1540007 	cmp	r4, r7
    3758:	0affff3d 	beq	3454 <_malloc_r+0x2f0>
    375c:	e59f3110 	ldr	r3, [pc, #272]	; 3874 <_malloc_r+0x710>
    3760:	e5934008 	ldr	r4, [r3, #8]
    3764:	e5943004 	ldr	r3, [r4, #4]
    3768:	e3c33003 	bic	r3, r3, #3
    376c:	eaffff78 	b	3554 <_malloc_r+0x3f0>
    3770:	e35e0f55 	cmp	lr, #340	; 0x154
    3774:	8a00000f 	bhi	37b8 <_malloc_r+0x654>
    3778:	e1a0e7a5 	lsr	lr, r5, #15
    377c:	e28ee077 	add	lr, lr, #119	; 0x77
    3780:	e1a0108e 	lsl	r1, lr, #1
    3784:	eafffea5 	b	3220 <_malloc_r+0xbc>
    3788:	e59c2004 	ldr	r2, [r12, #4]
    378c:	e1a0a14a 	asr	r10, r10, #2
    3790:	e3a01001 	mov	r1, #1
    3794:	e1821a11 	orr	r1, r2, r1, lsl r10
    3798:	e1a02003 	mov	r2, r3
    379c:	e58c1004 	str	r1, [r12, #4]
    37a0:	eaffffae 	b	3660 <_malloc_r+0x4fc>
    37a4:	e3a03001 	mov	r3, #1
    37a8:	e5883004 	str	r3, [r8, #4]
    37ac:	e1a04008 	mov	r4, r8
    37b0:	e3a03000 	mov	r3, #0
    37b4:	eaffff66 	b	3554 <_malloc_r+0x3f0>
    37b8:	e59f30bc 	ldr	r3, [pc, #188]	; 387c <_malloc_r+0x718>
    37bc:	e15e0003 	cmp	lr, r3
    37c0:	91a0e925 	lsrls	lr, r5, #18
    37c4:	928ee07c 	addls	lr, lr, #124	; 0x7c
    37c8:	91a0108e 	lslls	r1, lr, #1
    37cc:	83a010fc 	movhi	r1, #252	; 0xfc
    37d0:	83a0e07e 	movhi	lr, #126	; 0x7e
    37d4:	eafffe91 	b	3220 <_malloc_r+0xbc>
    37d8:	e5974008 	ldr	r4, [r7, #8]
    37dc:	e5943004 	ldr	r3, [r4, #4]
    37e0:	e3c33003 	bic	r3, r3, #3
    37e4:	eaffff5a 	b	3554 <_malloc_r+0x3f0>
    37e8:	e1b01a02 	lsls	r1, r2, #20
    37ec:	1affff1d 	bne	3468 <_malloc_r+0x304>
    37f0:	e5972008 	ldr	r2, [r7, #8]
    37f4:	e08b100a 	add	r1, r11, r10
    37f8:	e3811001 	orr	r1, r1, #1
    37fc:	e5821004 	str	r1, [r2, #4]
    3800:	eaffff46 	b	3520 <_malloc_r+0x3bc>
    3804:	e1a00006 	mov	r0, r6
    3808:	e2841008 	add	r1, r4, #8
    380c:	eb00047a 	bl	49fc <_free_r>
    3810:	e59f3060 	ldr	r3, [pc, #96]	; 3878 <_malloc_r+0x714>
    3814:	e5933004 	ldr	r3, [r3, #4]
    3818:	eaffff40 	b	3520 <_malloc_r+0x3bc>
    381c:	e3530f55 	cmp	r3, #340	; 0x154
    3820:	91a0a7a2 	lsrls	r10, r2, #15
    3824:	928aa077 	addls	r10, r10, #119	; 0x77
    3828:	91a0008a 	lslls	r0, r10, #1
    382c:	9affff7d 	bls	3628 <_malloc_r+0x4c4>
    3830:	e59f1044 	ldr	r1, [pc, #68]	; 387c <_malloc_r+0x718>
    3834:	e1530001 	cmp	r3, r1
    3838:	91a0a922 	lsrls	r10, r2, #18
    383c:	928aa07c 	addls	r10, r10, #124	; 0x7c
    3840:	91a0008a 	lslls	r0, r10, #1
    3844:	83a000fc 	movhi	r0, #252	; 0xfc
    3848:	83a0a07e 	movhi	r10, #126	; 0x7e
    384c:	eaffff75 	b	3628 <_malloc_r+0x4c4>
    3850:	e5973004 	ldr	r3, [r7, #4]
    3854:	e1c33000 	bic	r3, r3, r0
    3858:	e5873004 	str	r3, [r7, #4]
    385c:	eaffff9d 	b	36d8 <_malloc_r+0x574>
    3860:	e1a00080 	lsl	r0, r0, #1
    3864:	e1130000 	tst	r3, r0
    3868:	e2844004 	add	r4, r4, #4
    386c:	1affffa0 	bne	36f4 <_malloc_r+0x590>
    3870:	eafffffa 	b	3860 <_malloc_r+0x6fc>
    3874:	00006d50 	.word	0x00006d50
    3878:	0000759c 	.word	0x0000759c
    387c:	00000554 	.word	0x00000554

00003880 <memchr>:
    3880:	e3100003 	tst	r0, #3
    3884:	e92d0070 	push	{r4, r5, r6}
    3888:	e20110ff 	and	r1, r1, #255	; 0xff
    388c:	0a00003c 	beq	3984 <memchr+0x104>
    3890:	e3520000 	cmp	r2, #0
    3894:	e242c001 	sub	r12, r2, #1
    3898:	0a00003b 	beq	398c <memchr+0x10c>
    389c:	e5d03000 	ldrb	r3, [r0]
    38a0:	e1530001 	cmp	r3, r1
    38a4:	0a00001f 	beq	3928 <memchr+0xa8>
    38a8:	e2803001 	add	r3, r0, #1
    38ac:	ea000006 	b	38cc <memchr+0x4c>
    38b0:	e35c0000 	cmp	r12, #0
    38b4:	0a00001d 	beq	3930 <memchr+0xb0>
    38b8:	e5d02000 	ldrb	r2, [r0]
    38bc:	e1520001 	cmp	r2, r1
    38c0:	e2833001 	add	r3, r3, #1
    38c4:	e24cc001 	sub	r12, r12, #1
    38c8:	0a000016 	beq	3928 <memchr+0xa8>
    38cc:	e3130003 	tst	r3, #3
    38d0:	e1a00003 	mov	r0, r3
    38d4:	1afffff5 	bne	38b0 <memchr+0x30>
    38d8:	e35c0003 	cmp	r12, #3
    38dc:	8a000015 	bhi	3938 <memchr+0xb8>
    38e0:	e35c0000 	cmp	r12, #0
    38e4:	e24c4001 	sub	r4, r12, #1
    38e8:	0a000010 	beq	3930 <memchr+0xb0>
    38ec:	e5d03000 	ldrb	r3, [r0]
    38f0:	e1530001 	cmp	r3, r1
    38f4:	0a00000b 	beq	3928 <memchr+0xa8>
    38f8:	e2802001 	add	r2, r0, #1
    38fc:	e3a03000 	mov	r3, #0
    3900:	ea000004 	b	3918 <memchr+0x98>
    3904:	e5d0c000 	ldrb	r12, [r0]
    3908:	e15c0001 	cmp	r12, r1
    390c:	e2822001 	add	r2, r2, #1
    3910:	e2833001 	add	r3, r3, #1
    3914:	0a000003 	beq	3928 <memchr+0xa8>
    3918:	e1540003 	cmp	r4, r3
    391c:	e1a00002 	mov	r0, r2
    3920:	1afffff7 	bne	3904 <memchr+0x84>
    3924:	e3a00000 	mov	r0, #0
    3928:	e8bd0070 	pop	{r4, r5, r6}
    392c:	e12fff1e 	bx	lr
    3930:	e1a0000c 	mov	r0, r12
    3934:	eafffffb 	b	3928 <memchr+0xa8>
    3938:	e1816401 	orr	r6, r1, r1, lsl #8
    393c:	e1866806 	orr	r6, r6, r6, lsl #16
    3940:	e5903000 	ldr	r3, [r0]
    3944:	e59f4048 	ldr	r4, [pc, #72]	; 3994 <memchr+0x114>
    3948:	e0263003 	eor	r3, r6, r3
    394c:	e0834004 	add	r4, r3, r4
    3950:	e59f2040 	ldr	r2, [pc, #64]	; 3998 <memchr+0x118>
    3954:	e1c44003 	bic	r4, r4, r3
    3958:	e0042002 	and	r2, r4, r2
    395c:	e3520000 	cmp	r2, #0
    3960:	e1a05000 	mov	r5, r0
    3964:	e2800004 	add	r0, r0, #4
    3968:	1a000003 	bne	397c <memchr+0xfc>
    396c:	e24cc004 	sub	r12, r12, #4
    3970:	e35c0003 	cmp	r12, #3
    3974:	8afffff1 	bhi	3940 <memchr+0xc0>
    3978:	eaffffd8 	b	38e0 <memchr+0x60>
    397c:	e1a00005 	mov	r0, r5
    3980:	eaffffd6 	b	38e0 <memchr+0x60>
    3984:	e1a0c002 	mov	r12, r2
    3988:	eaffffd2 	b	38d8 <memchr+0x58>
    398c:	e1a00002 	mov	r0, r2
    3990:	eaffffe4 	b	3928 <memchr+0xa8>
    3994:	fefefeff 	.word	0xfefefeff
    3998:	80808080 	.word	0x80808080

0000399c <memcpy>:
    399c:	e3520003 	cmp	r2, #3
    39a0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    39a4:	8a000009 	bhi	39d0 <memcpy+0x34>
    39a8:	e3520000 	cmp	r2, #0
    39ac:	0a000005 	beq	39c8 <memcpy+0x2c>
    39b0:	e3a03000 	mov	r3, #0
    39b4:	e7d1c003 	ldrb	r12, [r1, r3]
    39b8:	e7c0c003 	strb	r12, [r0, r3]
    39bc:	e2833001 	add	r3, r3, #1
    39c0:	e1530002 	cmp	r3, r2
    39c4:	1afffffa 	bne	39b4 <memcpy+0x18>
    39c8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    39cc:	e12fff1e 	bx	lr
    39d0:	e3100003 	tst	r0, #3
    39d4:	e0802002 	add	r2, r0, r2
    39d8:	0a00000b 	beq	3a0c <memcpy+0x70>
    39dc:	e280c001 	add	r12, r0, #1
    39e0:	e2814001 	add	r4, r1, #1
    39e4:	e20c3003 	and	r3, r12, #3
    39e8:	e5545001 	ldrb	r5, [r4, #-1]
    39ec:	e3530000 	cmp	r3, #0
    39f0:	e1a01004 	mov	r1, r4
    39f4:	e1a0300c 	mov	r3, r12
    39f8:	e54c5001 	strb	r5, [r12, #-1]
    39fc:	e2844001 	add	r4, r4, #1
    3a00:	e28cc001 	add	r12, r12, #1
    3a04:	1afffff6 	bne	39e4 <memcpy+0x48>
    3a08:	ea000000 	b	3a10 <memcpy+0x74>
    3a0c:	e1a03000 	mov	r3, r0
    3a10:	e211c003 	ands	r12, r1, #3
    3a14:	1a00004f 	bne	3b58 <memcpy+0x1bc>
    3a18:	e063c002 	rsb	r12, r3, r2
    3a1c:	e35c003f 	cmp	r12, #63	; 0x3f
    3a20:	da000024 	ble	3ab8 <memcpy+0x11c>
    3a24:	e591c000 	ldr	r12, [r1]
    3a28:	e583c000 	str	r12, [r3]
    3a2c:	e591c004 	ldr	r12, [r1, #4]
    3a30:	e583c004 	str	r12, [r3, #4]
    3a34:	e591c008 	ldr	r12, [r1, #8]
    3a38:	e583c008 	str	r12, [r3, #8]
    3a3c:	e591c00c 	ldr	r12, [r1, #12]
    3a40:	e583c00c 	str	r12, [r3, #12]
    3a44:	e591c010 	ldr	r12, [r1, #16]
    3a48:	e583c010 	str	r12, [r3, #16]
    3a4c:	e591c014 	ldr	r12, [r1, #20]
    3a50:	e583c014 	str	r12, [r3, #20]
    3a54:	e591c018 	ldr	r12, [r1, #24]
    3a58:	e583c018 	str	r12, [r3, #24]
    3a5c:	e591c01c 	ldr	r12, [r1, #28]
    3a60:	e583c01c 	str	r12, [r3, #28]
    3a64:	e591c020 	ldr	r12, [r1, #32]
    3a68:	e583c020 	str	r12, [r3, #32]
    3a6c:	e591c024 	ldr	r12, [r1, #36]	; 0x24
    3a70:	e583c024 	str	r12, [r3, #36]	; 0x24
    3a74:	e591c028 	ldr	r12, [r1, #40]	; 0x28
    3a78:	e583c028 	str	r12, [r3, #40]	; 0x28
    3a7c:	e591c02c 	ldr	r12, [r1, #44]	; 0x2c
    3a80:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    3a84:	e591c030 	ldr	r12, [r1, #48]	; 0x30
    3a88:	e583c030 	str	r12, [r3, #48]	; 0x30
    3a8c:	e591c034 	ldr	r12, [r1, #52]	; 0x34
    3a90:	e583c034 	str	r12, [r3, #52]	; 0x34
    3a94:	e591c038 	ldr	r12, [r1, #56]	; 0x38
    3a98:	e583c038 	str	r12, [r3, #56]	; 0x38
    3a9c:	e591c03c 	ldr	r12, [r1, #60]	; 0x3c
    3aa0:	e2833040 	add	r3, r3, #64	; 0x40
    3aa4:	e503c004 	str	r12, [r3, #-4]
    3aa8:	e063c002 	rsb	r12, r3, r2
    3aac:	e35c003f 	cmp	r12, #63	; 0x3f
    3ab0:	e2811040 	add	r1, r1, #64	; 0x40
    3ab4:	caffffda 	bgt	3a24 <memcpy+0x88>
    3ab8:	e35c000f 	cmp	r12, #15
    3abc:	da00000c 	ble	3af4 <memcpy+0x158>
    3ac0:	e591c000 	ldr	r12, [r1]
    3ac4:	e583c000 	str	r12, [r3]
    3ac8:	e591c004 	ldr	r12, [r1, #4]
    3acc:	e583c004 	str	r12, [r3, #4]
    3ad0:	e591c008 	ldr	r12, [r1, #8]
    3ad4:	e583c008 	str	r12, [r3, #8]
    3ad8:	e591c00c 	ldr	r12, [r1, #12]
    3adc:	e2833010 	add	r3, r3, #16
    3ae0:	e503c004 	str	r12, [r3, #-4]
    3ae4:	e063c002 	rsb	r12, r3, r2
    3ae8:	e35c000f 	cmp	r12, #15
    3aec:	e2811010 	add	r1, r1, #16
    3af0:	cafffff2 	bgt	3ac0 <memcpy+0x124>
    3af4:	e35c0003 	cmp	r12, #3
    3af8:	da00000a 	ble	3b28 <memcpy+0x18c>
    3afc:	e283c004 	add	r12, r3, #4
    3b00:	e2814004 	add	r4, r1, #4
    3b04:	e06c3002 	rsb	r3, r12, r2
    3b08:	e5145004 	ldr	r5, [r4, #-4]
    3b0c:	e3530003 	cmp	r3, #3
    3b10:	e1a01004 	mov	r1, r4
    3b14:	e1a0300c 	mov	r3, r12
    3b18:	e50c5004 	str	r5, [r12, #-4]
    3b1c:	e2844004 	add	r4, r4, #4
    3b20:	e28cc004 	add	r12, r12, #4
    3b24:	cafffff6 	bgt	3b04 <memcpy+0x168>
    3b28:	e1520003 	cmp	r2, r3
    3b2c:	82833001 	addhi	r3, r3, #1
    3b30:	82811001 	addhi	r1, r1, #1
    3b34:	82822001 	addhi	r2, r2, #1
    3b38:	9affffa2 	bls	39c8 <memcpy+0x2c>
    3b3c:	e551c001 	ldrb	r12, [r1, #-1]
    3b40:	e2833001 	add	r3, r3, #1
    3b44:	e1530002 	cmp	r3, r2
    3b48:	e543c002 	strb	r12, [r3, #-2]
    3b4c:	e2811001 	add	r1, r1, #1
    3b50:	1afffff9 	bne	3b3c <memcpy+0x1a0>
    3b54:	eaffff9b 	b	39c8 <memcpy+0x2c>
    3b58:	e0635002 	rsb	r5, r3, r2
    3b5c:	e06c4001 	rsb	r4, r12, r1
    3b60:	e3550003 	cmp	r5, #3
    3b64:	e5945000 	ldr	r5, [r4]
    3b68:	daffffee 	ble	3b28 <memcpy+0x18c>
    3b6c:	e26c6004 	rsb	r6, r12, #4
    3b70:	e1a0718c 	lsl	r7, r12, #3
    3b74:	e1a06186 	lsl	r6, r6, #3
    3b78:	e283c004 	add	r12, r3, #4
    3b7c:	e1a08735 	lsr	r8, r5, r7
    3b80:	e5b45004 	ldr	r5, [r4, #4]!
    3b84:	e1888615 	orr	r8, r8, r5, lsl r6
    3b88:	e06c3002 	rsb	r3, r12, r2
    3b8c:	e3530003 	cmp	r3, #3
    3b90:	e50c8004 	str	r8, [r12, #-4]
    3b94:	e1a0300c 	mov	r3, r12
    3b98:	e2811004 	add	r1, r1, #4
    3b9c:	e28cc004 	add	r12, r12, #4
    3ba0:	cafffff5 	bgt	3b7c <memcpy+0x1e0>
    3ba4:	eaffffdf 	b	3b28 <memcpy+0x18c>

00003ba8 <memmove>:
    3ba8:	e1500001 	cmp	r0, r1
    3bac:	e92d00f0 	push	{r4, r5, r6, r7}
    3bb0:	9a00000e 	bls	3bf0 <memmove+0x48>
    3bb4:	e081c002 	add	r12, r1, r2
    3bb8:	e150000c 	cmp	r0, r12
    3bbc:	2a00000b 	bcs	3bf0 <memmove+0x48>
    3bc0:	e3520000 	cmp	r2, #0
    3bc4:	e0803002 	add	r3, r0, r2
    3bc8:	e2422001 	sub	r2, r2, #1
    3bcc:	0a000005 	beq	3be8 <memmove+0x40>
    3bd0:	e1a0100c 	mov	r1, r12
    3bd4:	e571c001 	ldrb	r12, [r1, #-1]!
    3bd8:	e2422001 	sub	r2, r2, #1
    3bdc:	e3720001 	cmn	r2, #1
    3be0:	e563c001 	strb	r12, [r3, #-1]!
    3be4:	1afffffa 	bne	3bd4 <memmove+0x2c>
    3be8:	e8bd00f0 	pop	{r4, r5, r6, r7}
    3bec:	e12fff1e 	bx	lr
    3bf0:	e352000f 	cmp	r2, #15
    3bf4:	8a000009 	bhi	3c20 <memmove+0x78>
    3bf8:	e1a03000 	mov	r3, r0
    3bfc:	e3520000 	cmp	r2, #0
    3c00:	0afffff8 	beq	3be8 <memmove+0x40>
    3c04:	e2411001 	sub	r1, r1, #1
    3c08:	e0832002 	add	r2, r3, r2
    3c0c:	e5f1c001 	ldrb	r12, [r1, #1]!
    3c10:	e4c3c001 	strb	r12, [r3], #1
    3c14:	e1530002 	cmp	r3, r2
    3c18:	1afffffb 	bne	3c0c <memmove+0x64>
    3c1c:	eafffff1 	b	3be8 <memmove+0x40>
    3c20:	e1813000 	orr	r3, r1, r0
    3c24:	e3130003 	tst	r3, #3
    3c28:	1a000027 	bne	3ccc <memmove+0x124>
    3c2c:	e1a0c001 	mov	r12, r1
    3c30:	e1a03000 	mov	r3, r0
    3c34:	e1a04002 	mov	r4, r2
    3c38:	e59c5000 	ldr	r5, [r12]
    3c3c:	e5835000 	str	r5, [r3]
    3c40:	e59c5004 	ldr	r5, [r12, #4]
    3c44:	e5835004 	str	r5, [r3, #4]
    3c48:	e59c5008 	ldr	r5, [r12, #8]
    3c4c:	e5835008 	str	r5, [r3, #8]
    3c50:	e2444010 	sub	r4, r4, #16
    3c54:	e59c500c 	ldr	r5, [r12, #12]
    3c58:	e354000f 	cmp	r4, #15
    3c5c:	e583500c 	str	r5, [r3, #12]
    3c60:	e28cc010 	add	r12, r12, #16
    3c64:	e2833010 	add	r3, r3, #16
    3c68:	8afffff2 	bhi	3c38 <memmove+0x90>
    3c6c:	e2424010 	sub	r4, r2, #16
    3c70:	e3c4400f 	bic	r4, r4, #15
    3c74:	e202c00f 	and	r12, r2, #15
    3c78:	e2844010 	add	r4, r4, #16
    3c7c:	e35c0003 	cmp	r12, #3
    3c80:	e0803004 	add	r3, r0, r4
    3c84:	e0811004 	add	r1, r1, r4
    3c88:	9a000011 	bls	3cd4 <memmove+0x12c>
    3c8c:	e24cc004 	sub	r12, r12, #4
    3c90:	e1a0712c 	lsr	r7, r12, #2
    3c94:	e0816107 	add	r6, r1, r7, lsl #2
    3c98:	e1a0c001 	mov	r12, r1
    3c9c:	e2866004 	add	r6, r6, #4
    3ca0:	e1a04003 	mov	r4, r3
    3ca4:	e49c5004 	ldr	r5, [r12], #4
    3ca8:	e15c0006 	cmp	r12, r6
    3cac:	e4845004 	str	r5, [r4], #4
    3cb0:	1afffffb 	bne	3ca4 <memmove+0xfc>
    3cb4:	e287c001 	add	r12, r7, #1
    3cb8:	e1a0c10c 	lsl	r12, r12, #2
    3cbc:	e2022003 	and	r2, r2, #3
    3cc0:	e081100c 	add	r1, r1, r12
    3cc4:	e083300c 	add	r3, r3, r12
    3cc8:	eaffffcb 	b	3bfc <memmove+0x54>
    3ccc:	e1a03000 	mov	r3, r0
    3cd0:	eaffffcb 	b	3c04 <memmove+0x5c>
    3cd4:	e1a0200c 	mov	r2, r12
    3cd8:	eaffffc7 	b	3bfc <memmove+0x54>

00003cdc <__malloc_lock>:
    3cdc:	e12fff1e 	bx	lr

00003ce0 <__malloc_unlock>:
    3ce0:	e12fff1e 	bx	lr

00003ce4 <_realloc_r>:
    3ce4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3ce8:	e2514000 	subs	r4, r1, #0
    3cec:	e24dd00c 	sub	sp, sp, #12
    3cf0:	e1a08000 	mov	r8, r0
    3cf4:	e1a0b002 	mov	r11, r2
    3cf8:	0a0000d1 	beq	4044 <_realloc_r+0x360>
    3cfc:	ebfffff6 	bl	3cdc <__malloc_lock>
    3d00:	e28b500b 	add	r5, r11, #11
    3d04:	e3550016 	cmp	r5, #22
    3d08:	83c55007 	bichi	r5, r5, #7
    3d0c:	93a01010 	movls	r1, #16
    3d10:	81a06fa5 	lsrhi	r6, r5, #31
    3d14:	93a06000 	movls	r6, #0
    3d18:	91a05001 	movls	r5, r1
    3d1c:	e5143004 	ldr	r3, [r4, #-4]
    3d20:	81a01005 	movhi	r1, r5
    3d24:	e155000b 	cmp	r5, r11
    3d28:	33866001 	orrcc	r6, r6, #1
    3d2c:	e3560000 	cmp	r6, #0
    3d30:	e3c37003 	bic	r7, r3, #3
    3d34:	13a0300c 	movne	r3, #12
    3d38:	e244a008 	sub	r10, r4, #8
    3d3c:	15883000 	strne	r3, [r8]
    3d40:	13a06000 	movne	r6, #0
    3d44:	1a00000f 	bne	3d88 <_realloc_r+0xa4>
    3d48:	e1570001 	cmp	r7, r1
    3d4c:	ba000011 	blt	3d98 <_realloc_r+0xb4>
    3d50:	e1a06007 	mov	r6, r7
    3d54:	e0652006 	rsb	r2, r5, r6
    3d58:	e352000f 	cmp	r2, #15
    3d5c:	e2033001 	and	r3, r3, #1
    3d60:	8a00005e 	bhi	3ee0 <_realloc_r+0x1fc>
    3d64:	e1833006 	orr	r3, r3, r6
    3d68:	e58a3004 	str	r3, [r10, #4]
    3d6c:	e08aa006 	add	r10, r10, r6
    3d70:	e59a3004 	ldr	r3, [r10, #4]
    3d74:	e3833001 	orr	r3, r3, #1
    3d78:	e58a3004 	str	r3, [r10, #4]
    3d7c:	e1a00008 	mov	r0, r8
    3d80:	ebffffd6 	bl	3ce0 <__malloc_unlock>
    3d84:	e1a06004 	mov	r6, r4
    3d88:	e1a00006 	mov	r0, r6
    3d8c:	e28dd00c 	add	sp, sp, #12
    3d90:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3d94:	e12fff1e 	bx	lr
    3d98:	e59f24b4 	ldr	r2, [pc, #1204]	; 4254 <_realloc_r+0x570>
    3d9c:	e592c008 	ldr	r12, [r2, #8]
    3da0:	e08a0007 	add	r0, r10, r7
    3da4:	e15c0000 	cmp	r12, r0
    3da8:	0a0000a9 	beq	4054 <_realloc_r+0x370>
    3dac:	e590e004 	ldr	lr, [r0, #4]
    3db0:	e3ce9001 	bic	r9, lr, #1
    3db4:	e0809009 	add	r9, r0, r9
    3db8:	e5999004 	ldr	r9, [r9, #4]
    3dbc:	e3190001 	tst	r9, #1
    3dc0:	11a0e006 	movne	lr, r6
    3dc4:	11a0000e 	movne	r0, lr
    3dc8:	0a00003b 	beq	3ebc <_realloc_r+0x1d8>
    3dcc:	e3130001 	tst	r3, #1
    3dd0:	1a00004f 	bne	3f14 <_realloc_r+0x230>
    3dd4:	e5149008 	ldr	r9, [r4, #-8]
    3dd8:	e069900a 	rsb	r9, r9, r10
    3ddc:	e5993004 	ldr	r3, [r9, #4]
    3de0:	e3500000 	cmp	r0, #0
    3de4:	e3c33003 	bic	r3, r3, #3
    3de8:	0a000067 	beq	3f8c <_realloc_r+0x2a8>
    3dec:	e150000c 	cmp	r0, r12
    3df0:	e083c007 	add	r12, r3, r7
    3df4:	0a0000ce 	beq	4134 <_realloc_r+0x450>
    3df8:	e08e600c 	add	r6, lr, r12
    3dfc:	e1560001 	cmp	r6, r1
    3e00:	ba000062 	blt	3f90 <_realloc_r+0x2ac>
    3e04:	e2802008 	add	r2, r0, #8
    3e08:	e892000c 	ldm	r2, {r2, r3}
    3e0c:	e5832008 	str	r2, [r3, #8]
    3e10:	e582300c 	str	r3, [r2, #12]
    3e14:	e1a0a009 	mov	r10, r9
    3e18:	e599300c 	ldr	r3, [r9, #12]
    3e1c:	e5ba1008 	ldr	r1, [r10, #8]!
    3e20:	e2472004 	sub	r2, r7, #4
    3e24:	e3520024 	cmp	r2, #36	; 0x24
    3e28:	e581300c 	str	r3, [r1, #12]
    3e2c:	e5831008 	str	r1, [r3, #8]
    3e30:	8a0000fa 	bhi	4220 <_realloc_r+0x53c>
    3e34:	e3520013 	cmp	r2, #19
    3e38:	91a0300a 	movls	r3, r10
    3e3c:	9a000014 	bls	3e94 <_realloc_r+0x1b0>
    3e40:	e5943000 	ldr	r3, [r4]
    3e44:	e5893008 	str	r3, [r9, #8]
    3e48:	e5943004 	ldr	r3, [r4, #4]
    3e4c:	e352001b 	cmp	r2, #27
    3e50:	e589300c 	str	r3, [r9, #12]
    3e54:	92844008 	addls	r4, r4, #8
    3e58:	92893010 	addls	r3, r9, #16
    3e5c:	9a00000c 	bls	3e94 <_realloc_r+0x1b0>
    3e60:	e5943008 	ldr	r3, [r4, #8]
    3e64:	e5893010 	str	r3, [r9, #16]
    3e68:	e594300c 	ldr	r3, [r4, #12]
    3e6c:	e5893014 	str	r3, [r9, #20]
    3e70:	e3520024 	cmp	r2, #36	; 0x24
    3e74:	05943010 	ldreq	r3, [r4, #16]
    3e78:	05893018 	streq	r3, [r9, #24]
    3e7c:	05942014 	ldreq	r2, [r4, #20]
    3e80:	0589201c 	streq	r2, [r9, #28]
    3e84:	12893018 	addne	r3, r9, #24
    3e88:	12844010 	addne	r4, r4, #16
    3e8c:	02893020 	addeq	r3, r9, #32
    3e90:	02844018 	addeq	r4, r4, #24
    3e94:	e5942000 	ldr	r2, [r4]
    3e98:	e5832000 	str	r2, [r3]
    3e9c:	e5942004 	ldr	r2, [r4, #4]
    3ea0:	e5832004 	str	r2, [r3, #4]
    3ea4:	e5942008 	ldr	r2, [r4, #8]
    3ea8:	e5832008 	str	r2, [r3, #8]
    3eac:	e1a0400a 	mov	r4, r10
    3eb0:	e5993004 	ldr	r3, [r9, #4]
    3eb4:	e1a0a009 	mov	r10, r9
    3eb8:	eaffffa5 	b	3d54 <_realloc_r+0x70>
    3ebc:	e3cee003 	bic	lr, lr, #3
    3ec0:	e08e6007 	add	r6, lr, r7
    3ec4:	e1560001 	cmp	r6, r1
    3ec8:	baffffbf 	blt	3dcc <_realloc_r+0xe8>
    3ecc:	e2801008 	add	r1, r0, #8
    3ed0:	e8910006 	ldm	r1, {r1, r2}
    3ed4:	e581200c 	str	r2, [r1, #12]
    3ed8:	e5821008 	str	r1, [r2, #8]
    3edc:	eaffff9c 	b	3d54 <_realloc_r+0x70>
    3ee0:	e08a1005 	add	r1, r10, r5
    3ee4:	e3820001 	orr	r0, r2, #1
    3ee8:	e1835005 	orr	r5, r3, r5
    3eec:	e58a5004 	str	r5, [r10, #4]
    3ef0:	e5810004 	str	r0, [r1, #4]
    3ef4:	e0812002 	add	r2, r1, r2
    3ef8:	e5923004 	ldr	r3, [r2, #4]
    3efc:	e3833001 	orr	r3, r3, #1
    3f00:	e5823004 	str	r3, [r2, #4]
    3f04:	e1a00008 	mov	r0, r8
    3f08:	e2811008 	add	r1, r1, #8
    3f0c:	eb0002ba 	bl	49fc <_free_r>
    3f10:	eaffff99 	b	3d7c <_realloc_r+0x98>
    3f14:	e1a00008 	mov	r0, r8
    3f18:	e1a0100b 	mov	r1, r11
    3f1c:	ebfffc90 	bl	3164 <_malloc_r>
    3f20:	e2506000 	subs	r6, r0, #0
    3f24:	0a000015 	beq	3f80 <_realloc_r+0x29c>
    3f28:	e5143004 	ldr	r3, [r4, #-4]
    3f2c:	e3c32001 	bic	r2, r3, #1
    3f30:	e2461008 	sub	r1, r6, #8
    3f34:	e08a2002 	add	r2, r10, r2
    3f38:	e1510002 	cmp	r1, r2
    3f3c:	0a0000b3 	beq	4210 <_realloc_r+0x52c>
    3f40:	e2472004 	sub	r2, r7, #4
    3f44:	e3520024 	cmp	r2, #36	; 0x24
    3f48:	8a000076 	bhi	4128 <_realloc_r+0x444>
    3f4c:	e3520013 	cmp	r2, #19
    3f50:	91a03006 	movls	r3, r6
    3f54:	91a02004 	movls	r2, r4
    3f58:	8a000052 	bhi	40a8 <_realloc_r+0x3c4>
    3f5c:	e5921000 	ldr	r1, [r2]
    3f60:	e5831000 	str	r1, [r3]
    3f64:	e5921004 	ldr	r1, [r2, #4]
    3f68:	e5831004 	str	r1, [r3, #4]
    3f6c:	e5922008 	ldr	r2, [r2, #8]
    3f70:	e5832008 	str	r2, [r3, #8]
    3f74:	e1a00008 	mov	r0, r8
    3f78:	e1a01004 	mov	r1, r4
    3f7c:	eb00029e 	bl	49fc <_free_r>
    3f80:	e1a00008 	mov	r0, r8
    3f84:	ebffff55 	bl	3ce0 <__malloc_unlock>
    3f88:	eaffff7e 	b	3d88 <_realloc_r+0xa4>
    3f8c:	e083c007 	add	r12, r3, r7
    3f90:	e15c0001 	cmp	r12, r1
    3f94:	baffffde 	blt	3f14 <_realloc_r+0x230>
    3f98:	e1a06009 	mov	r6, r9
    3f9c:	e599300c 	ldr	r3, [r9, #12]
    3fa0:	e5b61008 	ldr	r1, [r6, #8]!
    3fa4:	e2472004 	sub	r2, r7, #4
    3fa8:	e3520024 	cmp	r2, #36	; 0x24
    3fac:	e581300c 	str	r3, [r1, #12]
    3fb0:	e5831008 	str	r1, [r3, #8]
    3fb4:	8a000051 	bhi	4100 <_realloc_r+0x41c>
    3fb8:	e3520013 	cmp	r2, #19
    3fbc:	91a03006 	movls	r3, r6
    3fc0:	9a000014 	bls	4018 <_realloc_r+0x334>
    3fc4:	e5943000 	ldr	r3, [r4]
    3fc8:	e5893008 	str	r3, [r9, #8]
    3fcc:	e5943004 	ldr	r3, [r4, #4]
    3fd0:	e352001b 	cmp	r2, #27
    3fd4:	e589300c 	str	r3, [r9, #12]
    3fd8:	92844008 	addls	r4, r4, #8
    3fdc:	92893010 	addls	r3, r9, #16
    3fe0:	9a00000c 	bls	4018 <_realloc_r+0x334>
    3fe4:	e5943008 	ldr	r3, [r4, #8]
    3fe8:	e5893010 	str	r3, [r9, #16]
    3fec:	e594300c 	ldr	r3, [r4, #12]
    3ff0:	e5893014 	str	r3, [r9, #20]
    3ff4:	e3520024 	cmp	r2, #36	; 0x24
    3ff8:	05943010 	ldreq	r3, [r4, #16]
    3ffc:	05893018 	streq	r3, [r9, #24]
    4000:	05942014 	ldreq	r2, [r4, #20]
    4004:	0589201c 	streq	r2, [r9, #28]
    4008:	12893018 	addne	r3, r9, #24
    400c:	12844010 	addne	r4, r4, #16
    4010:	02893020 	addeq	r3, r9, #32
    4014:	02844018 	addeq	r4, r4, #24
    4018:	e5942000 	ldr	r2, [r4]
    401c:	e5832000 	str	r2, [r3]
    4020:	e5942004 	ldr	r2, [r4, #4]
    4024:	e5832004 	str	r2, [r3, #4]
    4028:	e5942008 	ldr	r2, [r4, #8]
    402c:	e5832008 	str	r2, [r3, #8]
    4030:	e1a04006 	mov	r4, r6
    4034:	e5993004 	ldr	r3, [r9, #4]
    4038:	e1a0600c 	mov	r6, r12
    403c:	e1a0a009 	mov	r10, r9
    4040:	eaffff43 	b	3d54 <_realloc_r+0x70>
    4044:	e1a01002 	mov	r1, r2
    4048:	ebfffc45 	bl	3164 <_malloc_r>
    404c:	e1a06000 	mov	r6, r0
    4050:	eaffff4c 	b	3d88 <_realloc_r+0xa4>
    4054:	e59ce004 	ldr	lr, [r12, #4]
    4058:	e3cee003 	bic	lr, lr, #3
    405c:	e08e0007 	add	r0, lr, r7
    4060:	e2856010 	add	r6, r5, #16
    4064:	e1500006 	cmp	r0, r6
    4068:	b1a0000c 	movlt	r0, r12
    406c:	baffff56 	blt	3dcc <_realloc_r+0xe8>
    4070:	e0653000 	rsb	r3, r5, r0
    4074:	e08aa005 	add	r10, r10, r5
    4078:	e3833001 	orr	r3, r3, #1
    407c:	e58a3004 	str	r3, [r10, #4]
    4080:	e5143004 	ldr	r3, [r4, #-4]
    4084:	e2033001 	and	r3, r3, #1
    4088:	e1855003 	orr	r5, r5, r3
    408c:	e59f31c0 	ldr	r3, [pc, #448]	; 4254 <_realloc_r+0x570>
    4090:	e5045004 	str	r5, [r4, #-4]
    4094:	e1a00008 	mov	r0, r8
    4098:	e583a008 	str	r10, [r3, #8]
    409c:	e1a06004 	mov	r6, r4
    40a0:	ebffff0e 	bl	3ce0 <__malloc_unlock>
    40a4:	eaffff37 	b	3d88 <_realloc_r+0xa4>
    40a8:	e5943000 	ldr	r3, [r4]
    40ac:	e5863000 	str	r3, [r6]
    40b0:	e5943004 	ldr	r3, [r4, #4]
    40b4:	e352001b 	cmp	r2, #27
    40b8:	e5863004 	str	r3, [r6, #4]
    40bc:	92842008 	addls	r2, r4, #8
    40c0:	92863008 	addls	r3, r6, #8
    40c4:	9affffa4 	bls	3f5c <_realloc_r+0x278>
    40c8:	e5943008 	ldr	r3, [r4, #8]
    40cc:	e5863008 	str	r3, [r6, #8]
    40d0:	e594300c 	ldr	r3, [r4, #12]
    40d4:	e586300c 	str	r3, [r6, #12]
    40d8:	e3520024 	cmp	r2, #36	; 0x24
    40dc:	05943010 	ldreq	r3, [r4, #16]
    40e0:	05863010 	streq	r3, [r6, #16]
    40e4:	05942014 	ldreq	r2, [r4, #20]
    40e8:	12863010 	addne	r3, r6, #16
    40ec:	05862014 	streq	r2, [r6, #20]
    40f0:	12842010 	addne	r2, r4, #16
    40f4:	02863018 	addeq	r3, r6, #24
    40f8:	02842018 	addeq	r2, r4, #24
    40fc:	eaffff96 	b	3f5c <_realloc_r+0x278>
    4100:	e1a01004 	mov	r1, r4
    4104:	e1a00006 	mov	r0, r6
    4108:	e58dc004 	str	r12, [sp, #4]
    410c:	ebfffea5 	bl	3ba8 <memmove>
    4110:	e59dc004 	ldr	r12, [sp, #4]
    4114:	e1a04006 	mov	r4, r6
    4118:	e5993004 	ldr	r3, [r9, #4]
    411c:	e1a0600c 	mov	r6, r12
    4120:	e1a0a009 	mov	r10, r9
    4124:	eaffff0a 	b	3d54 <_realloc_r+0x70>
    4128:	e1a01004 	mov	r1, r4
    412c:	ebfffe9d 	bl	3ba8 <memmove>
    4130:	eaffff8f 	b	3f74 <_realloc_r+0x290>
    4134:	e08e300c 	add	r3, lr, r12
    4138:	e2850010 	add	r0, r5, #16
    413c:	e1530000 	cmp	r3, r0
    4140:	baffff92 	blt	3f90 <_realloc_r+0x2ac>
    4144:	e1a06009 	mov	r6, r9
    4148:	e599100c 	ldr	r1, [r9, #12]
    414c:	e5b60008 	ldr	r0, [r6, #8]!
    4150:	e2472004 	sub	r2, r7, #4
    4154:	e3520024 	cmp	r2, #36	; 0x24
    4158:	e580100c 	str	r1, [r0, #12]
    415c:	e5810008 	str	r0, [r1, #8]
    4160:	8a000035 	bhi	423c <_realloc_r+0x558>
    4164:	e3520013 	cmp	r2, #19
    4168:	91a02006 	movls	r2, r6
    416c:	9a000014 	bls	41c4 <_realloc_r+0x4e0>
    4170:	e5941000 	ldr	r1, [r4]
    4174:	e5891008 	str	r1, [r9, #8]
    4178:	e5941004 	ldr	r1, [r4, #4]
    417c:	e352001b 	cmp	r2, #27
    4180:	e589100c 	str	r1, [r9, #12]
    4184:	92892010 	addls	r2, r9, #16
    4188:	92844008 	addls	r4, r4, #8
    418c:	9a00000c 	bls	41c4 <_realloc_r+0x4e0>
    4190:	e5941008 	ldr	r1, [r4, #8]
    4194:	e5891010 	str	r1, [r9, #16]
    4198:	e594100c 	ldr	r1, [r4, #12]
    419c:	e5891014 	str	r1, [r9, #20]
    41a0:	e3520024 	cmp	r2, #36	; 0x24
    41a4:	05942010 	ldreq	r2, [r4, #16]
    41a8:	05892018 	streq	r2, [r9, #24]
    41ac:	05941014 	ldreq	r1, [r4, #20]
    41b0:	0589101c 	streq	r1, [r9, #28]
    41b4:	12892018 	addne	r2, r9, #24
    41b8:	12844010 	addne	r4, r4, #16
    41bc:	02892020 	addeq	r2, r9, #32
    41c0:	02844018 	addeq	r4, r4, #24
    41c4:	e5941000 	ldr	r1, [r4]
    41c8:	e5821000 	str	r1, [r2]
    41cc:	e5941004 	ldr	r1, [r4, #4]
    41d0:	e5821004 	str	r1, [r2, #4]
    41d4:	e5941008 	ldr	r1, [r4, #8]
    41d8:	e5821008 	str	r1, [r2, #8]
    41dc:	e0653003 	rsb	r3, r5, r3
    41e0:	e0892005 	add	r2, r9, r5
    41e4:	e3833001 	orr	r3, r3, #1
    41e8:	e5823004 	str	r3, [r2, #4]
    41ec:	e5993004 	ldr	r3, [r9, #4]
    41f0:	e2033001 	and	r3, r3, #1
    41f4:	e1855003 	orr	r5, r5, r3
    41f8:	e59f3054 	ldr	r3, [pc, #84]	; 4254 <_realloc_r+0x570>
    41fc:	e5895004 	str	r5, [r9, #4]
    4200:	e1a00008 	mov	r0, r8
    4204:	e5832008 	str	r2, [r3, #8]
    4208:	ebfffeb4 	bl	3ce0 <__malloc_unlock>
    420c:	eafffedd 	b	3d88 <_realloc_r+0xa4>
    4210:	e5166004 	ldr	r6, [r6, #-4]
    4214:	e3c66003 	bic	r6, r6, #3
    4218:	e0866007 	add	r6, r6, r7
    421c:	eafffecc 	b	3d54 <_realloc_r+0x70>
    4220:	e1a01004 	mov	r1, r4
    4224:	e1a0000a 	mov	r0, r10
    4228:	ebfffe5e 	bl	3ba8 <memmove>
    422c:	e1a0400a 	mov	r4, r10
    4230:	e5993004 	ldr	r3, [r9, #4]
    4234:	e1a0a009 	mov	r10, r9
    4238:	eafffec5 	b	3d54 <_realloc_r+0x70>
    423c:	e1a00006 	mov	r0, r6
    4240:	e1a01004 	mov	r1, r4
    4244:	e58d3004 	str	r3, [sp, #4]
    4248:	ebfffe56 	bl	3ba8 <memmove>
    424c:	e59d3004 	ldr	r3, [sp, #4]
    4250:	eaffffe1 	b	41dc <_realloc_r+0x4f8>
    4254:	00006d50 	.word	0x00006d50

00004258 <_sbrk_r>:
    4258:	e92d4038 	push	{r3, r4, r5, lr}
    425c:	e59f4030 	ldr	r4, [pc, #48]	; 4294 <_sbrk_r+0x3c>
    4260:	e3a03000 	mov	r3, #0
    4264:	e1a05000 	mov	r5, r0
    4268:	e1a00001 	mov	r0, r1
    426c:	e5843000 	str	r3, [r4]
    4270:	eb00055c 	bl	57e8 <_sbrk>
    4274:	e3700001 	cmn	r0, #1
    4278:	0a000001 	beq	4284 <_sbrk_r+0x2c>
    427c:	e8bd4038 	pop	{r3, r4, r5, lr}
    4280:	e12fff1e 	bx	lr
    4284:	e5943000 	ldr	r3, [r4]
    4288:	e3530000 	cmp	r3, #0
    428c:	15853000 	strne	r3, [r5]
    4290:	eafffff9 	b	427c <_sbrk_r+0x24>
    4294:	000075d0 	.word	0x000075d0

00004298 <__swsetup_r>:
    4298:	e92d4038 	push	{r3, r4, r5, lr}
    429c:	e59f3128 	ldr	r3, [pc, #296]	; 43cc <__swsetup_r+0x134>
    42a0:	e5933000 	ldr	r3, [r3]
    42a4:	e3530000 	cmp	r3, #0
    42a8:	e1a05000 	mov	r5, r0
    42ac:	e1a04001 	mov	r4, r1
    42b0:	0a000002 	beq	42c0 <__swsetup_r+0x28>
    42b4:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    42b8:	e3520000 	cmp	r2, #0
    42bc:	0a00002e 	beq	437c <__swsetup_r+0xe4>
    42c0:	e1d430bc 	ldrh	r3, [r4, #12]
    42c4:	e3130008 	tst	r3, #8
    42c8:	e1a02003 	mov	r2, r3
    42cc:	0a00000c 	beq	4304 <__swsetup_r+0x6c>
    42d0:	e5942010 	ldr	r2, [r4, #16]
    42d4:	e3520000 	cmp	r2, #0
    42d8:	0a000012 	beq	4328 <__swsetup_r+0x90>
    42dc:	e2131001 	ands	r1, r3, #1
    42e0:	1a000019 	bne	434c <__swsetup_r+0xb4>
    42e4:	e3130002 	tst	r3, #2
    42e8:	05941014 	ldreq	r1, [r4, #20]
    42ec:	e3520000 	cmp	r2, #0
    42f0:	e5841008 	str	r1, [r4, #8]
    42f4:	0a00001b 	beq	4368 <__swsetup_r+0xd0>
    42f8:	e3a00000 	mov	r0, #0
    42fc:	e8bd4038 	pop	{r3, r4, r5, lr}
    4300:	e12fff1e 	bx	lr
    4304:	e3130010 	tst	r3, #16
    4308:	0a000019 	beq	4374 <__swsetup_r+0xdc>
    430c:	e3120004 	tst	r2, #4
    4310:	1a00001c 	bne	4388 <__swsetup_r+0xf0>
    4314:	e5942010 	ldr	r2, [r4, #16]
    4318:	e3833008 	orr	r3, r3, #8
    431c:	e3520000 	cmp	r2, #0
    4320:	e1c430bc 	strh	r3, [r4, #12]
    4324:	1affffec 	bne	42dc <__swsetup_r+0x44>
    4328:	e2031d0a 	and	r1, r3, #640	; 0x280
    432c:	e3510c02 	cmp	r1, #512	; 0x200
    4330:	0affffe9 	beq	42dc <__swsetup_r+0x44>
    4334:	e1a00005 	mov	r0, r5
    4338:	e1a01004 	mov	r1, r4
    433c:	eb00028e 	bl	4d7c <__smakebuf_r>
    4340:	e1d430bc 	ldrh	r3, [r4, #12]
    4344:	e5942010 	ldr	r2, [r4, #16]
    4348:	eaffffe3 	b	42dc <__swsetup_r+0x44>
    434c:	e5943014 	ldr	r3, [r4, #20]
    4350:	e3a01000 	mov	r1, #0
    4354:	e2633000 	rsb	r3, r3, #0
    4358:	e3520000 	cmp	r2, #0
    435c:	e5841008 	str	r1, [r4, #8]
    4360:	e5843018 	str	r3, [r4, #24]
    4364:	1affffe3 	bne	42f8 <__swsetup_r+0x60>
    4368:	e1d430bc 	ldrh	r3, [r4, #12]
    436c:	e3130080 	tst	r3, #128	; 0x80
    4370:	0affffe0 	beq	42f8 <__swsetup_r+0x60>
    4374:	e3e00000 	mvn	r0, #0
    4378:	eaffffdf 	b	42fc <__swsetup_r+0x64>
    437c:	e1a00003 	mov	r0, r3
    4380:	eb0000ec 	bl	4738 <__sinit>
    4384:	eaffffcd 	b	42c0 <__swsetup_r+0x28>
    4388:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    438c:	e3510000 	cmp	r1, #0
    4390:	0a000007 	beq	43b4 <__swsetup_r+0x11c>
    4394:	e2842040 	add	r2, r4, #64	; 0x40
    4398:	e1510002 	cmp	r1, r2
    439c:	0a000002 	beq	43ac <__swsetup_r+0x114>
    43a0:	e1a00005 	mov	r0, r5
    43a4:	eb000194 	bl	49fc <_free_r>
    43a8:	e1d430bc 	ldrh	r3, [r4, #12]
    43ac:	e3a02000 	mov	r2, #0
    43b0:	e5842030 	str	r2, [r4, #48]	; 0x30
    43b4:	e5942010 	ldr	r2, [r4, #16]
    43b8:	e3a01000 	mov	r1, #0
    43bc:	e3c33024 	bic	r3, r3, #36	; 0x24
    43c0:	e5841004 	str	r1, [r4, #4]
    43c4:	e5842000 	str	r2, [r4]
    43c8:	eaffffd2 	b	4318 <__swsetup_r+0x80>
    43cc:	00006920 	.word	0x00006920

000043d0 <_fflush_r>:
    43d0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    43d4:	e2507000 	subs	r7, r0, #0
    43d8:	e1a04001 	mov	r4, r1
    43dc:	0a000002 	beq	43ec <_fflush_r+0x1c>
    43e0:	e5973038 	ldr	r3, [r7, #56]	; 0x38
    43e4:	e3530000 	cmp	r3, #0
    43e8:	0a000059 	beq	4554 <_fflush_r+0x184>
    43ec:	e1d420bc 	ldrh	r2, [r4, #12]
    43f0:	e3520000 	cmp	r2, #0
    43f4:	0a000023 	beq	4488 <_fflush_r+0xb8>
    43f8:	e3120008 	tst	r2, #8
    43fc:	0a000024 	beq	4494 <_fflush_r+0xc4>
    4400:	e5946010 	ldr	r6, [r4, #16]
    4404:	e3560000 	cmp	r6, #0
    4408:	0a00001e 	beq	4488 <_fflush_r+0xb8>
    440c:	e5945000 	ldr	r5, [r4]
    4410:	e3120003 	tst	r2, #3
    4414:	05943014 	ldreq	r3, [r4, #20]
    4418:	e0665005 	rsb	r5, r6, r5
    441c:	13a03000 	movne	r3, #0
    4420:	e3550000 	cmp	r5, #0
    4424:	e5846000 	str	r6, [r4]
    4428:	e5843008 	str	r3, [r4, #8]
    442c:	ca000003 	bgt	4440 <_fflush_r+0x70>
    4430:	ea000014 	b	4488 <_fflush_r+0xb8>
    4434:	e3550000 	cmp	r5, #0
    4438:	e0866000 	add	r6, r6, r0
    443c:	da000011 	ble	4488 <_fflush_r+0xb8>
    4440:	e1a03005 	mov	r3, r5
    4444:	e1a02006 	mov	r2, r6
    4448:	e1a00007 	mov	r0, r7
    444c:	e594101c 	ldr	r1, [r4, #28]
    4450:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    4454:	e1a0e00f 	mov	lr, pc
    4458:	e12fff1c 	bx	r12
    445c:	e3500000 	cmp	r0, #0
    4460:	e0605005 	rsb	r5, r0, r5
    4464:	cafffff2 	bgt	4434 <_fflush_r+0x64>
    4468:	e1d430bc 	ldrh	r3, [r4, #12]
    446c:	e3833040 	orr	r3, r3, #64	; 0x40
    4470:	e1c430bc 	strh	r3, [r4, #12]
    4474:	e3e00000 	mvn	r0, #0
    4478:	ea000003 	b	448c <_fflush_r+0xbc>
    447c:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
    4480:	e3510000 	cmp	r1, #0
    4484:	ca000007 	bgt	44a8 <_fflush_r+0xd8>
    4488:	e3a00000 	mov	r0, #0
    448c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    4490:	e12fff1e 	bx	lr
    4494:	e5941004 	ldr	r1, [r4, #4]
    4498:	e3823b02 	orr	r3, r2, #2048	; 0x800
    449c:	e3510000 	cmp	r1, #0
    44a0:	e1c430bc 	strh	r3, [r4, #12]
    44a4:	dafffff4 	ble	447c <_fflush_r+0xac>
    44a8:	e594c028 	ldr	r12, [r4, #40]	; 0x28
    44ac:	e35c0000 	cmp	r12, #0
    44b0:	0afffff4 	beq	4488 <_fflush_r+0xb8>
    44b4:	e3a01000 	mov	r1, #0
    44b8:	e2126a01 	ands	r6, r2, #4096	; 0x1000
    44bc:	e5975000 	ldr	r5, [r7]
    44c0:	e5871000 	str	r1, [r7]
    44c4:	0a000024 	beq	455c <_fflush_r+0x18c>
    44c8:	e5942050 	ldr	r2, [r4, #80]	; 0x50
    44cc:	e3130004 	tst	r3, #4
    44d0:	0a000005 	beq	44ec <_fflush_r+0x11c>
    44d4:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    44d8:	e5943004 	ldr	r3, [r4, #4]
    44dc:	e3510000 	cmp	r1, #0
    44e0:	e0632002 	rsb	r2, r3, r2
    44e4:	1594303c 	ldrne	r3, [r4, #60]	; 0x3c
    44e8:	10632002 	rsbne	r2, r3, r2
    44ec:	e1a00007 	mov	r0, r7
    44f0:	e594101c 	ldr	r1, [r4, #28]
    44f4:	e3a03000 	mov	r3, #0
    44f8:	e1a0e00f 	mov	lr, pc
    44fc:	e12fff1c 	bx	r12
    4500:	e3700001 	cmn	r0, #1
    4504:	0a000020 	beq	458c <_fflush_r+0x1bc>
    4508:	e1d430bc 	ldrh	r3, [r4, #12]
    450c:	e5942010 	ldr	r2, [r4, #16]
    4510:	e3c31b02 	bic	r1, r3, #2048	; 0x800
    4514:	e3130a01 	tst	r3, #4096	; 0x1000
    4518:	e3a03000 	mov	r3, #0
    451c:	e1c410bc 	strh	r1, [r4, #12]
    4520:	e884000c 	stm	r4, {r2, r3}
    4524:	1a000028 	bne	45cc <_fflush_r+0x1fc>
    4528:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    452c:	e3510000 	cmp	r1, #0
    4530:	e5875000 	str	r5, [r7]
    4534:	0affffd3 	beq	4488 <_fflush_r+0xb8>
    4538:	e2843040 	add	r3, r4, #64	; 0x40
    453c:	e1510003 	cmp	r1, r3
    4540:	11a00007 	movne	r0, r7
    4544:	1b00012c 	blne	49fc <_free_r>
    4548:	e3a00000 	mov	r0, #0
    454c:	e5840030 	str	r0, [r4, #48]	; 0x30
    4550:	eaffffcd 	b	448c <_fflush_r+0xbc>
    4554:	eb000077 	bl	4738 <__sinit>
    4558:	eaffffa3 	b	43ec <_fflush_r+0x1c>
    455c:	e1a02006 	mov	r2, r6
    4560:	e1a00007 	mov	r0, r7
    4564:	e594101c 	ldr	r1, [r4, #28]
    4568:	e3a03001 	mov	r3, #1
    456c:	e1a0e00f 	mov	lr, pc
    4570:	e12fff1c 	bx	r12
    4574:	e3700001 	cmn	r0, #1
    4578:	e1a02000 	mov	r2, r0
    457c:	0a000014 	beq	45d4 <_fflush_r+0x204>
    4580:	e1d430bc 	ldrh	r3, [r4, #12]
    4584:	e594c028 	ldr	r12, [r4, #40]	; 0x28
    4588:	eaffffcf 	b	44cc <_fflush_r+0xfc>
    458c:	e597c000 	ldr	r12, [r7]
    4590:	e35c001d 	cmp	r12, #29
    4594:	8affffb3 	bhi	4468 <_fflush_r+0x98>
    4598:	e59f3058 	ldr	r3, [pc, #88]	; 45f8 <_fflush_r+0x228>
    459c:	e1b03c13 	lsls	r3, r3, r12
    45a0:	5affffb0 	bpl	4468 <_fflush_r+0x98>
    45a4:	e1d430bc 	ldrh	r3, [r4, #12]
    45a8:	e5942010 	ldr	r2, [r4, #16]
    45ac:	e3c31b02 	bic	r1, r3, #2048	; 0x800
    45b0:	e3130a01 	tst	r3, #4096	; 0x1000
    45b4:	e3a03000 	mov	r3, #0
    45b8:	e1c410bc 	strh	r1, [r4, #12]
    45bc:	e884000c 	stm	r4, {r2, r3}
    45c0:	0affffd8 	beq	4528 <_fflush_r+0x158>
    45c4:	e35c0000 	cmp	r12, #0
    45c8:	1affffd6 	bne	4528 <_fflush_r+0x158>
    45cc:	e5840050 	str	r0, [r4, #80]	; 0x50
    45d0:	eaffffd4 	b	4528 <_fflush_r+0x158>
    45d4:	e5973000 	ldr	r3, [r7]
    45d8:	e3530000 	cmp	r3, #0
    45dc:	0affffe7 	beq	4580 <_fflush_r+0x1b0>
    45e0:	e353001d 	cmp	r3, #29
    45e4:	13530016 	cmpne	r3, #22
    45e8:	05875000 	streq	r5, [r7]
    45ec:	01a00006 	moveq	r0, r6
    45f0:	0affffa5 	beq	448c <_fflush_r+0xbc>
    45f4:	eaffff9b 	b	4468 <_fflush_r+0x98>
    45f8:	80000204 	.word	0x80000204

000045fc <fflush>:
    45fc:	e2501000 	subs	r1, r0, #0
    4600:	e92d4008 	push	{r3, lr}
    4604:	0a000003 	beq	4618 <fflush+0x1c>
    4608:	e59f3020 	ldr	r3, [pc, #32]	; 4630 <fflush+0x34>
    460c:	e5930000 	ldr	r0, [r3]
    4610:	e8bd4008 	pop	{r3, lr}
    4614:	eaffff6d 	b	43d0 <_fflush_r>
    4618:	e59f3014 	ldr	r3, [pc, #20]	; 4634 <fflush+0x38>
    461c:	e59f1014 	ldr	r1, [pc, #20]	; 4638 <fflush+0x3c>
    4620:	e5930000 	ldr	r0, [r3]
    4624:	eb0001b1 	bl	4cf0 <_fwalk_reent>
    4628:	e8bd4008 	pop	{r3, lr}
    462c:	e12fff1e 	bx	lr
    4630:	00006920 	.word	0x00006920
    4634:	000064a8 	.word	0x000064a8
    4638:	000043d0 	.word	0x000043d0

0000463c <__fp_lock>:
    463c:	e3a00000 	mov	r0, #0
    4640:	e12fff1e 	bx	lr

00004644 <__fp_unlock>:
    4644:	e3a00000 	mov	r0, #0
    4648:	e12fff1e 	bx	lr

0000464c <_cleanup_r>:
    464c:	e92d4008 	push	{r3, lr}
    4650:	e59f1008 	ldr	r1, [pc, #8]	; 4660 <_cleanup_r+0x14>
    4654:	eb000183 	bl	4c68 <_fwalk>
    4658:	e8bd4008 	pop	{r3, lr}
    465c:	e12fff1e 	bx	lr
    4660:	000053fc 	.word	0x000053fc

00004664 <std.isra.0>:
    4664:	e3a03000 	mov	r3, #0
    4668:	e92d4010 	push	{r4, lr}
    466c:	e1a04000 	mov	r4, r0
    4670:	e1c010bc 	strh	r1, [r0, #12]
    4674:	e1c020be 	strh	r2, [r0, #14]
    4678:	e5803000 	str	r3, [r0]
    467c:	e5803004 	str	r3, [r0, #4]
    4680:	e5803008 	str	r3, [r0, #8]
    4684:	e5803064 	str	r3, [r0, #100]	; 0x64
    4688:	e5803010 	str	r3, [r0, #16]
    468c:	e5803014 	str	r3, [r0, #20]
    4690:	e5803018 	str	r3, [r0, #24]
    4694:	e1a01003 	mov	r1, r3
    4698:	e280005c 	add	r0, r0, #92	; 0x5c
    469c:	e3a02008 	mov	r2, #8
    46a0:	eb00020c 	bl	4ed8 <memset>
    46a4:	e59f3024 	ldr	r3, [pc, #36]	; 46d0 <std.isra.0+0x6c>
    46a8:	e5843020 	str	r3, [r4, #32]
    46ac:	e59f3020 	ldr	r3, [pc, #32]	; 46d4 <std.isra.0+0x70>
    46b0:	e5843024 	str	r3, [r4, #36]	; 0x24
    46b4:	e59f301c 	ldr	r3, [pc, #28]	; 46d8 <std.isra.0+0x74>
    46b8:	e5843028 	str	r3, [r4, #40]	; 0x28
    46bc:	e59f3018 	ldr	r3, [pc, #24]	; 46dc <std.isra.0+0x78>
    46c0:	e584401c 	str	r4, [r4, #28]
    46c4:	e584302c 	str	r3, [r4, #44]	; 0x2c
    46c8:	e8bd4010 	pop	{r4, lr}
    46cc:	e12fff1e 	bx	lr
    46d0:	000051a8 	.word	0x000051a8
    46d4:	000051e4 	.word	0x000051e4
    46d8:	0000523c 	.word	0x0000523c
    46dc:	00005270 	.word	0x00005270

000046e0 <__sfmoreglue>:
    46e0:	e92d4070 	push	{r4, r5, r6, lr}
    46e4:	e0816081 	add	r6, r1, r1, lsl #1
    46e8:	e0816106 	add	r6, r1, r6, lsl #2
    46ec:	e1a06186 	lsl	r6, r6, #3
    46f0:	e1a05001 	mov	r5, r1
    46f4:	e286100c 	add	r1, r6, #12
    46f8:	ebfffa99 	bl	3164 <_malloc_r>
    46fc:	e2504000 	subs	r4, r0, #0
    4700:	0a000005 	beq	471c <__sfmoreglue+0x3c>
    4704:	e284000c 	add	r0, r4, #12
    4708:	e3a01000 	mov	r1, #0
    470c:	e8840022 	stm	r4, {r1, r5}
    4710:	e5840008 	str	r0, [r4, #8]
    4714:	e1a02006 	mov	r2, r6
    4718:	eb0001ee 	bl	4ed8 <memset>
    471c:	e1a00004 	mov	r0, r4
    4720:	e8bd4070 	pop	{r4, r5, r6, lr}
    4724:	e12fff1e 	bx	lr

00004728 <_cleanup>:
    4728:	e59f3004 	ldr	r3, [pc, #4]	; 4734 <_cleanup+0xc>
    472c:	e5930000 	ldr	r0, [r3]
    4730:	eaffffc5 	b	464c <_cleanup_r>
    4734:	000064a8 	.word	0x000064a8

00004738 <__sinit>:
    4738:	e92d4038 	push	{r3, r4, r5, lr}
    473c:	e5903038 	ldr	r3, [r0, #56]	; 0x38
    4740:	e3530000 	cmp	r3, #0
    4744:	e1a04000 	mov	r4, r0
    4748:	0a000001 	beq	4754 <__sinit+0x1c>
    474c:	e8bd4038 	pop	{r3, r4, r5, lr}
    4750:	e12fff1e 	bx	lr
    4754:	e59fe050 	ldr	lr, [pc, #80]	; 47ac <__sinit+0x74>
    4758:	e280cfbb 	add	r12, r0, #748	; 0x2ec
    475c:	e3a05001 	mov	r5, #1
    4760:	e1a02003 	mov	r2, r3
    4764:	e58432e0 	str	r3, [r4, #736]	; 0x2e0
    4768:	e3a03003 	mov	r3, #3
    476c:	e584e03c 	str	lr, [r4, #60]	; 0x3c
    4770:	e58432e4 	str	r3, [r4, #740]	; 0x2e4
    4774:	e584c2e8 	str	r12, [r4, #744]	; 0x2e8
    4778:	e5900004 	ldr	r0, [r0, #4]
    477c:	e3a01004 	mov	r1, #4
    4780:	e5845038 	str	r5, [r4, #56]	; 0x38
    4784:	ebffffb6 	bl	4664 <std.isra.0>
    4788:	e5940008 	ldr	r0, [r4, #8]
    478c:	e1a02005 	mov	r2, r5
    4790:	e3a01009 	mov	r1, #9
    4794:	ebffffb2 	bl	4664 <std.isra.0>
    4798:	e594000c 	ldr	r0, [r4, #12]
    479c:	e3a01012 	mov	r1, #18
    47a0:	e3a02002 	mov	r2, #2
    47a4:	e8bd4038 	pop	{r3, r4, r5, lr}
    47a8:	eaffffad 	b	4664 <std.isra.0>
    47ac:	0000464c 	.word	0x0000464c

000047b0 <__sfp>:
    47b0:	e59f30ec 	ldr	r3, [pc, #236]	; 48a4 <__sfp+0xf4>
    47b4:	e92d4070 	push	{r4, r5, r6, lr}
    47b8:	e5935000 	ldr	r5, [r3]
    47bc:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    47c0:	e3530000 	cmp	r3, #0
    47c4:	e1a06000 	mov	r6, r0
    47c8:	0a000028 	beq	4870 <__sfp+0xc0>
    47cc:	e2855e2e 	add	r5, r5, #736	; 0x2e0
    47d0:	e5953004 	ldr	r3, [r5, #4]
    47d4:	e2533001 	subs	r3, r3, #1
    47d8:	e5954008 	ldr	r4, [r5, #8]
    47dc:	5a000004 	bpl	47f4 <__sfp+0x44>
    47e0:	ea00001d 	b	485c <__sfp+0xac>
    47e4:	e2433001 	sub	r3, r3, #1
    47e8:	e3730001 	cmn	r3, #1
    47ec:	e2844068 	add	r4, r4, #104	; 0x68
    47f0:	0a000019 	beq	485c <__sfp+0xac>
    47f4:	e1d420fc 	ldrsh	r2, [r4, #12]
    47f8:	e3520000 	cmp	r2, #0
    47fc:	1afffff8 	bne	47e4 <__sfp+0x34>
    4800:	e3e03000 	mvn	r3, #0
    4804:	e3a05000 	mov	r5, #0
    4808:	e1c430be 	strh	r3, [r4, #14]
    480c:	e3a03001 	mov	r3, #1
    4810:	e1c430bc 	strh	r3, [r4, #12]
    4814:	e5845064 	str	r5, [r4, #100]	; 0x64
    4818:	e5845000 	str	r5, [r4]
    481c:	e5845008 	str	r5, [r4, #8]
    4820:	e5845004 	str	r5, [r4, #4]
    4824:	e5845010 	str	r5, [r4, #16]
    4828:	e5845014 	str	r5, [r4, #20]
    482c:	e5845018 	str	r5, [r4, #24]
    4830:	e284005c 	add	r0, r4, #92	; 0x5c
    4834:	e1a01005 	mov	r1, r5
    4838:	e3a02008 	mov	r2, #8
    483c:	eb0001a5 	bl	4ed8 <memset>
    4840:	e5845030 	str	r5, [r4, #48]	; 0x30
    4844:	e5845034 	str	r5, [r4, #52]	; 0x34
    4848:	e5845044 	str	r5, [r4, #68]	; 0x44
    484c:	e5845048 	str	r5, [r4, #72]	; 0x48
    4850:	e1a00004 	mov	r0, r4
    4854:	e8bd4070 	pop	{r4, r5, r6, lr}
    4858:	e12fff1e 	bx	lr
    485c:	e5950000 	ldr	r0, [r5]
    4860:	e3500000 	cmp	r0, #0
    4864:	0a000004 	beq	487c <__sfp+0xcc>
    4868:	e1a05000 	mov	r5, r0
    486c:	eaffffd7 	b	47d0 <__sfp+0x20>
    4870:	e1a00005 	mov	r0, r5
    4874:	ebffffaf 	bl	4738 <__sinit>
    4878:	eaffffd3 	b	47cc <__sfp+0x1c>
    487c:	e1a00006 	mov	r0, r6
    4880:	e3a01004 	mov	r1, #4
    4884:	ebffff95 	bl	46e0 <__sfmoreglue>
    4888:	e3500000 	cmp	r0, #0
    488c:	e5850000 	str	r0, [r5]
    4890:	1afffff4 	bne	4868 <__sfp+0xb8>
    4894:	e3a0300c 	mov	r3, #12
    4898:	e5863000 	str	r3, [r6]
    489c:	e1a04000 	mov	r4, r0
    48a0:	eaffffea 	b	4850 <__sfp+0xa0>
    48a4:	000064a8 	.word	0x000064a8

000048a8 <__sfp_lock_acquire>:
    48a8:	e12fff1e 	bx	lr

000048ac <__sfp_lock_release>:
    48ac:	e12fff1e 	bx	lr

000048b0 <__sinit_lock_acquire>:
    48b0:	e12fff1e 	bx	lr

000048b4 <__sinit_lock_release>:
    48b4:	e12fff1e 	bx	lr

000048b8 <__fp_lock_all>:
    48b8:	e92d4008 	push	{r3, lr}
    48bc:	e59f3010 	ldr	r3, [pc, #16]	; 48d4 <__fp_lock_all+0x1c>
    48c0:	e59f1010 	ldr	r1, [pc, #16]	; 48d8 <__fp_lock_all+0x20>
    48c4:	e5930000 	ldr	r0, [r3]
    48c8:	eb0000e6 	bl	4c68 <_fwalk>
    48cc:	e8bd4008 	pop	{r3, lr}
    48d0:	e12fff1e 	bx	lr
    48d4:	00006920 	.word	0x00006920
    48d8:	0000463c 	.word	0x0000463c

000048dc <__fp_unlock_all>:
    48dc:	e92d4008 	push	{r3, lr}
    48e0:	e59f3010 	ldr	r3, [pc, #16]	; 48f8 <__fp_unlock_all+0x1c>
    48e4:	e59f1010 	ldr	r1, [pc, #16]	; 48fc <__fp_unlock_all+0x20>
    48e8:	e5930000 	ldr	r0, [r3]
    48ec:	eb0000dd 	bl	4c68 <_fwalk>
    48f0:	e8bd4008 	pop	{r3, lr}
    48f4:	e12fff1e 	bx	lr
    48f8:	00006920 	.word	0x00006920
    48fc:	00004644 	.word	0x00004644

00004900 <_malloc_trim_r>:
    4900:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    4904:	e59f50e4 	ldr	r5, [pc, #228]	; 49f0 <_malloc_trim_r+0xf0>
    4908:	e1a07001 	mov	r7, r1
    490c:	e1a04000 	mov	r4, r0
    4910:	ebfffcf1 	bl	3cdc <__malloc_lock>
    4914:	e5953008 	ldr	r3, [r5, #8]
    4918:	e5936004 	ldr	r6, [r3, #4]
    491c:	e3c66003 	bic	r6, r6, #3
    4920:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    4924:	e283300f 	add	r3, r3, #15
    4928:	e0677003 	rsb	r7, r7, r3
    492c:	e1a07627 	lsr	r7, r7, #12
    4930:	e2477001 	sub	r7, r7, #1
    4934:	e1a07607 	lsl	r7, r7, #12
    4938:	e3570a01 	cmp	r7, #4096	; 0x1000
    493c:	ba000006 	blt	495c <_malloc_trim_r+0x5c>
    4940:	e1a00004 	mov	r0, r4
    4944:	e3a01000 	mov	r1, #0
    4948:	ebfffe42 	bl	4258 <_sbrk_r>
    494c:	e5953008 	ldr	r3, [r5, #8]
    4950:	e0833006 	add	r3, r3, r6
    4954:	e1500003 	cmp	r0, r3
    4958:	0a000004 	beq	4970 <_malloc_trim_r+0x70>
    495c:	e1a00004 	mov	r0, r4
    4960:	ebfffcde 	bl	3ce0 <__malloc_unlock>
    4964:	e3a00000 	mov	r0, #0
    4968:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    496c:	e12fff1e 	bx	lr
    4970:	e1a00004 	mov	r0, r4
    4974:	e2671000 	rsb	r1, r7, #0
    4978:	ebfffe36 	bl	4258 <_sbrk_r>
    497c:	e3700001 	cmn	r0, #1
    4980:	0a00000b 	beq	49b4 <_malloc_trim_r+0xb4>
    4984:	e59f3068 	ldr	r3, [pc, #104]	; 49f4 <_malloc_trim_r+0xf4>
    4988:	e5952008 	ldr	r2, [r5, #8]
    498c:	e5931000 	ldr	r1, [r3]
    4990:	e0676006 	rsb	r6, r7, r6
    4994:	e3866001 	orr	r6, r6, #1
    4998:	e0677001 	rsb	r7, r7, r1
    499c:	e1a00004 	mov	r0, r4
    49a0:	e5826004 	str	r6, [r2, #4]
    49a4:	e5837000 	str	r7, [r3]
    49a8:	ebfffccc 	bl	3ce0 <__malloc_unlock>
    49ac:	e3a00001 	mov	r0, #1
    49b0:	eaffffec 	b	4968 <_malloc_trim_r+0x68>
    49b4:	e1a00004 	mov	r0, r4
    49b8:	e3a01000 	mov	r1, #0
    49bc:	ebfffe25 	bl	4258 <_sbrk_r>
    49c0:	e5953008 	ldr	r3, [r5, #8]
    49c4:	e0632000 	rsb	r2, r3, r0
    49c8:	e352000f 	cmp	r2, #15
    49cc:	daffffe2 	ble	495c <_malloc_trim_r+0x5c>
    49d0:	e59f1020 	ldr	r1, [pc, #32]	; 49f8 <_malloc_trim_r+0xf8>
    49d4:	e5911000 	ldr	r1, [r1]
    49d8:	e0610000 	rsb	r0, r1, r0
    49dc:	e59f1010 	ldr	r1, [pc, #16]	; 49f4 <_malloc_trim_r+0xf4>
    49e0:	e3822001 	orr	r2, r2, #1
    49e4:	e5810000 	str	r0, [r1]
    49e8:	e5832004 	str	r2, [r3, #4]
    49ec:	eaffffda 	b	495c <_malloc_trim_r+0x5c>
    49f0:	00006d50 	.word	0x00006d50
    49f4:	000075a0 	.word	0x000075a0
    49f8:	00007158 	.word	0x00007158

000049fc <_free_r>:
    49fc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    4a00:	e2514000 	subs	r4, r1, #0
    4a04:	e1a06000 	mov	r6, r0
    4a08:	0a000046 	beq	4b28 <_free_r+0x12c>
    4a0c:	ebfffcb2 	bl	3cdc <__malloc_lock>
    4a10:	e514e004 	ldr	lr, [r4, #-4]
    4a14:	e59f1238 	ldr	r1, [pc, #568]	; 4c54 <_free_r+0x258>
    4a18:	e244c008 	sub	r12, r4, #8
    4a1c:	e3ce3001 	bic	r3, lr, #1
    4a20:	e08c2003 	add	r2, r12, r3
    4a24:	e5910008 	ldr	r0, [r1, #8]
    4a28:	e5925004 	ldr	r5, [r2, #4]
    4a2c:	e1500002 	cmp	r0, r2
    4a30:	e3c55003 	bic	r5, r5, #3
    4a34:	0a00004a 	beq	4b64 <_free_r+0x168>
    4a38:	e21ee001 	ands	lr, lr, #1
    4a3c:	e5825004 	str	r5, [r2, #4]
    4a40:	13a0e000 	movne	lr, #0
    4a44:	1a000009 	bne	4a70 <_free_r+0x74>
    4a48:	e5144008 	ldr	r4, [r4, #-8]
    4a4c:	e064c00c 	rsb	r12, r4, r12
    4a50:	e59c0008 	ldr	r0, [r12, #8]
    4a54:	e2817008 	add	r7, r1, #8
    4a58:	e1500007 	cmp	r0, r7
    4a5c:	e0833004 	add	r3, r3, r4
    4a60:	159c400c 	ldrne	r4, [r12, #12]
    4a64:	1580400c 	strne	r4, [r0, #12]
    4a68:	15840008 	strne	r0, [r4, #8]
    4a6c:	03a0e001 	moveq	lr, #1
    4a70:	e0820005 	add	r0, r2, r5
    4a74:	e5900004 	ldr	r0, [r0, #4]
    4a78:	e3100001 	tst	r0, #1
    4a7c:	1a000009 	bne	4aa8 <_free_r+0xac>
    4a80:	e35e0000 	cmp	lr, #0
    4a84:	e5920008 	ldr	r0, [r2, #8]
    4a88:	e0833005 	add	r3, r3, r5
    4a8c:	1a000002 	bne	4a9c <_free_r+0xa0>
    4a90:	e59f41c0 	ldr	r4, [pc, #448]	; 4c58 <_free_r+0x25c>
    4a94:	e1500004 	cmp	r0, r4
    4a98:	0a000047 	beq	4bbc <_free_r+0x1c0>
    4a9c:	e592200c 	ldr	r2, [r2, #12]
    4aa0:	e580200c 	str	r2, [r0, #12]
    4aa4:	e5820008 	str	r0, [r2, #8]
    4aa8:	e3832001 	orr	r2, r3, #1
    4aac:	e35e0000 	cmp	lr, #0
    4ab0:	e58c2004 	str	r2, [r12, #4]
    4ab4:	e78c3003 	str	r3, [r12, r3]
    4ab8:	1a000018 	bne	4b20 <_free_r+0x124>
    4abc:	e3530c02 	cmp	r3, #512	; 0x200
    4ac0:	3a00001a 	bcc	4b30 <_free_r+0x134>
    4ac4:	e1a024a3 	lsr	r2, r3, #9
    4ac8:	e3520004 	cmp	r2, #4
    4acc:	8a000042 	bhi	4bdc <_free_r+0x1e0>
    4ad0:	e1a0e323 	lsr	lr, r3, #6
    4ad4:	e28ee038 	add	lr, lr, #56	; 0x38
    4ad8:	e1a0008e 	lsl	r0, lr, #1
    4adc:	e0810100 	add	r0, r1, r0, lsl #2
    4ae0:	e5902008 	ldr	r2, [r0, #8]
    4ae4:	e1520000 	cmp	r2, r0
    4ae8:	e59f1164 	ldr	r1, [pc, #356]	; 4c54 <_free_r+0x258>
    4aec:	0a000044 	beq	4c04 <_free_r+0x208>
    4af0:	e5921004 	ldr	r1, [r2, #4]
    4af4:	e3c11003 	bic	r1, r1, #3
    4af8:	e1530001 	cmp	r3, r1
    4afc:	2a000002 	bcs	4b0c <_free_r+0x110>
    4b00:	e5922008 	ldr	r2, [r2, #8]
    4b04:	e1500002 	cmp	r0, r2
    4b08:	1afffff8 	bne	4af0 <_free_r+0xf4>
    4b0c:	e592300c 	ldr	r3, [r2, #12]
    4b10:	e58c300c 	str	r3, [r12, #12]
    4b14:	e58c2008 	str	r2, [r12, #8]
    4b18:	e582c00c 	str	r12, [r2, #12]
    4b1c:	e583c008 	str	r12, [r3, #8]
    4b20:	e1a00006 	mov	r0, r6
    4b24:	ebfffc6d 	bl	3ce0 <__malloc_unlock>
    4b28:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    4b2c:	e12fff1e 	bx	lr
    4b30:	e5912004 	ldr	r2, [r1, #4]
    4b34:	e1a031a3 	lsr	r3, r3, #3
    4b38:	e1a00143 	asr	r0, r3, #2
    4b3c:	e3a0e001 	mov	lr, #1
    4b40:	e182001e 	orr	r0, r2, lr, lsl r0
    4b44:	e0813183 	add	r3, r1, r3, lsl #3
    4b48:	e5932008 	ldr	r2, [r3, #8]
    4b4c:	e58c300c 	str	r3, [r12, #12]
    4b50:	e58c2008 	str	r2, [r12, #8]
    4b54:	e5810004 	str	r0, [r1, #4]
    4b58:	e583c008 	str	r12, [r3, #8]
    4b5c:	e582c00c 	str	r12, [r2, #12]
    4b60:	eaffffee 	b	4b20 <_free_r+0x124>
    4b64:	e31e0001 	tst	lr, #1
    4b68:	e0853003 	add	r3, r5, r3
    4b6c:	1a000006 	bne	4b8c <_free_r+0x190>
    4b70:	e5142008 	ldr	r2, [r4, #-8]
    4b74:	e062c00c 	rsb	r12, r2, r12
    4b78:	e59c000c 	ldr	r0, [r12, #12]
    4b7c:	e59ce008 	ldr	lr, [r12, #8]
    4b80:	e58e000c 	str	r0, [lr, #12]
    4b84:	e580e008 	str	lr, [r0, #8]
    4b88:	e0833002 	add	r3, r3, r2
    4b8c:	e59f20c8 	ldr	r2, [pc, #200]	; 4c5c <_free_r+0x260>
    4b90:	e5920000 	ldr	r0, [r2]
    4b94:	e3832001 	orr	r2, r3, #1
    4b98:	e1530000 	cmp	r3, r0
    4b9c:	e58c2004 	str	r2, [r12, #4]
    4ba0:	e581c008 	str	r12, [r1, #8]
    4ba4:	3affffdd 	bcc	4b20 <_free_r+0x124>
    4ba8:	e59f30b0 	ldr	r3, [pc, #176]	; 4c60 <_free_r+0x264>
    4bac:	e1a00006 	mov	r0, r6
    4bb0:	e5931000 	ldr	r1, [r3]
    4bb4:	ebffff51 	bl	4900 <_malloc_trim_r>
    4bb8:	eaffffd8 	b	4b20 <_free_r+0x124>
    4bbc:	e3832001 	orr	r2, r3, #1
    4bc0:	e581c014 	str	r12, [r1, #20]
    4bc4:	e581c010 	str	r12, [r1, #16]
    4bc8:	e58c000c 	str	r0, [r12, #12]
    4bcc:	e58c0008 	str	r0, [r12, #8]
    4bd0:	e58c2004 	str	r2, [r12, #4]
    4bd4:	e78c3003 	str	r3, [r12, r3]
    4bd8:	eaffffd0 	b	4b20 <_free_r+0x124>
    4bdc:	e3520014 	cmp	r2, #20
    4be0:	9282e05b 	addls	lr, r2, #91	; 0x5b
    4be4:	91a0008e 	lslls	r0, lr, #1
    4be8:	9affffbb 	bls	4adc <_free_r+0xe0>
    4bec:	e3520054 	cmp	r2, #84	; 0x54
    4bf0:	8a00000a 	bhi	4c20 <_free_r+0x224>
    4bf4:	e1a0e623 	lsr	lr, r3, #12
    4bf8:	e28ee06e 	add	lr, lr, #110	; 0x6e
    4bfc:	e1a0008e 	lsl	r0, lr, #1
    4c00:	eaffffb5 	b	4adc <_free_r+0xe0>
    4c04:	e5913004 	ldr	r3, [r1, #4]
    4c08:	e1a0e14e 	asr	lr, lr, #2
    4c0c:	e3a00001 	mov	r0, #1
    4c10:	e1830e10 	orr	r0, r3, r0, lsl lr
    4c14:	e1a03002 	mov	r3, r2
    4c18:	e5810004 	str	r0, [r1, #4]
    4c1c:	eaffffbb 	b	4b10 <_free_r+0x114>
    4c20:	e3520f55 	cmp	r2, #340	; 0x154
    4c24:	91a0e7a3 	lsrls	lr, r3, #15
    4c28:	928ee077 	addls	lr, lr, #119	; 0x77
    4c2c:	91a0008e 	lslls	r0, lr, #1
    4c30:	9affffa9 	bls	4adc <_free_r+0xe0>
    4c34:	e59f0028 	ldr	r0, [pc, #40]	; 4c64 <_free_r+0x268>
    4c38:	e1520000 	cmp	r2, r0
    4c3c:	91a0e923 	lsrls	lr, r3, #18
    4c40:	928ee07c 	addls	lr, lr, #124	; 0x7c
    4c44:	91a0008e 	lslls	r0, lr, #1
    4c48:	83a000fc 	movhi	r0, #252	; 0xfc
    4c4c:	83a0e07e 	movhi	lr, #126	; 0x7e
    4c50:	eaffffa1 	b	4adc <_free_r+0xe0>
    4c54:	00006d50 	.word	0x00006d50
    4c58:	00006d58 	.word	0x00006d58
    4c5c:	0000715c 	.word	0x0000715c
    4c60:	0000759c 	.word	0x0000759c
    4c64:	00000554 	.word	0x00000554

00004c68 <_fwalk>:
    4c68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    4c6c:	e1a06000 	mov	r6, r0
    4c70:	e1a08001 	mov	r8, r1
    4c74:	ebffff0b 	bl	48a8 <__sfp_lock_acquire>
    4c78:	e2966e2e 	adds	r6, r6, #736	; 0x2e0
    4c7c:	0a000019 	beq	4ce8 <_fwalk+0x80>
    4c80:	e3a07000 	mov	r7, #0
    4c84:	e5965004 	ldr	r5, [r6, #4]
    4c88:	e2555001 	subs	r5, r5, #1
    4c8c:	e5964008 	ldr	r4, [r6, #8]
    4c90:	4a00000d 	bmi	4ccc <_fwalk+0x64>
    4c94:	e1d430fc 	ldrsh	r3, [r4, #12]
    4c98:	e3530000 	cmp	r3, #0
    4c9c:	e2455001 	sub	r5, r5, #1
    4ca0:	0a000006 	beq	4cc0 <_fwalk+0x58>
    4ca4:	e1d430fe 	ldrsh	r3, [r4, #14]
    4ca8:	e3730001 	cmn	r3, #1
    4cac:	e1a00004 	mov	r0, r4
    4cb0:	0a000002 	beq	4cc0 <_fwalk+0x58>
    4cb4:	e1a0e00f 	mov	lr, pc
    4cb8:	e12fff18 	bx	r8
    4cbc:	e1877000 	orr	r7, r7, r0
    4cc0:	e3750001 	cmn	r5, #1
    4cc4:	e2844068 	add	r4, r4, #104	; 0x68
    4cc8:	1afffff1 	bne	4c94 <_fwalk+0x2c>
    4ccc:	e5966000 	ldr	r6, [r6]
    4cd0:	e3560000 	cmp	r6, #0
    4cd4:	1affffea 	bne	4c84 <_fwalk+0x1c>
    4cd8:	ebfffef3 	bl	48ac <__sfp_lock_release>
    4cdc:	e1a00007 	mov	r0, r7
    4ce0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    4ce4:	e12fff1e 	bx	lr
    4ce8:	e1a07006 	mov	r7, r6
    4cec:	eafffff9 	b	4cd8 <_fwalk+0x70>

00004cf0 <_fwalk_reent>:
    4cf0:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    4cf4:	e1a07000 	mov	r7, r0
    4cf8:	e1a08001 	mov	r8, r1
    4cfc:	ebfffee9 	bl	48a8 <__sfp_lock_acquire>
    4d00:	e2976e2e 	adds	r6, r7, #736	; 0x2e0
    4d04:	0a00001a 	beq	4d74 <_fwalk_reent+0x84>
    4d08:	e3a0a000 	mov	r10, #0
    4d0c:	e5965004 	ldr	r5, [r6, #4]
    4d10:	e2555001 	subs	r5, r5, #1
    4d14:	e5964008 	ldr	r4, [r6, #8]
    4d18:	4a00000e 	bmi	4d58 <_fwalk_reent+0x68>
    4d1c:	e1d430fc 	ldrsh	r3, [r4, #12]
    4d20:	e3530000 	cmp	r3, #0
    4d24:	e2455001 	sub	r5, r5, #1
    4d28:	0a000007 	beq	4d4c <_fwalk_reent+0x5c>
    4d2c:	e1d430fe 	ldrsh	r3, [r4, #14]
    4d30:	e3730001 	cmn	r3, #1
    4d34:	e1a01004 	mov	r1, r4
    4d38:	e1a00007 	mov	r0, r7
    4d3c:	0a000002 	beq	4d4c <_fwalk_reent+0x5c>
    4d40:	e1a0e00f 	mov	lr, pc
    4d44:	e12fff18 	bx	r8
    4d48:	e18aa000 	orr	r10, r10, r0
    4d4c:	e3750001 	cmn	r5, #1
    4d50:	e2844068 	add	r4, r4, #104	; 0x68
    4d54:	1afffff0 	bne	4d1c <_fwalk_reent+0x2c>
    4d58:	e5966000 	ldr	r6, [r6]
    4d5c:	e3560000 	cmp	r6, #0
    4d60:	1affffe9 	bne	4d0c <_fwalk_reent+0x1c>
    4d64:	ebfffed0 	bl	48ac <__sfp_lock_release>
    4d68:	e1a0000a 	mov	r0, r10
    4d6c:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    4d70:	e12fff1e 	bx	lr
    4d74:	e1a0a006 	mov	r10, r6
    4d78:	eafffff9 	b	4d64 <_fwalk_reent+0x74>

00004d7c <__smakebuf_r>:
    4d7c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    4d80:	e1d130bc 	ldrh	r3, [r1, #12]
    4d84:	e3130002 	tst	r3, #2
    4d88:	e24dd044 	sub	sp, sp, #68	; 0x44
    4d8c:	e1a04001 	mov	r4, r1
    4d90:	e1a05000 	mov	r5, r0
    4d94:	1a00002b 	bne	4e48 <__smakebuf_r+0xcc>
    4d98:	e1d110fe 	ldrsh	r1, [r1, #14]
    4d9c:	e3510000 	cmp	r1, #0
    4da0:	ba000010 	blt	4de8 <__smakebuf_r+0x6c>
    4da4:	e28d2004 	add	r2, sp, #4
    4da8:	eb000198 	bl	5410 <_fstat_r>
    4dac:	e3500000 	cmp	r0, #0
    4db0:	ba00000b 	blt	4de4 <__smakebuf_r+0x68>
    4db4:	e59d3008 	ldr	r3, [sp, #8]
    4db8:	e2033a0f 	and	r3, r3, #61440	; 0xf000
    4dbc:	e2532a02 	subs	r2, r3, #8192	; 0x2000
    4dc0:	e2727000 	rsbs	r7, r2, #0
    4dc4:	e0b77002 	adcs	r7, r7, r2
    4dc8:	e3530902 	cmp	r3, #32768	; 0x8000
    4dcc:	0a000023 	beq	4e60 <__smakebuf_r+0xe4>
    4dd0:	e1d430bc 	ldrh	r3, [r4, #12]
    4dd4:	e3833b02 	orr	r3, r3, #2048	; 0x800
    4dd8:	e1c430bc 	strh	r3, [r4, #12]
    4ddc:	e3a06b01 	mov	r6, #1024	; 0x400
    4de0:	ea000006 	b	4e00 <__smakebuf_r+0x84>
    4de4:	e1d430bc 	ldrh	r3, [r4, #12]
    4de8:	e3130080 	tst	r3, #128	; 0x80
    4dec:	e3833b02 	orr	r3, r3, #2048	; 0x800
    4df0:	e1c430bc 	strh	r3, [r4, #12]
    4df4:	03a06b01 	moveq	r6, #1024	; 0x400
    4df8:	13a06040 	movne	r6, #64	; 0x40
    4dfc:	e3a07000 	mov	r7, #0
    4e00:	e1a00005 	mov	r0, r5
    4e04:	e1a01006 	mov	r1, r6
    4e08:	ebfff8d5 	bl	3164 <_malloc_r>
    4e0c:	e3500000 	cmp	r0, #0
    4e10:	e1d430bc 	ldrh	r3, [r4, #12]
    4e14:	0a000023 	beq	4ea8 <__smakebuf_r+0x12c>
    4e18:	e59f20b0 	ldr	r2, [pc, #176]	; 4ed0 <__smakebuf_r+0x154>
    4e1c:	e3833080 	orr	r3, r3, #128	; 0x80
    4e20:	e3570000 	cmp	r7, #0
    4e24:	e585203c 	str	r2, [r5, #60]	; 0x3c
    4e28:	e1c430bc 	strh	r3, [r4, #12]
    4e2c:	e5840000 	str	r0, [r4]
    4e30:	e5840010 	str	r0, [r4, #16]
    4e34:	e5846014 	str	r6, [r4, #20]
    4e38:	1a000012 	bne	4e88 <__smakebuf_r+0x10c>
    4e3c:	e28dd044 	add	sp, sp, #68	; 0x44
    4e40:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    4e44:	e12fff1e 	bx	lr
    4e48:	e2813043 	add	r3, r1, #67	; 0x43
    4e4c:	e5813000 	str	r3, [r1]
    4e50:	e5813010 	str	r3, [r1, #16]
    4e54:	e3a03001 	mov	r3, #1
    4e58:	e5813014 	str	r3, [r1, #20]
    4e5c:	eafffff6 	b	4e3c <__smakebuf_r+0xc0>
    4e60:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    4e64:	e59f3068 	ldr	r3, [pc, #104]	; 4ed4 <__smakebuf_r+0x158>
    4e68:	e1520003 	cmp	r2, r3
    4e6c:	1affffd7 	bne	4dd0 <__smakebuf_r+0x54>
    4e70:	e1d430bc 	ldrh	r3, [r4, #12]
    4e74:	e3a06b01 	mov	r6, #1024	; 0x400
    4e78:	e1833006 	orr	r3, r3, r6
    4e7c:	e1c430bc 	strh	r3, [r4, #12]
    4e80:	e584604c 	str	r6, [r4, #76]	; 0x4c
    4e84:	eaffffdd 	b	4e00 <__smakebuf_r+0x84>
    4e88:	e1a00005 	mov	r0, r5
    4e8c:	e1d410fe 	ldrsh	r1, [r4, #14]
    4e90:	eb00016e 	bl	5450 <_isatty_r>
    4e94:	e3500000 	cmp	r0, #0
    4e98:	11d430bc 	ldrhne	r3, [r4, #12]
    4e9c:	13833001 	orrne	r3, r3, #1
    4ea0:	11c430bc 	strhne	r3, [r4, #12]
    4ea4:	eaffffe4 	b	4e3c <__smakebuf_r+0xc0>
    4ea8:	e3130c02 	tst	r3, #512	; 0x200
    4eac:	1affffe2 	bne	4e3c <__smakebuf_r+0xc0>
    4eb0:	e3833002 	orr	r3, r3, #2
    4eb4:	e2842043 	add	r2, r4, #67	; 0x43
    4eb8:	e1c430bc 	strh	r3, [r4, #12]
    4ebc:	e3a03001 	mov	r3, #1
    4ec0:	e5842000 	str	r2, [r4]
    4ec4:	e5842010 	str	r2, [r4, #16]
    4ec8:	e5843014 	str	r3, [r4, #20]
    4ecc:	eaffffda 	b	4e3c <__smakebuf_r+0xc0>
    4ed0:	0000464c 	.word	0x0000464c
    4ed4:	0000523c 	.word	0x0000523c

00004ed8 <memset>:
    4ed8:	e3520003 	cmp	r2, #3
    4edc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    4ee0:	e20110ff 	and	r1, r1, #255	; 0xff
    4ee4:	8a000008 	bhi	4f0c <memset+0x34>
    4ee8:	e3520000 	cmp	r2, #0
    4eec:	0a000004 	beq	4f04 <memset+0x2c>
    4ef0:	e1a03000 	mov	r3, r0
    4ef4:	e0822000 	add	r2, r2, r0
    4ef8:	e4c31001 	strb	r1, [r3], #1
    4efc:	e1530002 	cmp	r3, r2
    4f00:	1afffffc 	bne	4ef8 <memset+0x20>
    4f04:	e8bd0010 	ldmfd	sp!, {r4}
    4f08:	e12fff1e 	bx	lr
    4f0c:	e3100003 	tst	r0, #3
    4f10:	e0802002 	add	r2, r0, r2
    4f14:	0a000007 	beq	4f38 <memset+0x60>
    4f18:	e280c001 	add	r12, r0, #1
    4f1c:	e20c3003 	and	r3, r12, #3
    4f20:	e3530000 	cmp	r3, #0
    4f24:	e54c1001 	strb	r1, [r12, #-1]
    4f28:	e1a0300c 	mov	r3, r12
    4f2c:	e28cc001 	add	r12, r12, #1
    4f30:	1afffff9 	bne	4f1c <memset+0x44>
    4f34:	ea000000 	b	4f3c <memset+0x64>
    4f38:	e1a03000 	mov	r3, r0
    4f3c:	e0634002 	rsb	r4, r3, r2
    4f40:	e081c401 	add	r12, r1, r1, lsl #8
    4f44:	e354003f 	cmp	r4, #63	; 0x3f
    4f48:	e08cc80c 	add	r12, r12, r12, lsl #16
    4f4c:	da00001a 	ble	4fbc <memset+0xe4>
    4f50:	e583c000 	str	r12, [r3]
    4f54:	e583c004 	str	r12, [r3, #4]
    4f58:	e583c008 	str	r12, [r3, #8]
    4f5c:	e583c00c 	str	r12, [r3, #12]
    4f60:	e583c010 	str	r12, [r3, #16]
    4f64:	e583c014 	str	r12, [r3, #20]
    4f68:	e583c018 	str	r12, [r3, #24]
    4f6c:	e583c01c 	str	r12, [r3, #28]
    4f70:	e583c020 	str	r12, [r3, #32]
    4f74:	e583c024 	str	r12, [r3, #36]	; 0x24
    4f78:	e583c028 	str	r12, [r3, #40]	; 0x28
    4f7c:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    4f80:	e583c030 	str	r12, [r3, #48]	; 0x30
    4f84:	e583c034 	str	r12, [r3, #52]	; 0x34
    4f88:	e583c038 	str	r12, [r3, #56]	; 0x38
    4f8c:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    4f90:	e2833040 	add	r3, r3, #64	; 0x40
    4f94:	e0634002 	rsb	r4, r3, r2
    4f98:	e354003f 	cmp	r4, #63	; 0x3f
    4f9c:	caffffeb 	bgt	4f50 <memset+0x78>
    4fa0:	ea000005 	b	4fbc <memset+0xe4>
    4fa4:	e583c000 	str	r12, [r3]
    4fa8:	e583c004 	str	r12, [r3, #4]
    4fac:	e583c008 	str	r12, [r3, #8]
    4fb0:	e583c00c 	str	r12, [r3, #12]
    4fb4:	e2833010 	add	r3, r3, #16
    4fb8:	e0634002 	rsb	r4, r3, r2
    4fbc:	e354000f 	cmp	r4, #15
    4fc0:	cafffff7 	bgt	4fa4 <memset+0xcc>
    4fc4:	e3540003 	cmp	r4, #3
    4fc8:	da000006 	ble	4fe8 <memset+0x110>
    4fcc:	e2834004 	add	r4, r3, #4
    4fd0:	e0643002 	rsb	r3, r4, r2
    4fd4:	e3530003 	cmp	r3, #3
    4fd8:	e504c004 	str	r12, [r4, #-4]
    4fdc:	e1a03004 	mov	r3, r4
    4fe0:	e2844004 	add	r4, r4, #4
    4fe4:	cafffff9 	bgt	4fd0 <memset+0xf8>
    4fe8:	e1520003 	cmp	r2, r3
    4fec:	9affffc4 	bls	4f04 <memset+0x2c>
    4ff0:	e2833001 	add	r3, r3, #1
    4ff4:	e2822001 	add	r2, r2, #1
    4ff8:	e5431001 	strb	r1, [r3, #-1]
    4ffc:	e2833001 	add	r3, r3, #1
    5000:	e1530002 	cmp	r3, r2
    5004:	1afffffb 	bne	4ff8 <memset+0x120>
    5008:	eaffffbd 	b	4f04 <memset+0x2c>

0000500c <cleanup_glue>:
    500c:	e92d4038 	push	{r3, r4, r5, lr}
    5010:	e1a04001 	mov	r4, r1
    5014:	e5911000 	ldr	r1, [r1]
    5018:	e3510000 	cmp	r1, #0
    501c:	e1a05000 	mov	r5, r0
    5020:	1bfffff9 	blne	500c <cleanup_glue>
    5024:	e1a00005 	mov	r0, r5
    5028:	e1a01004 	mov	r1, r4
    502c:	ebfffe72 	bl	49fc <_free_r>
    5030:	e8bd4038 	pop	{r3, r4, r5, lr}
    5034:	e12fff1e 	bx	lr

00005038 <_reclaim_reent>:
    5038:	e59f30f0 	ldr	r3, [pc, #240]	; 5130 <_reclaim_reent+0xf8>
    503c:	e5933000 	ldr	r3, [r3]
    5040:	e1500003 	cmp	r0, r3
    5044:	e92d4070 	push	{r4, r5, r6, lr}
    5048:	e1a05000 	mov	r5, r0
    504c:	0a00002b 	beq	5100 <_reclaim_reent+0xc8>
    5050:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    5054:	e3520000 	cmp	r2, #0
    5058:	0a000011 	beq	50a4 <_reclaim_reent+0x6c>
    505c:	e3a03000 	mov	r3, #0
    5060:	e1a06003 	mov	r6, r3
    5064:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    5068:	e3510000 	cmp	r1, #0
    506c:	0a000005 	beq	5088 <_reclaim_reent+0x50>
    5070:	e5914000 	ldr	r4, [r1]
    5074:	e1a00005 	mov	r0, r5
    5078:	ebfffe5f 	bl	49fc <_free_r>
    507c:	e2541000 	subs	r1, r4, #0
    5080:	1afffffa 	bne	5070 <_reclaim_reent+0x38>
    5084:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    5088:	e2866001 	add	r6, r6, #1
    508c:	e3560020 	cmp	r6, #32
    5090:	e1a03006 	mov	r3, r6
    5094:	1afffff2 	bne	5064 <_reclaim_reent+0x2c>
    5098:	e1a00005 	mov	r0, r5
    509c:	e1a01002 	mov	r1, r2
    50a0:	ebfffe55 	bl	49fc <_free_r>
    50a4:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    50a8:	e3510000 	cmp	r1, #0
    50ac:	11a00005 	movne	r0, r5
    50b0:	1bfffe51 	blne	49fc <_free_r>
    50b4:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    50b8:	e3510000 	cmp	r1, #0
    50bc:	0a000008 	beq	50e4 <_reclaim_reent+0xac>
    50c0:	e2856f53 	add	r6, r5, #332	; 0x14c
    50c4:	e1510006 	cmp	r1, r6
    50c8:	0a000005 	beq	50e4 <_reclaim_reent+0xac>
    50cc:	e5914000 	ldr	r4, [r1]
    50d0:	e1a00005 	mov	r0, r5
    50d4:	ebfffe48 	bl	49fc <_free_r>
    50d8:	e1560004 	cmp	r6, r4
    50dc:	e1a01004 	mov	r1, r4
    50e0:	1afffff9 	bne	50cc <_reclaim_reent+0x94>
    50e4:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    50e8:	e3510000 	cmp	r1, #0
    50ec:	11a00005 	movne	r0, r5
    50f0:	1bfffe41 	blne	49fc <_free_r>
    50f4:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    50f8:	e3530000 	cmp	r3, #0
    50fc:	1a000001 	bne	5108 <_reclaim_reent+0xd0>
    5100:	e8bd4070 	pop	{r4, r5, r6, lr}
    5104:	e12fff1e 	bx	lr
    5108:	e1a00005 	mov	r0, r5
    510c:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    5110:	e1a0e00f 	mov	lr, pc
    5114:	e12fff1c 	bx	r12
    5118:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    511c:	e3510000 	cmp	r1, #0
    5120:	0afffff6 	beq	5100 <_reclaim_reent+0xc8>
    5124:	e1a00005 	mov	r0, r5
    5128:	e8bd4070 	pop	{r4, r5, r6, lr}
    512c:	eaffffb6 	b	500c <cleanup_glue>
    5130:	00006920 	.word	0x00006920

00005134 <_wrapup_reent>:
    5134:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    5138:	e2507000 	subs	r7, r0, #0
    513c:	059f3060 	ldreq	r3, [pc, #96]	; 51a4 <_wrapup_reent+0x70>
    5140:	05937000 	ldreq	r7, [r3]
    5144:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    5148:	e3560000 	cmp	r6, #0
    514c:	0a00000d 	beq	5188 <_wrapup_reent+0x54>
    5150:	e5965004 	ldr	r5, [r6, #4]
    5154:	e2554001 	subs	r4, r5, #1
    5158:	52855002 	addpl	r5, r5, #2
    515c:	50865105 	addpl	r5, r6, r5, lsl #2
    5160:	4a000005 	bmi	517c <_wrapup_reent+0x48>
    5164:	e5353004 	ldr	r3, [r5, #-4]!
    5168:	e2444001 	sub	r4, r4, #1
    516c:	e1a0e00f 	mov	lr, pc
    5170:	e12fff13 	bx	r3
    5174:	e3740001 	cmn	r4, #1
    5178:	1afffff9 	bne	5164 <_wrapup_reent+0x30>
    517c:	e5966000 	ldr	r6, [r6]
    5180:	e3560000 	cmp	r6, #0
    5184:	1afffff1 	bne	5150 <_wrapup_reent+0x1c>
    5188:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    518c:	e3530000 	cmp	r3, #0
    5190:	11a00007 	movne	r0, r7
    5194:	11a0e00f 	movne	lr, pc
    5198:	112fff13 	bxne	r3
    519c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    51a0:	e12fff1e 	bx	lr
    51a4:	00006920 	.word	0x00006920

000051a8 <__sread>:
    51a8:	e92d4010 	push	{r4, lr}
    51ac:	e1a04001 	mov	r4, r1
    51b0:	e1d110fe 	ldrsh	r1, [r1, #14]
    51b4:	eb0000c5 	bl	54d0 <_read_r>
    51b8:	e3500000 	cmp	r0, #0
    51bc:	a5943050 	ldrge	r3, [r4, #80]	; 0x50
    51c0:	b1d430bc 	ldrhlt	r3, [r4, #12]
    51c4:	a0833000 	addge	r3, r3, r0
    51c8:	b3c33a01 	biclt	r3, r3, #4096	; 0x1000
    51cc:	a5843050 	strge	r3, [r4, #80]	; 0x50
    51d0:	b1c430bc 	strhlt	r3, [r4, #12]
    51d4:	e8bd4010 	pop	{r4, lr}
    51d8:	e12fff1e 	bx	lr

000051dc <__seofread>:
    51dc:	e3a00000 	mov	r0, #0
    51e0:	e12fff1e 	bx	lr

000051e4 <__swrite>:
    51e4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    51e8:	e1a04001 	mov	r4, r1
    51ec:	e1d110bc 	ldrh	r1, [r1, #12]
    51f0:	e3110c01 	tst	r1, #256	; 0x100
    51f4:	e1a07000 	mov	r7, r0
    51f8:	e1a06002 	mov	r6, r2
    51fc:	e1a05003 	mov	r5, r3
    5200:	0a000004 	beq	5218 <__swrite+0x34>
    5204:	e1d410fe 	ldrsh	r1, [r4, #14]
    5208:	e3a02000 	mov	r2, #0
    520c:	e3a03002 	mov	r3, #2
    5210:	eb00009d 	bl	548c <_lseek_r>
    5214:	e1d410bc 	ldrh	r1, [r4, #12]
    5218:	e3c11a01 	bic	r1, r1, #4096	; 0x1000
    521c:	e1c410bc 	strh	r1, [r4, #12]
    5220:	e1a00007 	mov	r0, r7
    5224:	e1d410fe 	ldrsh	r1, [r4, #14]
    5228:	e1a02006 	mov	r2, r6
    522c:	e1a03005 	mov	r3, r5
    5230:	eb000013 	bl	5284 <_write_r>
    5234:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    5238:	e12fff1e 	bx	lr

0000523c <__sseek>:
    523c:	e92d4010 	push	{r4, lr}
    5240:	e1a04001 	mov	r4, r1
    5244:	e1d110fe 	ldrsh	r1, [r1, #14]
    5248:	eb00008f 	bl	548c <_lseek_r>
    524c:	e1d430bc 	ldrh	r3, [r4, #12]
    5250:	e3700001 	cmn	r0, #1
    5254:	03c33a01 	biceq	r3, r3, #4096	; 0x1000
    5258:	13833a01 	orrne	r3, r3, #4096	; 0x1000
    525c:	01c430bc 	strheq	r3, [r4, #12]
    5260:	11c430bc 	strhne	r3, [r4, #12]
    5264:	15840050 	strne	r0, [r4, #80]	; 0x50
    5268:	e8bd4010 	pop	{r4, lr}
    526c:	e12fff1e 	bx	lr

00005270 <__sclose>:
    5270:	e92d4008 	push	{r3, lr}
    5274:	e1d110fe 	ldrsh	r1, [r1, #14]
    5278:	eb000012 	bl	52c8 <_close_r>
    527c:	e8bd4008 	pop	{r3, lr}
    5280:	e12fff1e 	bx	lr

00005284 <_write_r>:
    5284:	e92d4038 	push	{r3, r4, r5, lr}
    5288:	e59f4034 	ldr	r4, [pc, #52]	; 52c4 <_write_r+0x40>
    528c:	e1a05000 	mov	r5, r0
    5290:	e1a00001 	mov	r0, r1
    5294:	e1a01002 	mov	r1, r2
    5298:	e1a02003 	mov	r2, r3
    529c:	e3a03000 	mov	r3, #0
    52a0:	e5843000 	str	r3, [r4]
    52a4:	eb000137 	bl	5788 <_write>
    52a8:	e3700001 	cmn	r0, #1
    52ac:	1a000002 	bne	52bc <_write_r+0x38>
    52b0:	e5943000 	ldr	r3, [r4]
    52b4:	e3530000 	cmp	r3, #0
    52b8:	15853000 	strne	r3, [r5]
    52bc:	e8bd4038 	pop	{r3, r4, r5, lr}
    52c0:	e12fff1e 	bx	lr
    52c4:	000075d0 	.word	0x000075d0

000052c8 <_close_r>:
    52c8:	e92d4038 	push	{r3, r4, r5, lr}
    52cc:	e59f402c 	ldr	r4, [pc, #44]	; 5300 <_close_r+0x38>
    52d0:	e3a03000 	mov	r3, #0
    52d4:	e1a05000 	mov	r5, r0
    52d8:	e1a00001 	mov	r0, r1
    52dc:	e5843000 	str	r3, [r4]
    52e0:	eb00009e 	bl	5560 <_close>
    52e4:	e3700001 	cmn	r0, #1
    52e8:	1a000002 	bne	52f8 <_close_r+0x30>
    52ec:	e5943000 	ldr	r3, [r4]
    52f0:	e3530000 	cmp	r3, #0
    52f4:	15853000 	strne	r3, [r5]
    52f8:	e8bd4038 	pop	{r3, r4, r5, lr}
    52fc:	e12fff1e 	bx	lr
    5300:	000075d0 	.word	0x000075d0

00005304 <_fclose_r>:
    5304:	e92d4070 	push	{r4, r5, r6, lr}
    5308:	e2514000 	subs	r4, r1, #0
    530c:	e1a05000 	mov	r5, r0
    5310:	01a06004 	moveq	r6, r4
    5314:	0a00002b 	beq	53c8 <_fclose_r+0xc4>
    5318:	ebfffd62 	bl	48a8 <__sfp_lock_acquire>
    531c:	e3550000 	cmp	r5, #0
    5320:	0a000002 	beq	5330 <_fclose_r+0x2c>
    5324:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    5328:	e3530000 	cmp	r3, #0
    532c:	0a000028 	beq	53d4 <_fclose_r+0xd0>
    5330:	e1d460fc 	ldrsh	r6, [r4, #12]
    5334:	e3560000 	cmp	r6, #0
    5338:	0a000021 	beq	53c4 <_fclose_r+0xc0>
    533c:	e1a00005 	mov	r0, r5
    5340:	e1a01004 	mov	r1, r4
    5344:	ebfffc21 	bl	43d0 <_fflush_r>
    5348:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    534c:	e3530000 	cmp	r3, #0
    5350:	e1a06000 	mov	r6, r0
    5354:	0a000005 	beq	5370 <_fclose_r+0x6c>
    5358:	e1a00005 	mov	r0, r5
    535c:	e594101c 	ldr	r1, [r4, #28]
    5360:	e1a0e00f 	mov	lr, pc
    5364:	e12fff13 	bx	r3
    5368:	e3500000 	cmp	r0, #0
    536c:	b3e06000 	mvnlt	r6, #0
    5370:	e1d430bc 	ldrh	r3, [r4, #12]
    5374:	e3130080 	tst	r3, #128	; 0x80
    5378:	1a00001b 	bne	53ec <_fclose_r+0xe8>
    537c:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    5380:	e3510000 	cmp	r1, #0
    5384:	0a000005 	beq	53a0 <_fclose_r+0x9c>
    5388:	e2843040 	add	r3, r4, #64	; 0x40
    538c:	e1510003 	cmp	r1, r3
    5390:	11a00005 	movne	r0, r5
    5394:	1bfffd98 	blne	49fc <_free_r>
    5398:	e3a03000 	mov	r3, #0
    539c:	e5843030 	str	r3, [r4, #48]	; 0x30
    53a0:	e5941044 	ldr	r1, [r4, #68]	; 0x44
    53a4:	e3510000 	cmp	r1, #0
    53a8:	0a000003 	beq	53bc <_fclose_r+0xb8>
    53ac:	e1a00005 	mov	r0, r5
    53b0:	ebfffd91 	bl	49fc <_free_r>
    53b4:	e3a03000 	mov	r3, #0
    53b8:	e5843044 	str	r3, [r4, #68]	; 0x44
    53bc:	e3a03000 	mov	r3, #0
    53c0:	e1c430bc 	strh	r3, [r4, #12]
    53c4:	ebfffd38 	bl	48ac <__sfp_lock_release>
    53c8:	e1a00006 	mov	r0, r6
    53cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    53d0:	e12fff1e 	bx	lr
    53d4:	e1a00005 	mov	r0, r5
    53d8:	ebfffcd6 	bl	4738 <__sinit>
    53dc:	e1d460fc 	ldrsh	r6, [r4, #12]
    53e0:	e3560000 	cmp	r6, #0
    53e4:	1affffd4 	bne	533c <_fclose_r+0x38>
    53e8:	eafffff5 	b	53c4 <_fclose_r+0xc0>
    53ec:	e1a00005 	mov	r0, r5
    53f0:	e5941010 	ldr	r1, [r4, #16]
    53f4:	ebfffd80 	bl	49fc <_free_r>
    53f8:	eaffffdf 	b	537c <_fclose_r+0x78>

000053fc <fclose>:
    53fc:	e59f3008 	ldr	r3, [pc, #8]	; 540c <fclose+0x10>
    5400:	e1a01000 	mov	r1, r0
    5404:	e5930000 	ldr	r0, [r3]
    5408:	eaffffbd 	b	5304 <_fclose_r>
    540c:	00006920 	.word	0x00006920

00005410 <_fstat_r>:
    5410:	e92d4038 	push	{r3, r4, r5, lr}
    5414:	e59f4030 	ldr	r4, [pc, #48]	; 544c <_fstat_r+0x3c>
    5418:	e3a03000 	mov	r3, #0
    541c:	e1a05000 	mov	r5, r0
    5420:	e1a00001 	mov	r0, r1
    5424:	e1a01002 	mov	r1, r2
    5428:	e5843000 	str	r3, [r4]
    542c:	eb00006f 	bl	55f0 <_fstat>
    5430:	e3700001 	cmn	r0, #1
    5434:	1a000002 	bne	5444 <_fstat_r+0x34>
    5438:	e5943000 	ldr	r3, [r4]
    543c:	e3530000 	cmp	r3, #0
    5440:	15853000 	strne	r3, [r5]
    5444:	e8bd4038 	pop	{r3, r4, r5, lr}
    5448:	e12fff1e 	bx	lr
    544c:	000075d0 	.word	0x000075d0

00005450 <_isatty_r>:
    5450:	e92d4038 	push	{r3, r4, r5, lr}
    5454:	e59f402c 	ldr	r4, [pc, #44]	; 5488 <_isatty_r+0x38>
    5458:	e3a03000 	mov	r3, #0
    545c:	e1a05000 	mov	r5, r0
    5460:	e1a00001 	mov	r0, r1
    5464:	e5843000 	str	r3, [r4]
    5468:	eb000078 	bl	5650 <_isatty>
    546c:	e3700001 	cmn	r0, #1
    5470:	1a000002 	bne	5480 <_isatty_r+0x30>
    5474:	e5943000 	ldr	r3, [r4]
    5478:	e3530000 	cmp	r3, #0
    547c:	15853000 	strne	r3, [r5]
    5480:	e8bd4038 	pop	{r3, r4, r5, lr}
    5484:	e12fff1e 	bx	lr
    5488:	000075d0 	.word	0x000075d0

0000548c <_lseek_r>:
    548c:	e92d4038 	push	{r3, r4, r5, lr}
    5490:	e59f4034 	ldr	r4, [pc, #52]	; 54cc <_lseek_r+0x40>
    5494:	e1a05000 	mov	r5, r0
    5498:	e1a00001 	mov	r0, r1
    549c:	e1a01002 	mov	r1, r2
    54a0:	e1a02003 	mov	r2, r3
    54a4:	e3a03000 	mov	r3, #0
    54a8:	e5843000 	str	r3, [r4]
    54ac:	eb000071 	bl	5678 <_lseek>
    54b0:	e3700001 	cmn	r0, #1
    54b4:	1a000002 	bne	54c4 <_lseek_r+0x38>
    54b8:	e5943000 	ldr	r3, [r4]
    54bc:	e3530000 	cmp	r3, #0
    54c0:	15853000 	strne	r3, [r5]
    54c4:	e8bd4038 	pop	{r3, r4, r5, lr}
    54c8:	e12fff1e 	bx	lr
    54cc:	000075d0 	.word	0x000075d0

000054d0 <_read_r>:
    54d0:	e92d4038 	push	{r3, r4, r5, lr}
    54d4:	e59f4034 	ldr	r4, [pc, #52]	; 5510 <_read_r+0x40>
    54d8:	e1a05000 	mov	r5, r0
    54dc:	e1a00001 	mov	r0, r1
    54e0:	e1a01002 	mov	r1, r2
    54e4:	e1a02003 	mov	r2, r3
    54e8:	e3a03000 	mov	r3, #0
    54ec:	e5843000 	str	r3, [r4]
    54f0:	eb00008c 	bl	5728 <_read>
    54f4:	e3700001 	cmn	r0, #1
    54f8:	1a000002 	bne	5508 <_read_r+0x38>
    54fc:	e5943000 	ldr	r3, [r4]
    5500:	e3530000 	cmp	r3, #0
    5504:	15853000 	strne	r3, [r5]
    5508:	e8bd4038 	pop	{r3, r4, r5, lr}
    550c:	e12fff1e 	bx	lr
    5510:	000075d0 	.word	0x000075d0

00005514 <__cs3_premain>:
    5514:	e92d4008 	push	{r3, lr}
    5518:	eb00019f 	bl	5b9c <__libc_init_array>
    551c:	e59f3030 	ldr	r3, [pc, #48]	; 5554 <__cs3_premain+0x40>
    5520:	e3530000 	cmp	r3, #0
    5524:	15930000 	ldrne	r0, [r3]
    5528:	01a00003 	moveq	r0, r3
    552c:	e59f3024 	ldr	r3, [pc, #36]	; 5558 <__cs3_premain+0x44>
    5530:	e3530000 	cmp	r3, #0
    5534:	15931000 	ldrne	r1, [r3]
    5538:	01a01003 	moveq	r1, r3
    553c:	e3a02000 	mov	r2, #0
    5540:	ebfff37e 	bl	2340 <main>
    5544:	e59f3010 	ldr	r3, [pc, #16]	; 555c <__cs3_premain+0x48>
    5548:	e3530000 	cmp	r3, #0
    554c:	1bfff4ca 	blne	287c <exit>
    5550:	eafffffe 	b	5550 <__cs3_premain+0x3c>
    5554:	00007678 	.word	0x00007678
    5558:	0000767c 	.word	0x0000767c
    555c:	0000287c 	.word	0x0000287c

00005560 <_close>:
    5560:	e92d4038 	push	{r3, r4, r5, lr}
    5564:	e1a05000 	mov	r5, r0
    5568:	eb0000e8 	bl	5910 <__cs3_openslot>
    556c:	e2504000 	subs	r4, r0, #0
    5570:	0a000016 	beq	55d0 <_close+0x70>
    5574:	e2453001 	sub	r3, r5, #1
    5578:	e3530001 	cmp	r3, #1
    557c:	9a000008 	bls	55a4 <_close+0x44>
    5580:	e3a00002 	mov	r0, #2
    5584:	e1a01004 	mov	r1, r4
    5588:	ef123456 	svc	0x00123456
    558c:	e3500000 	cmp	r0, #0
    5590:	03e03000 	mvneq	r3, #0
    5594:	05843000 	streq	r3, [r4]
    5598:	eb00010a 	bl	59c8 <__cs3_checkerror>
    559c:	e8bd4038 	pop	{r3, r4, r5, lr}
    55a0:	e12fff1e 	bx	lr
    55a4:	e3550001 	cmp	r5, #1
    55a8:	13e03007 	mvnne	r3, #7
    55ac:	03a03008 	moveq	r3, #8
    55b0:	e7943003 	ldr	r3, [r4, r3]
    55b4:	e5942000 	ldr	r2, [r4]
    55b8:	e1520003 	cmp	r2, r3
    55bc:	03e03000 	mvneq	r3, #0
    55c0:	05843000 	streq	r3, [r4]
    55c4:	03a00000 	moveq	r0, #0
    55c8:	1affffec 	bne	5580 <_close+0x20>
    55cc:	eafffff2 	b	559c <_close+0x3c>
    55d0:	e3e00000 	mvn	r0, #0
    55d4:	eafffff0 	b	559c <_close+0x3c>

000055d8 <_exit>:
    55d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    55dc:	e3a00018 	mov	r0, #24
    55e0:	e59f1004 	ldr	r1, [pc, #4]	; 55ec <_exit+0x14>
    55e4:	ef123456 	svc	0x00123456
    55e8:	eafffffe 	b	55e8 <_exit+0x10>
    55ec:	00020026 	.word	0x00020026

000055f0 <_fstat>:
    55f0:	e92d4038 	push	{r3, r4, r5, lr}
    55f4:	e1a04001 	mov	r4, r1
    55f8:	eb0000c4 	bl	5910 <__cs3_openslot>
    55fc:	e2505000 	subs	r5, r0, #0
    5600:	0a000010 	beq	5648 <_fstat+0x58>
    5604:	e1a00004 	mov	r0, r4
    5608:	e3a01000 	mov	r1, #0
    560c:	e3a0203c 	mov	r2, #60	; 0x3c
    5610:	ebfffe30 	bl	4ed8 <memset>
    5614:	e3a03a02 	mov	r3, #8192	; 0x2000
    5618:	e5843004 	str	r3, [r4, #4]
    561c:	e3a03b01 	mov	r3, #1024	; 0x400
    5620:	e584302c 	str	r3, [r4, #44]	; 0x2c
    5624:	e3a0000c 	mov	r0, #12
    5628:	e1a01005 	mov	r1, r5
    562c:	ef123456 	svc	0x00123456
    5630:	e3700001 	cmn	r0, #1
    5634:	15840010 	strne	r0, [r4, #16]
    5638:	13a00000 	movne	r0, #0
    563c:	eb0000e1 	bl	59c8 <__cs3_checkerror>
    5640:	e8bd4038 	pop	{r3, r4, r5, lr}
    5644:	e12fff1e 	bx	lr
    5648:	e3e00000 	mvn	r0, #0
    564c:	eafffffb 	b	5640 <_fstat+0x50>

00005650 <_isatty>:
    5650:	e92d4008 	push	{r3, lr}
    5654:	eb0000ad 	bl	5910 <__cs3_openslot>
    5658:	e2501000 	subs	r1, r0, #0
    565c:	01a00001 	moveq	r0, r1
    5660:	0a000002 	beq	5670 <_isatty+0x20>
    5664:	e3a00009 	mov	r0, #9
    5668:	ef123456 	svc	0x00123456
    566c:	eb0000d5 	bl	59c8 <__cs3_checkerror>
    5670:	e8bd4008 	pop	{r3, lr}
    5674:	e12fff1e 	bx	lr

00005678 <_lseek>:
    5678:	e92d4070 	push	{r4, r5, r6, lr}
    567c:	e24dd008 	sub	sp, sp, #8
    5680:	e1a04001 	mov	r4, r1
    5684:	e1a05002 	mov	r5, r2
    5688:	eb0000a0 	bl	5910 <__cs3_openslot>
    568c:	e2506000 	subs	r6, r0, #0
    5690:	0a000022 	beq	5720 <_lseek+0xa8>
    5694:	e3550001 	cmp	r5, #1
    5698:	0a00001d 	beq	5714 <_lseek+0x9c>
    569c:	e3550002 	cmp	r5, #2
    56a0:	0a000014 	beq	56f8 <_lseek+0x80>
    56a4:	e3550000 	cmp	r5, #0
    56a8:	1a00000d 	bne	56e4 <_lseek+0x6c>
    56ac:	e5963000 	ldr	r3, [r6]
    56b0:	e3540000 	cmp	r4, #0
    56b4:	e88d0018 	stm	sp, {r3, r4}
    56b8:	ba000009 	blt	56e4 <_lseek+0x6c>
    56bc:	e3a0000a 	mov	r0, #10
    56c0:	e1a0100d 	mov	r1, sp
    56c4:	ef123456 	svc	0x00123456
    56c8:	e3700001 	cmn	r0, #1
    56cc:	15864004 	strne	r4, [r6, #4]
    56d0:	11a00004 	movne	r0, r4
    56d4:	eb0000bb 	bl	59c8 <__cs3_checkerror>
    56d8:	e28dd008 	add	sp, sp, #8
    56dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    56e0:	e12fff1e 	bx	lr
    56e4:	eb000128 	bl	5b8c <__errno>
    56e8:	e3a03016 	mov	r3, #22
    56ec:	e5803000 	str	r3, [r0]
    56f0:	e3e00000 	mvn	r0, #0
    56f4:	eafffff7 	b	56d8 <_lseek+0x60>
    56f8:	e3a0000c 	mov	r0, #12
    56fc:	e1a01006 	mov	r1, r6
    5700:	ef123456 	svc	0x00123456
    5704:	e3700001 	cmn	r0, #1
    5708:	10844000 	addne	r4, r4, r0
    570c:	1affffe6 	bne	56ac <_lseek+0x34>
    5710:	eaffffef 	b	56d4 <_lseek+0x5c>
    5714:	e5963004 	ldr	r3, [r6, #4]
    5718:	e0844003 	add	r4, r4, r3
    571c:	eaffffe2 	b	56ac <_lseek+0x34>
    5720:	e3e00000 	mvn	r0, #0
    5724:	eaffffeb 	b	56d8 <_lseek+0x60>

00005728 <_read>:
    5728:	e92d4070 	push	{r4, r5, r6, lr}
    572c:	e24dd010 	sub	sp, sp, #16
    5730:	e1a06001 	mov	r6, r1
    5734:	e1a05002 	mov	r5, r2
    5738:	eb000074 	bl	5910 <__cs3_openslot>
    573c:	e2504000 	subs	r4, r0, #0
    5740:	0a00000e 	beq	5780 <_read+0x58>
    5744:	e5943000 	ldr	r3, [r4]
    5748:	e98d0048 	stmib	sp, {r3, r6}
    574c:	e58d500c 	str	r5, [sp, #12]
    5750:	e3a00006 	mov	r0, #6
    5754:	e28d1004 	add	r1, sp, #4
    5758:	ef123456 	svc	0x00123456
    575c:	e3700001 	cmn	r0, #1
    5760:	15943004 	ldrne	r3, [r4, #4]
    5764:	10600005 	rsbne	r0, r0, r5
    5768:	10833000 	addne	r3, r3, r0
    576c:	15843004 	strne	r3, [r4, #4]
    5770:	eb000094 	bl	59c8 <__cs3_checkerror>
    5774:	e28dd010 	add	sp, sp, #16
    5778:	e8bd4070 	pop	{r4, r5, r6, lr}
    577c:	e12fff1e 	bx	lr
    5780:	e3e00000 	mvn	r0, #0
    5784:	eafffffa 	b	5774 <_read+0x4c>

00005788 <_write>:
    5788:	e92d4070 	push	{r4, r5, r6, lr}
    578c:	e24dd010 	sub	sp, sp, #16
    5790:	e1a06001 	mov	r6, r1
    5794:	e1a05002 	mov	r5, r2
    5798:	eb00005c 	bl	5910 <__cs3_openslot>
    579c:	e2504000 	subs	r4, r0, #0
    57a0:	0a00000e 	beq	57e0 <_write+0x58>
    57a4:	e5943000 	ldr	r3, [r4]
    57a8:	e98d0048 	stmib	sp, {r3, r6}
    57ac:	e58d500c 	str	r5, [sp, #12]
    57b0:	e3a00005 	mov	r0, #5
    57b4:	e28d1004 	add	r1, sp, #4
    57b8:	ef123456 	svc	0x00123456
    57bc:	e3700001 	cmn	r0, #1
    57c0:	15943004 	ldrne	r3, [r4, #4]
    57c4:	10600005 	rsbne	r0, r0, r5
    57c8:	10833000 	addne	r3, r3, r0
    57cc:	15843004 	strne	r3, [r4, #4]
    57d0:	eb00007c 	bl	59c8 <__cs3_checkerror>
    57d4:	e28dd010 	add	sp, sp, #16
    57d8:	e8bd4070 	pop	{r4, r5, r6, lr}
    57dc:	e12fff1e 	bx	lr
    57e0:	e3e00000 	mvn	r0, #0
    57e4:	eafffffa 	b	57d4 <_write+0x4c>

000057e8 <_sbrk>:
    57e8:	e92d4008 	push	{r3, lr}
    57ec:	e59f305c 	ldr	r3, [pc, #92]	; 5850 <_sbrk+0x68>
    57f0:	e59f105c 	ldr	r1, [pc, #92]	; 5854 <_sbrk+0x6c>
    57f4:	e5932000 	ldr	r2, [r3]
    57f8:	e5913000 	ldr	r3, [r1]
    57fc:	e3520000 	cmp	r2, #0
    5800:	e0830000 	add	r0, r3, r0
    5804:	0a000002 	beq	5814 <_sbrk+0x2c>
    5808:	e0602002 	rsb	r2, r0, r2
    580c:	e3520000 	cmp	r2, #0
    5810:	ba000009 	blt	583c <_sbrk+0x54>
    5814:	e04d2003 	sub	r2, sp, r3
    5818:	e3520000 	cmp	r2, #0
    581c:	ba000002 	blt	582c <_sbrk+0x44>
    5820:	e04d2000 	sub	r2, sp, r0
    5824:	e35200ff 	cmp	r2, #255	; 0xff
    5828:	da000003 	ble	583c <_sbrk+0x54>
    582c:	e5810000 	str	r0, [r1]
    5830:	e1a00003 	mov	r0, r3
    5834:	e8bd4008 	pop	{r3, lr}
    5838:	e12fff1e 	bx	lr
    583c:	eb0000d2 	bl	5b8c <__errno>
    5840:	e3a0300c 	mov	r3, #12
    5844:	e5803000 	str	r3, [r0]
    5848:	e3e03000 	mvn	r3, #0
    584c:	eafffff7 	b	5830 <_sbrk+0x48>
    5850:	00007160 	.word	0x00007160
    5854:	00007164 	.word	0x00007164

00005858 <initialize_monitor_handles.part.0>:
    5858:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    585c:	e59f50a4 	ldr	r5, [pc, #164]	; 5908 <initialize_monitor_handles.part.0+0xb0>
    5860:	e24dd014 	sub	sp, sp, #20
    5864:	e3a03000 	mov	r3, #0
    5868:	e3e02000 	mvn	r2, #0
    586c:	e7852003 	str	r2, [r5, r3]
    5870:	e2833008 	add	r3, r3, #8
    5874:	e35300a0 	cmp	r3, #160	; 0xa0
    5878:	e59f4088 	ldr	r4, [pc, #136]	; 5908 <initialize_monitor_handles.part.0+0xb0>
    587c:	1afffffa 	bne	586c <initialize_monitor_handles.part.0+0x14>
    5880:	e59f7084 	ldr	r7, [pc, #132]	; 590c <initialize_monitor_handles.part.0+0xb4>
    5884:	e3a06003 	mov	r6, #3
    5888:	e3a03000 	mov	r3, #0
    588c:	e58d7004 	str	r7, [sp, #4]
    5890:	e58d600c 	str	r6, [sp, #12]
    5894:	e58d3008 	str	r3, [sp, #8]
    5898:	e3a00001 	mov	r0, #1
    589c:	e28d1004 	add	r1, sp, #4
    58a0:	ef123456 	svc	0x00123456
    58a4:	e3a03004 	mov	r3, #4
    58a8:	e5840000 	str	r0, [r4]
    58ac:	e58d7004 	str	r7, [sp, #4]
    58b0:	e58d600c 	str	r6, [sp, #12]
    58b4:	e58d3008 	str	r3, [sp, #8]
    58b8:	e3a00001 	mov	r0, #1
    58bc:	e08d1003 	add	r1, sp, r3
    58c0:	ef123456 	svc	0x00123456
    58c4:	e3a03008 	mov	r3, #8
    58c8:	e5840008 	str	r0, [r4, #8]
    58cc:	e58d7004 	str	r7, [sp, #4]
    58d0:	e58d600c 	str	r6, [sp, #12]
    58d4:	e58d3008 	str	r3, [sp, #8]
    58d8:	e3a00001 	mov	r0, #1
    58dc:	e28d1004 	add	r1, sp, #4
    58e0:	ef123456 	svc	0x00123456
    58e4:	e3700001 	cmn	r0, #1
    58e8:	05943008 	ldreq	r3, [r4, #8]
    58ec:	e5840010 	str	r0, [r4, #16]
    58f0:	05843010 	streq	r3, [r4, #16]
    58f4:	e3a03001 	mov	r3, #1
    58f8:	e58530a0 	str	r3, [r5, #160]	; 0xa0
    58fc:	e28dd014 	add	sp, sp, #20
    5900:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    5904:	e12fff1e 	bx	lr
    5908:	000075d4 	.word	0x000075d4
    590c:	000064b4 	.word	0x000064b4

00005910 <__cs3_openslot>:
    5910:	e92d4038 	push	{r3, r4, r5, lr}
    5914:	e59f5044 	ldr	r5, [pc, #68]	; 5960 <__cs3_openslot+0x50>
    5918:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
    591c:	e3530000 	cmp	r3, #0
    5920:	e1a04000 	mov	r4, r0
    5924:	0bffffcb 	bleq	5858 <initialize_monitor_handles.part.0>
    5928:	e3540013 	cmp	r4, #19
    592c:	8a000006 	bhi	594c <__cs3_openslot+0x3c>
    5930:	e7953184 	ldr	r3, [r5, r4, lsl #3]
    5934:	e3730001 	cmn	r3, #1
    5938:	159f0020 	ldrne	r0, [pc, #32]	; 5960 <__cs3_openslot+0x50>
    593c:	10800184 	addne	r0, r0, r4, lsl #3
    5940:	0a000001 	beq	594c <__cs3_openslot+0x3c>
    5944:	e8bd4038 	pop	{r3, r4, r5, lr}
    5948:	e12fff1e 	bx	lr
    594c:	eb00008e 	bl	5b8c <__errno>
    5950:	e3a03009 	mov	r3, #9
    5954:	e5803000 	str	r3, [r0]
    5958:	e3a00000 	mov	r0, #0
    595c:	eafffff8 	b	5944 <__cs3_openslot+0x34>
    5960:	000075d4 	.word	0x000075d4

00005964 <__cs3_newslot>:
    5964:	e92d4038 	push	{r3, r4, r5, lr}
    5968:	e59f4054 	ldr	r4, [pc, #84]	; 59c4 <__cs3_newslot+0x60>
    596c:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
    5970:	e3530000 	cmp	r3, #0
    5974:	e1a05000 	mov	r5, r0
    5978:	0bffffb6 	bleq	5858 <initialize_monitor_handles.part.0>
    597c:	e3a03000 	mov	r3, #0
    5980:	e7942183 	ldr	r2, [r4, r3, lsl #3]
    5984:	e3720001 	cmn	r2, #1
    5988:	e1a02183 	lsl	r2, r3, #3
    598c:	0a000008 	beq	59b4 <__cs3_newslot+0x50>
    5990:	e2833001 	add	r3, r3, #1
    5994:	e3530014 	cmp	r3, #20
    5998:	1afffff8 	bne	5980 <__cs3_newslot+0x1c>
    599c:	eb00007a 	bl	5b8c <__errno>
    59a0:	e3a03018 	mov	r3, #24
    59a4:	e5803000 	str	r3, [r0]
    59a8:	e3a00000 	mov	r0, #0
    59ac:	e8bd4038 	pop	{r3, r4, r5, lr}
    59b0:	e12fff1e 	bx	lr
    59b4:	e59f0008 	ldr	r0, [pc, #8]	; 59c4 <__cs3_newslot+0x60>
    59b8:	e5853000 	str	r3, [r5]
    59bc:	e0800002 	add	r0, r0, r2
    59c0:	eafffff9 	b	59ac <__cs3_newslot+0x48>
    59c4:	000075d4 	.word	0x000075d4

000059c8 <__cs3_checkerror>:
    59c8:	e3700001 	cmn	r0, #1
    59cc:	e92d4038 	push	{r3, r4, r5, lr}
    59d0:	e1a04000 	mov	r4, r0
    59d4:	0a000002 	beq	59e4 <__cs3_checkerror+0x1c>
    59d8:	e1a00004 	mov	r0, r4
    59dc:	e8bd4038 	pop	{r3, r4, r5, lr}
    59e0:	e12fff1e 	bx	lr
    59e4:	eb000068 	bl	5b8c <__errno>
    59e8:	e3a01000 	mov	r1, #0
    59ec:	e1a05000 	mov	r5, r0
    59f0:	e3a00013 	mov	r0, #19
    59f4:	ef123456 	svc	0x00123456
    59f8:	e5850000 	str	r0, [r5]
    59fc:	eafffff5 	b	59d8 <__cs3_checkerror+0x10>

00005a00 <initialize_argv>:
    5a00:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    5a04:	e3a00c01 	mov	r0, #256	; 0x100
    5a08:	e24dd008 	sub	sp, sp, #8
    5a0c:	ebffff75 	bl	57e8 <_sbrk>
    5a10:	e3700001 	cmn	r0, #1
    5a14:	e1a07000 	mov	r7, r0
    5a18:	0a000039 	beq	5b04 <initialize_argv+0x104>
    5a1c:	e3a05000 	mov	r5, #0
    5a20:	e3a03c01 	mov	r3, #256	; 0x100
    5a24:	e5c05000 	strb	r5, [r0]
    5a28:	e1a0100d 	mov	r1, sp
    5a2c:	e3a00015 	mov	r0, #21
    5a30:	e58d7000 	str	r7, [sp]
    5a34:	e58d3004 	str	r3, [sp, #4]
    5a38:	ef123456 	svc	0x00123456
    5a3c:	e59f8140 	ldr	r8, [pc, #320]	; 5b84 <initialize_argv+0x184>
    5a40:	e1a00005 	mov	r0, r5
    5a44:	e3a09001 	mov	r9, #1
    5a48:	e1a0a005 	mov	r10, r5
    5a4c:	e588a0a4 	str	r10, [r8, #164]	; 0xa4
    5a50:	e1a0c007 	mov	r12, r7
    5a54:	e1a04007 	mov	r4, r7
    5a58:	e3a06000 	mov	r6, #0
    5a5c:	e5d41000 	ldrb	r1, [r4]
    5a60:	e3510000 	cmp	r1, #0
    5a64:	0a00001d 	beq	5ae0 <initialize_argv+0xe0>
    5a68:	e3560000 	cmp	r6, #0
    5a6c:	e2842001 	add	r2, r4, #1
    5a70:	1a000006 	bne	5a90 <initialize_argv+0x90>
    5a74:	e3500000 	cmp	r0, #0
    5a78:	159830a4 	ldrne	r3, [r8, #164]	; 0xa4
    5a7c:	1780c103 	strne	r12, [r0, r3, lsl #2]
    5a80:	e59830a4 	ldr	r3, [r8, #164]	; 0xa4
    5a84:	e2833001 	add	r3, r3, #1
    5a88:	e58830a4 	str	r3, [r8, #164]	; 0xa4
    5a8c:	e3a06001 	mov	r6, #1
    5a90:	e3510020 	cmp	r1, #32
    5a94:	0a000022 	beq	5b24 <initialize_argv+0x124>
    5a98:	e3510022 	cmp	r1, #34	; 0x22
    5a9c:	13510027 	cmpne	r1, #39	; 0x27
    5aa0:	1a00001a 	bne	5b10 <initialize_argv+0x110>
    5aa4:	e5d43001 	ldrb	r3, [r4, #1]
    5aa8:	e3530000 	cmp	r3, #0
    5aac:	0a000032 	beq	5b7c <initialize_argv+0x17c>
    5ab0:	e1510003 	cmp	r1, r3
    5ab4:	0a00001f 	beq	5b38 <initialize_argv+0x138>
    5ab8:	e2842002 	add	r2, r4, #2
    5abc:	ea000001 	b	5ac8 <initialize_argv+0xc8>
    5ac0:	e1510003 	cmp	r1, r3
    5ac4:	0a00001c 	beq	5b3c <initialize_argv+0x13c>
    5ac8:	e3500000 	cmp	r0, #0
    5acc:	14cc3001 	strbne	r3, [r12], #1
    5ad0:	e1a04002 	mov	r4, r2
    5ad4:	e4d23001 	ldrb	r3, [r2], #1
    5ad8:	e3530000 	cmp	r3, #0
    5adc:	1afffff7 	bne	5ac0 <initialize_argv+0xc0>
    5ae0:	e3590001 	cmp	r9, #1
    5ae4:	0a000016 	beq	5b44 <initialize_argv+0x144>
    5ae8:	e3590002 	cmp	r9, #2
    5aec:	1a000020 	bne	5b74 <initialize_argv+0x174>
    5af0:	e3a03000 	mov	r3, #0
    5af4:	e5cc3000 	strb	r3, [r12]
    5af8:	e59820a4 	ldr	r2, [r8, #164]	; 0xa4
    5afc:	e7803102 	str	r3, [r0, r2, lsl #2]
    5b00:	e58800a8 	str	r0, [r8, #168]	; 0xa8
    5b04:	e28dd008 	add	sp, sp, #8
    5b08:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    5b0c:	e12fff1e 	bx	lr
    5b10:	e3500000 	cmp	r0, #0
    5b14:	01a04002 	moveq	r4, r2
    5b18:	14cc1001 	strbne	r1, [r12], #1
    5b1c:	11a04002 	movne	r4, r2
    5b20:	eaffffcd 	b	5a5c <initialize_argv+0x5c>
    5b24:	e3500000 	cmp	r0, #0
    5b28:	14cca001 	strbne	r10, [r12], #1
    5b2c:	e1a04002 	mov	r4, r2
    5b30:	e3a06000 	mov	r6, #0
    5b34:	eaffffc8 	b	5a5c <initialize_argv+0x5c>
    5b38:	e1a04002 	mov	r4, r2
    5b3c:	e2844001 	add	r4, r4, #1
    5b40:	eaffffc5 	b	5a5c <initialize_argv+0x5c>
    5b44:	e0670004 	rsb	r0, r7, r4
    5b48:	e2800010 	add	r0, r0, #16
    5b4c:	e3c0000f 	bic	r0, r0, #15
    5b50:	e2400c01 	sub	r0, r0, #256	; 0x100
    5b54:	ebffff23 	bl	57e8 <_sbrk>
    5b58:	e59800a4 	ldr	r0, [r8, #164]	; 0xa4
    5b5c:	e2800004 	add	r0, r0, #4
    5b60:	e3c00003 	bic	r0, r0, #3
    5b64:	e1a00100 	lsl	r0, r0, #2
    5b68:	ebffff1e 	bl	57e8 <_sbrk>
    5b6c:	e3700001 	cmn	r0, #1
    5b70:	0affffe3 	beq	5b04 <initialize_argv+0x104>
    5b74:	e2899001 	add	r9, r9, #1
    5b78:	eaffffb3 	b	5a4c <initialize_argv+0x4c>
    5b7c:	e1a04002 	mov	r4, r2
    5b80:	eaffffd6 	b	5ae0 <initialize_argv+0xe0>
    5b84:	000075d4 	.word	0x000075d4

00005b88 <__cs3_isr_interrupt>:
    5b88:	eafffffe 	b	5b88 <__cs3_isr_interrupt>

00005b8c <__errno>:
    5b8c:	e59f3004 	ldr	r3, [pc, #4]	; 5b98 <__errno+0xc>
    5b90:	e5930000 	ldr	r0, [r3]
    5b94:	e12fff1e 	bx	lr
    5b98:	00006920 	.word	0x00006920

00005b9c <__libc_init_array>:
    5b9c:	e92d4070 	push	{r4, r5, r6, lr}
    5ba0:	e59f506c 	ldr	r5, [pc, #108]	; 5c14 <__libc_init_array+0x78>
    5ba4:	e59f606c 	ldr	r6, [pc, #108]	; 5c18 <__libc_init_array+0x7c>
    5ba8:	e0656006 	rsb	r6, r5, r6
    5bac:	e1b06146 	asrs	r6, r6, #2
    5bb0:	12455004 	subne	r5, r5, #4
    5bb4:	13a04000 	movne	r4, #0
    5bb8:	0a000005 	beq	5bd4 <__libc_init_array+0x38>
    5bbc:	e5b53004 	ldr	r3, [r5, #4]!
    5bc0:	e2844001 	add	r4, r4, #1
    5bc4:	e1a0e00f 	mov	lr, pc
    5bc8:	e12fff13 	bx	r3
    5bcc:	e1560004 	cmp	r6, r4
    5bd0:	1afffff9 	bne	5bbc <__libc_init_array+0x20>
    5bd4:	e59f5040 	ldr	r5, [pc, #64]	; 5c1c <__libc_init_array+0x80>
    5bd8:	e59f6040 	ldr	r6, [pc, #64]	; 5c20 <__libc_init_array+0x84>
    5bdc:	e0656006 	rsb	r6, r5, r6
    5be0:	eb000234 	bl	64b8 <_init>
    5be4:	e1b06146 	asrs	r6, r6, #2
    5be8:	12455004 	subne	r5, r5, #4
    5bec:	13a04000 	movne	r4, #0
    5bf0:	0a000005 	beq	5c0c <__libc_init_array+0x70>
    5bf4:	e5b53004 	ldr	r3, [r5, #4]!
    5bf8:	e2844001 	add	r4, r4, #1
    5bfc:	e1a0e00f 	mov	lr, pc
    5c00:	e12fff13 	bx	r3
    5c04:	e1560004 	cmp	r6, r4
    5c08:	1afffff9 	bne	5bf4 <__libc_init_array+0x58>
    5c0c:	e8bd4070 	pop	{r4, r5, r6, lr}
    5c10:	e12fff1e 	bx	lr
    5c14:	000064d0 	.word	0x000064d0
    5c18:	000064d0 	.word	0x000064d0
    5c1c:	000064d0 	.word	0x000064d0
    5c20:	000064dc 	.word	0x000064dc

Disassembly of section .rodata:

00005c28 <_global_impure_ptr-0x880>:
    5c28:	4f5b063f 	.word	0x4f5b063f
    5c2c:	077d6d66 	.word	0x077d6d66
    5c30:	7c77677f 	.word	0x7c77677f
    5c34:	71795e39 	.word	0x71795e39
    5c38:	65747942 	.word	0x65747942
    5c3c:	45303d31 	.word	0x45303d31
    5c40:	00000000 	.word	0x00000000
    5c44:	65747942 	.word	0x65747942
    5c48:	30463d32 	.word	0x30463d32
    5c4c:	00000000 	.word	0x00000000
    5c50:	65747942 	.word	0x65747942
    5c54:	45303d33 	.word	0x45303d33
    5c58:	00000000 	.word	0x00000000
    5c5c:	65747942 	.word	0x65747942
    5c60:	36313d31 	.word	0x36313d31
    5c64:	00000000 	.word	0x00000000
    5c68:	65747942 	.word	0x65747942
    5c6c:	36313d33 	.word	0x36313d33
    5c70:	00000000 	.word	0x00000000
    5c74:	65747942 	.word	0x65747942
    5c78:	45313d31 	.word	0x45313d31
    5c7c:	00000000 	.word	0x00000000
    5c80:	65747942 	.word	0x65747942
    5c84:	45313d33 	.word	0x45313d33
    5c88:	00000000 	.word	0x00000000
    5c8c:	65747942 	.word	0x65747942
    5c90:	36323d31 	.word	0x36323d31
    5c94:	00000000 	.word	0x00000000
    5c98:	65747942 	.word	0x65747942
    5c9c:	36323d33 	.word	0x36323d33
    5ca0:	00000000 	.word	0x00000000
    5ca4:	65747942 	.word	0x65747942
    5ca8:	35323d31 	.word	0x35323d31
    5cac:	00000000 	.word	0x00000000
    5cb0:	65747942 	.word	0x65747942
    5cb4:	35323d33 	.word	0x35323d33
    5cb8:	00000000 	.word	0x00000000
    5cbc:	65747942 	.word	0x65747942
    5cc0:	45323d31 	.word	0x45323d31
    5cc4:	00000000 	.word	0x00000000
    5cc8:	65747942 	.word	0x65747942
    5ccc:	45323d33 	.word	0x45323d33
    5cd0:	00000000 	.word	0x00000000
    5cd4:	65747942 	.word	0x65747942
    5cd8:	36333d31 	.word	0x36333d31
    5cdc:	00000000 	.word	0x00000000
    5ce0:	65747942 	.word	0x65747942
    5ce4:	36333d33 	.word	0x36333d33
    5ce8:	00000000 	.word	0x00000000
    5cec:	65747942 	.word	0x65747942
    5cf0:	44333d31 	.word	0x44333d31
    5cf4:	00000000 	.word	0x00000000
    5cf8:	65747942 	.word	0x65747942
    5cfc:	44333d33 	.word	0x44333d33
    5d00:	00000000 	.word	0x00000000
    5d04:	65747942 	.word	0x65747942
    5d08:	45333d31 	.word	0x45333d31
    5d0c:	00000000 	.word	0x00000000
    5d10:	65747942 	.word	0x65747942
    5d14:	45333d33 	.word	0x45333d33
    5d18:	00000000 	.word	0x00000000
    5d1c:	65747942 	.word	0x65747942
    5d20:	36343d31 	.word	0x36343d31
    5d24:	00000000 	.word	0x00000000
    5d28:	65747942 	.word	0x65747942
    5d2c:	36343d33 	.word	0x36343d33
    5d30:	00000000 	.word	0x00000000
    5d34:	65747942 	.word	0x65747942
    5d38:	35343d31 	.word	0x35343d31
    5d3c:	00000000 	.word	0x00000000
    5d40:	65747942 	.word	0x65747942
    5d44:	35343d33 	.word	0x35343d33
    5d48:	00000000 	.word	0x00000000
    5d4c:	65747942 	.word	0x65747942
    5d50:	45343d31 	.word	0x45343d31
    5d54:	00000000 	.word	0x00000000
    5d58:	65747942 	.word	0x65747942
    5d5c:	45343d33 	.word	0x45343d33
    5d60:	00000000 	.word	0x00000000
    5d64:	65747942 	.word	0x65747942
    5d68:	35353d31 	.word	0x35353d31
    5d6c:	00000000 	.word	0x00000000
    5d70:	65747942 	.word	0x65747942
    5d74:	35353d33 	.word	0x35353d33
    5d78:	00000000 	.word	0x00000000
    5d7c:	65747942 	.word	0x65747942
    5d80:	36363d31 	.word	0x36363d31
    5d84:	00000000 	.word	0x00000000
    5d88:	65747942 	.word	0x65747942
    5d8c:	36363d33 	.word	0x36363d33
    5d90:	00000000 	.word	0x00000000
    5d94:	65747942 	.word	0x65747942
    5d98:	35313d31 	.word	0x35313d31
    5d9c:	00000000 	.word	0x00000000
    5da0:	65747942 	.word	0x65747942
    5da4:	35313d33 	.word	0x35313d33
    5da8:	00000000 	.word	0x00000000
    5dac:	65747942 	.word	0x65747942
    5db0:	44313d31 	.word	0x44313d31
    5db4:	00000000 	.word	0x00000000
    5db8:	65747942 	.word	0x65747942
    5dbc:	44313d33 	.word	0x44313d33
    5dc0:	00000000 	.word	0x00000000
    5dc4:	65747942 	.word	0x65747942
    5dc8:	34323d31 	.word	0x34323d31
    5dcc:	00000000 	.word	0x00000000
    5dd0:	65747942 	.word	0x65747942
    5dd4:	34323d33 	.word	0x34323d33
    5dd8:	00000000 	.word	0x00000000
    5ddc:	65747942 	.word	0x65747942
    5de0:	44323d31 	.word	0x44323d31
    5de4:	00000000 	.word	0x00000000
    5de8:	65747942 	.word	0x65747942
    5dec:	44323d33 	.word	0x44323d33
    5df0:	00000000 	.word	0x00000000
    5df4:	65747942 	.word	0x65747942
    5df8:	43323d31 	.word	0x43323d31
    5dfc:	00000000 	.word	0x00000000
    5e00:	65747942 	.word	0x65747942
    5e04:	43323d33 	.word	0x43323d33
    5e08:	00000000 	.word	0x00000000
    5e0c:	65747942 	.word	0x65747942
    5e10:	35333d31 	.word	0x35333d31
    5e14:	00000000 	.word	0x00000000
    5e18:	65747942 	.word	0x65747942
    5e1c:	35333d33 	.word	0x35333d33
    5e20:	00000000 	.word	0x00000000
    5e24:	65747942 	.word	0x65747942
    5e28:	43333d31 	.word	0x43333d31
    5e2c:	00000000 	.word	0x00000000
    5e30:	65747942 	.word	0x65747942
    5e34:	43333d33 	.word	0x43333d33
    5e38:	00000000 	.word	0x00000000
    5e3c:	65747942 	.word	0x65747942
    5e40:	33343d31 	.word	0x33343d31
    5e44:	00000000 	.word	0x00000000
    5e48:	65747942 	.word	0x65747942
    5e4c:	33343d33 	.word	0x33343d33
    5e50:	00000000 	.word	0x00000000
    5e54:	65747942 	.word	0x65747942
    5e58:	34343d31 	.word	0x34343d31
    5e5c:	00000000 	.word	0x00000000
    5e60:	65747942 	.word	0x65747942
    5e64:	34343d33 	.word	0x34343d33
    5e68:	00000000 	.word	0x00000000
    5e6c:	65747942 	.word	0x65747942
    5e70:	44343d31 	.word	0x44343d31
    5e74:	00000000 	.word	0x00000000
    5e78:	65747942 	.word	0x65747942
    5e7c:	44343d33 	.word	0x44343d33
    5e80:	00000000 	.word	0x00000000
    5e84:	65747942 	.word	0x65747942
    5e88:	34353d31 	.word	0x34353d31
    5e8c:	00000000 	.word	0x00000000
    5e90:	65747942 	.word	0x65747942
    5e94:	34353d33 	.word	0x34353d33
    5e98:	00000000 	.word	0x00000000
    5e9c:	65747942 	.word	0x65747942
    5ea0:	42353d31 	.word	0x42353d31
    5ea4:	00000000 	.word	0x00000000
    5ea8:	65747942 	.word	0x65747942
    5eac:	42353d33 	.word	0x42353d33
    5eb0:	00000000 	.word	0x00000000
    5eb4:	65747942 	.word	0x65747942
    5eb8:	38353d31 	.word	0x38353d31
    5ebc:	00000000 	.word	0x00000000
    5ec0:	65747942 	.word	0x65747942
    5ec4:	38353d33 	.word	0x38353d33
    5ec8:	00000000 	.word	0x00000000
    5ecc:	65747942 	.word	0x65747942
    5ed0:	43313d31 	.word	0x43313d31
    5ed4:	00000000 	.word	0x00000000
    5ed8:	65747942 	.word	0x65747942
    5edc:	43313d33 	.word	0x43313d33
    5ee0:	00000000 	.word	0x00000000
    5ee4:	65747942 	.word	0x65747942
    5ee8:	42313d31 	.word	0x42313d31
    5eec:	00000000 	.word	0x00000000
    5ef0:	65747942 	.word	0x65747942
    5ef4:	42313d33 	.word	0x42313d33
    5ef8:	00000000 	.word	0x00000000
    5efc:	65747942 	.word	0x65747942
    5f00:	33323d31 	.word	0x33323d31
    5f04:	00000000 	.word	0x00000000
    5f08:	65747942 	.word	0x65747942
    5f0c:	33323d33 	.word	0x33323d33
    5f10:	00000000 	.word	0x00000000
    5f14:	65747942 	.word	0x65747942
    5f18:	42323d31 	.word	0x42323d31
    5f1c:	00000000 	.word	0x00000000
    5f20:	65747942 	.word	0x65747942
    5f24:	42323d33 	.word	0x42323d33
    5f28:	00000000 	.word	0x00000000
    5f2c:	65747942 	.word	0x65747942
    5f30:	34333d31 	.word	0x34333d31
    5f34:	00000000 	.word	0x00000000
    5f38:	65747942 	.word	0x65747942
    5f3c:	34333d33 	.word	0x34333d33
    5f40:	00000000 	.word	0x00000000
    5f44:	65747942 	.word	0x65747942
    5f48:	33333d31 	.word	0x33333d31
    5f4c:	00000000 	.word	0x00000000
    5f50:	65747942 	.word	0x65747942
    5f54:	33333d33 	.word	0x33333d33
    5f58:	00000000 	.word	0x00000000
    5f5c:	65747942 	.word	0x65747942
    5f60:	42333d31 	.word	0x42333d31
    5f64:	00000000 	.word	0x00000000
    5f68:	65747942 	.word	0x65747942
    5f6c:	42333d33 	.word	0x42333d33
    5f70:	00000000 	.word	0x00000000
    5f74:	65747942 	.word	0x65747942
    5f78:	32343d31 	.word	0x32343d31
    5f7c:	00000000 	.word	0x00000000
    5f80:	65747942 	.word	0x65747942
    5f84:	32343d33 	.word	0x32343d33
    5f88:	00000000 	.word	0x00000000
    5f8c:	65747942 	.word	0x65747942
    5f90:	42343d31 	.word	0x42343d31
    5f94:	00000000 	.word	0x00000000
    5f98:	65747942 	.word	0x65747942
    5f9c:	42343d33 	.word	0x42343d33
    5fa0:	00000000 	.word	0x00000000
    5fa4:	65747942 	.word	0x65747942
    5fa8:	41353d31 	.word	0x41353d31
    5fac:	00000000 	.word	0x00000000
    5fb0:	65747942 	.word	0x65747942
    5fb4:	41353d33 	.word	0x41353d33
    5fb8:	00000000 	.word	0x00000000
    5fbc:	65747942 	.word	0x65747942
    5fc0:	41313d31 	.word	0x41313d31
    5fc4:	00000000 	.word	0x00000000
    5fc8:	65747942 	.word	0x65747942
    5fcc:	41313d33 	.word	0x41313d33
    5fd0:	00000000 	.word	0x00000000
    5fd4:	65747942 	.word	0x65747942
    5fd8:	32323d31 	.word	0x32323d31
    5fdc:	00000000 	.word	0x00000000
    5fe0:	65747942 	.word	0x65747942
    5fe4:	32323d33 	.word	0x32323d33
    5fe8:	00000000 	.word	0x00000000
    5fec:	65747942 	.word	0x65747942
    5ff0:	31323d31 	.word	0x31323d31
    5ff4:	00000000 	.word	0x00000000
    5ff8:	65747942 	.word	0x65747942
    5ffc:	31323d33 	.word	0x31323d33
    6000:	00000000 	.word	0x00000000
    6004:	65747942 	.word	0x65747942
    6008:	41323d31 	.word	0x41323d31
    600c:	00000000 	.word	0x00000000
    6010:	65747942 	.word	0x65747942
    6014:	41323d33 	.word	0x41323d33
    6018:	00000000 	.word	0x00000000
    601c:	65747942 	.word	0x65747942
    6020:	32333d31 	.word	0x32333d31
    6024:	00000000 	.word	0x00000000
    6028:	65747942 	.word	0x65747942
    602c:	32333d33 	.word	0x32333d33
    6030:	00000000 	.word	0x00000000
    6034:	65747942 	.word	0x65747942
    6038:	31333d31 	.word	0x31333d31
    603c:	00000000 	.word	0x00000000
    6040:	65747942 	.word	0x65747942
    6044:	31333d33 	.word	0x31333d33
    6048:	00000000 	.word	0x00000000
    604c:	65747942 	.word	0x65747942
    6050:	41333d31 	.word	0x41333d31
    6054:	00000000 	.word	0x00000000
    6058:	65747942 	.word	0x65747942
    605c:	41333d33 	.word	0x41333d33
    6060:	00000000 	.word	0x00000000
    6064:	65747942 	.word	0x65747942
    6068:	31343d31 	.word	0x31343d31
    606c:	00000000 	.word	0x00000000
    6070:	65747942 	.word	0x65747942
    6074:	31343d33 	.word	0x31343d33
    6078:	00000000 	.word	0x00000000
    607c:	65747942 	.word	0x65747942
    6080:	39343d31 	.word	0x39343d31
    6084:	00000000 	.word	0x00000000
    6088:	65747942 	.word	0x65747942
    608c:	39343d33 	.word	0x39343d33
    6090:	00000000 	.word	0x00000000
    6094:	65747942 	.word	0x65747942
    6098:	41343d31 	.word	0x41343d31
    609c:	00000000 	.word	0x00000000
    60a0:	65747942 	.word	0x65747942
    60a4:	41343d33 	.word	0x41343d33
    60a8:	00000000 	.word	0x00000000
    60ac:	65747942 	.word	0x65747942
    60b0:	39323d31 	.word	0x39323d31
    60b4:	00000000 	.word	0x00000000
    60b8:	65747942 	.word	0x65747942
    60bc:	39323d33 	.word	0x39323d33
    60c0:	00000000 	.word	0x00000000
    60c4:	65747942 	.word	0x65747942
    60c8:	44303d31 	.word	0x44303d31
    60cc:	00000000 	.word	0x00000000
    60d0:	65747942 	.word	0x65747942
    60d4:	44303d33 	.word	0x44303d33
    60d8:	00000000 	.word	0x00000000
    60dc:	65747942 	.word	0x65747942
    60e0:	43343d31 	.word	0x43343d31
    60e4:	00000000 	.word	0x00000000
    60e8:	65747942 	.word	0x65747942
    60ec:	43343d33 	.word	0x43343d33
    60f0:	00000000 	.word	0x00000000
    60f4:	65747942 	.word	0x65747942
    60f8:	32353d31 	.word	0x32353d31
    60fc:	00000000 	.word	0x00000000
    6100:	65747942 	.word	0x65747942
    6104:	32353d33 	.word	0x32353d33
    6108:	00000000 	.word	0x00000000
    610c:	65747942 	.word	0x65747942
    6110:	44353d31 	.word	0x44353d31
    6114:	00000000 	.word	0x00000000
    6118:	65747942 	.word	0x65747942
    611c:	44353d33 	.word	0x44353d33
    6120:	00000000 	.word	0x00000000
    6124:	65747942 	.word	0x65747942
    6128:	32313d31 	.word	0x32313d31
    612c:	00000000 	.word	0x00000000
    6130:	65747942 	.word	0x65747942
    6134:	32313d33 	.word	0x32313d33
    6138:	00000000 	.word	0x00000000
    613c:	65747942 	.word	0x65747942
    6140:	31363d31 	.word	0x31363d31
    6144:	00000000 	.word	0x00000000
    6148:	65747942 	.word	0x65747942
    614c:	31363d33 	.word	0x31363d33
    6150:	00000000 	.word	0x00000000
    6154:	65747942 	.word	0x65747942
    6158:	39353d31 	.word	0x39353d31
    615c:	00000000 	.word	0x00000000
    6160:	65747942 	.word	0x65747942
    6164:	39353d33 	.word	0x39353d33
    6168:	00000000 	.word	0x00000000
    616c:	65747942 	.word	0x65747942
    6170:	34313d31 	.word	0x34313d31
    6174:	00000000 	.word	0x00000000
    6178:	65747942 	.word	0x65747942
    617c:	34313d33 	.word	0x34313d33
    6180:	00000000 	.word	0x00000000
    6184:	65747942 	.word	0x65747942
    6188:	31313d31 	.word	0x31313d31
    618c:	00000000 	.word	0x00000000
    6190:	65747942 	.word	0x65747942
    6194:	31313d33 	.word	0x31313d33
    6198:	00000000 	.word	0x00000000
    619c:	65747942 	.word	0x65747942
    61a0:	36373d31 	.word	0x36373d31
    61a4:	00000000 	.word	0x00000000
    61a8:	65747942 	.word	0x65747942
    61ac:	36373d33 	.word	0x36373d33
    61b0:	00000000 	.word	0x00000000
    61b4:	65747942 	.word	0x65747942
    61b8:	35303d31 	.word	0x35303d31
    61bc:	00000000 	.word	0x00000000
    61c0:	65747942 	.word	0x65747942
    61c4:	35303d33 	.word	0x35303d33
    61c8:	00000000 	.word	0x00000000
    61cc:	65747942 	.word	0x65747942
    61d0:	36303d31 	.word	0x36303d31
    61d4:	00000000 	.word	0x00000000
    61d8:	65747942 	.word	0x65747942
    61dc:	36303d33 	.word	0x36303d33
    61e0:	00000000 	.word	0x00000000
    61e4:	65747942 	.word	0x65747942
    61e8:	34303d31 	.word	0x34303d31
    61ec:	00000000 	.word	0x00000000
    61f0:	65747942 	.word	0x65747942
    61f4:	34303d33 	.word	0x34303d33
    61f8:	00000000 	.word	0x00000000
    61fc:	65747942 	.word	0x65747942
    6200:	43303d31 	.word	0x43303d31
    6204:	00000000 	.word	0x00000000
    6208:	65747942 	.word	0x65747942
    620c:	43303d33 	.word	0x43303d33
    6210:	00000000 	.word	0x00000000
    6214:	65747942 	.word	0x65747942
    6218:	33303d31 	.word	0x33303d31
    621c:	00000000 	.word	0x00000000
    6220:	65747942 	.word	0x65747942
    6224:	33303d33 	.word	0x33303d33
    6228:	00000000 	.word	0x00000000
    622c:	65747942 	.word	0x65747942
    6230:	42303d31 	.word	0x42303d31
    6234:	00000000 	.word	0x00000000
    6238:	65747942 	.word	0x65747942
    623c:	42303d33 	.word	0x42303d33
    6240:	00000000 	.word	0x00000000
    6244:	65747942 	.word	0x65747942
    6248:	33383d31 	.word	0x33383d31
    624c:	00000000 	.word	0x00000000
    6250:	65747942 	.word	0x65747942
    6254:	33383d33 	.word	0x33383d33
    6258:	00000000 	.word	0x00000000
    625c:	65747942 	.word	0x65747942
    6260:	41303d31 	.word	0x41303d31
    6264:	00000000 	.word	0x00000000
    6268:	65747942 	.word	0x65747942
    626c:	41303d33 	.word	0x41303d33
    6270:	00000000 	.word	0x00000000
    6274:	65747942 	.word	0x65747942
    6278:	31303d31 	.word	0x31303d31
    627c:	00000000 	.word	0x00000000
    6280:	65747942 	.word	0x65747942
    6284:	31303d33 	.word	0x31303d33
    6288:	00000000 	.word	0x00000000
    628c:	65747942 	.word	0x65747942
    6290:	39303d31 	.word	0x39303d31
    6294:	00000000 	.word	0x00000000
    6298:	65747942 	.word	0x65747942
    629c:	39303d33 	.word	0x39303d33
    62a0:	00000000 	.word	0x00000000
    62a4:	65747942 	.word	0x65747942
    62a8:	38373d31 	.word	0x38373d31
    62ac:	00000000 	.word	0x00000000
    62b0:	65747942 	.word	0x65747942
    62b4:	38373d33 	.word	0x38373d33
    62b8:	00000000 	.word	0x00000000
    62bc:	65747942 	.word	0x65747942
    62c0:	37303d31 	.word	0x37303d31
    62c4:	00000000 	.word	0x00000000
    62c8:	65747942 	.word	0x65747942
    62cc:	37303d33 	.word	0x37303d33
    62d0:	00000000 	.word	0x00000000
    62d4:	65747942 	.word	0x65747942
    62d8:	45373d31 	.word	0x45373d31
    62dc:	00000000 	.word	0x00000000
    62e0:	65747942 	.word	0x65747942
    62e4:	45373d33 	.word	0x45373d33
    62e8:	00000000 	.word	0x00000000
    62ec:	65747942 	.word	0x65747942
    62f0:	37373d31 	.word	0x37373d31
    62f4:	00000000 	.word	0x00000000
    62f8:	65747942 	.word	0x65747942
    62fc:	37373d33 	.word	0x37373d33
    6300:	00000000 	.word	0x00000000
    6304:	65747942 	.word	0x65747942
    6308:	43373d31 	.word	0x43373d31
    630c:	00000000 	.word	0x00000000
    6310:	65747942 	.word	0x65747942
    6314:	43373d33 	.word	0x43373d33
    6318:	00000000 	.word	0x00000000
    631c:	65747942 	.word	0x65747942
    6320:	42373d31 	.word	0x42373d31
    6324:	00000000 	.word	0x00000000
    6328:	65747942 	.word	0x65747942
    632c:	42373d33 	.word	0x42373d33
    6330:	00000000 	.word	0x00000000
    6334:	65747942 	.word	0x65747942
    6338:	43363d31 	.word	0x43363d31
    633c:	00000000 	.word	0x00000000
    6340:	65747942 	.word	0x65747942
    6344:	43363d33 	.word	0x43363d33
    6348:	00000000 	.word	0x00000000
    634c:	65747942 	.word	0x65747942
    6350:	35373d31 	.word	0x35373d31
    6354:	00000000 	.word	0x00000000
    6358:	65747942 	.word	0x65747942
    635c:	35373d33 	.word	0x35373d33
    6360:	00000000 	.word	0x00000000
    6364:	65747942 	.word	0x65747942
    6368:	44373d31 	.word	0x44373d31
    636c:	00000000 	.word	0x00000000
    6370:	65747942 	.word	0x65747942
    6374:	44373d33 	.word	0x44373d33
    6378:	00000000 	.word	0x00000000
    637c:	65747942 	.word	0x65747942
    6380:	42363d31 	.word	0x42363d31
    6384:	00000000 	.word	0x00000000
    6388:	65747942 	.word	0x65747942
    638c:	42363d33 	.word	0x42363d33
    6390:	00000000 	.word	0x00000000
    6394:	65747942 	.word	0x65747942
    6398:	33373d31 	.word	0x33373d31
    639c:	00000000 	.word	0x00000000
    63a0:	65747942 	.word	0x65747942
    63a4:	33373d33 	.word	0x33373d33
    63a8:	00000000 	.word	0x00000000
    63ac:	65747942 	.word	0x65747942
    63b0:	34373d31 	.word	0x34373d31
    63b4:	00000000 	.word	0x00000000
    63b8:	65747942 	.word	0x65747942
    63bc:	34373d33 	.word	0x34373d33
    63c0:	00000000 	.word	0x00000000
    63c4:	65747942 	.word	0x65747942
    63c8:	39363d31 	.word	0x39363d31
    63cc:	00000000 	.word	0x00000000
    63d0:	65747942 	.word	0x65747942
    63d4:	39363d33 	.word	0x39363d33
    63d8:	00000000 	.word	0x00000000
    63dc:	65747942 	.word	0x65747942
    63e0:	32373d31 	.word	0x32373d31
    63e4:	00000000 	.word	0x00000000
    63e8:	65747942 	.word	0x65747942
    63ec:	32373d33 	.word	0x32373d33
    63f0:	00000000 	.word	0x00000000
    63f4:	65747942 	.word	0x65747942
    63f8:	41373d31 	.word	0x41373d31
    63fc:	00000000 	.word	0x00000000
    6400:	65747942 	.word	0x65747942
    6404:	41373d33 	.word	0x41373d33
    6408:	00000000 	.word	0x00000000
    640c:	65747942 	.word	0x65747942
    6410:	30373d31 	.word	0x30373d31
    6414:	00000000 	.word	0x00000000
    6418:	65747942 	.word	0x65747942
    641c:	30373d33 	.word	0x30373d33
    6420:	00000000 	.word	0x00000000
    6424:	65747942 	.word	0x65747942
    6428:	31373d31 	.word	0x31373d31
    642c:	00000000 	.word	0x00000000
    6430:	65747942 	.word	0x65747942
    6434:	31373d33 	.word	0x31373d33
    6438:	00000000 	.word	0x00000000
    643c:	65747942 	.word	0x65747942
    6440:	39373d31 	.word	0x39373d31
    6444:	00000000 	.word	0x00000000
    6448:	65747942 	.word	0x65747942
    644c:	39373d33 	.word	0x39373d33
    6450:	00000000 	.word	0x00000000
    6454:	65747942 	.word	0x65747942
    6458:	30453d31 	.word	0x30453d31
    645c:	00000000 	.word	0x00000000
    6460:	65747942 	.word	0x65747942
    6464:	46323d33 	.word	0x46323d33
    6468:	00000000 	.word	0x00000000
    646c:	65747942 	.word	0x65747942
    6470:	37323d33 	.word	0x37323d33
    6474:	00000000 	.word	0x00000000
    6478:	65747942 	.word	0x65747942
    647c:	46313d33 	.word	0x46313d33
    6480:	00000000 	.word	0x00000000
    6484:	69727453 	.word	0x69727453
    6488:	6920676e 	.word	0x6920676e
    648c:	6f742073 	.word	0x6f742073
    6490:	6f6c206f 	.word	0x6f6c206f
    6494:	6620676e 	.word	0x6620676e
    6498:	4c20726f 	.word	0x4c20726f
    649c:	64204443 	.word	0x64204443
    64a0:	6c707369 	.word	0x6c707369
    64a4:	002e7961 	.word	0x002e7961

000064a8 <_global_impure_ptr>:
    64a8:	00006928 00000043 0000000a 0074743a     (i..C.......:tt.

000064b8 <_init>:
    64b8:	e1a0c00d 	mov	r12, sp
    64bc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    64c0:	e24cb004 	sub	r11, r12, #4
    64c4:	e24bd028 	sub	sp, r11, #40	; 0x28
    64c8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    64cc:	e12fff1e 	bx	lr

000064d0 <__init_array_start>:
    64d0:	00002c38 	.word	0x00002c38

000064d4 <__frame_dummy_init_array_entry>:
    64d4:	00000208 00005a00                       .....Z..

000064dc <__libc_fini>:
    64dc:	e1a0c00d 	mov	r12, sp
    64e0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    64e4:	e24cb004 	sub	r11, r12, #4
    64e8:	e24bd028 	sub	sp, r11, #40	; 0x28
    64ec:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    64f0:	e12fff1e 	bx	lr

000064f4 <__fini_array_start>:
    64f4:	000001c4 	.word	0x000001c4

000064f8 <__cs3_regions>:
    64f8:	00000000 	.word	0x00000000
    64fc:	00000040 	.word	0x00000040
    6500:	00000040 	.word	0x00000040
    6504:	00007128 	.word	0x00007128
    6508:	00000518 	.word	0x00000518

0000650c <__cs3_regions_end>:
    650c:	00000000 	.word	0x00000000
