
C:/EMBEDDED/LAB7/PART3/PART3.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	60 04 00 00 64 04 00 00 68 04 00 00 6c 04 00 00     `...d...h...l...
  30:	70 04 00 00 3c 08 00 00 20 04 00 00 74 04 00 00     p...<... ...t...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001bf 	bl	7d8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000924 	.word	0x00000924

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d70 	.word	0x00000d70

00000124 <__cs3_heap_start_ptr>:
 124:	00000d98 	.word	0x00000d98

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000d78 	.word	0x00000d78
 170:	00000d7b 	.word	0x00000d7b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d78 	.word	0x00000d78
 1bc:	00000d78 	.word	0x00000d78
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d78 	.word	0x00000d78
 200:	00000000 	.word	0x00000000
 204:	000008c8 	.word	0x000008c8

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000008c8 	.word	0x000008c8
 250:	00000d7c 	.word	0x00000d7c
 254:	00000928 	.word	0x00000928
 258:	00000000 	.word	0x00000000

0000025c <config_HPS_timer>:
volatile int * HPS_timer_ptr = (int *) 0xFFC08000; 	// Timer base address
int counter = 25000000;						//period=1/(100MHZ)x(100 x 10^6)=1 sec
//setup HPS timer
void config_HPS_timer()
{
	*(HPS_timer_ptr + 0x2) = 0; 						//write to control register to stop timer
 25c:	e3003930 	movw	r3, #2352	; 0x930
 260:	e3403000 	movt	r3, #0
 264:	e5932000 	ldr	r2, [r3]
 268:	e3a01000 	mov	r1, #0
 26c:	e5821008 	str	r1, [r2, #8]
	//set the timer period
	*(HPS_timer_ptr)=counter;						//write to timer load register
 270:	e5931004 	ldr	r1, [r3, #4]
 274:	e5821000 	str	r1, [r2]
	//write to control register to start timer, with interrupts
	*(HPS_timer_ptr + 2) = 0b011;						//int mask =0, mode = 1, enable =1
 278:	e5933000 	ldr	r3, [r3]
 27c:	e3a02003 	mov	r2, #3
 280:	e5832008 	str	r2, [r3, #8]
 284:	e12fff1e 	bx	lr

00000288 <pushbutton_ISR>:
void pushbutton_ISR( void ) 
{
	/* KEY base address */ 
	volatile int *KEY_ptr = (int *) 0xFF200050; 
	int press;
	press = *(KEY_ptr + 3);
 288:	e3a03000 	mov	r3, #0
 28c:	e34f3f20 	movt	r3, #65312	; 0xff20
 290:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
	// read the pushbutton interrupt register 
	*(KEY_ptr + 3) = press; // Clear the interrupt
 294:	e583205c 	str	r2, [r3, #92]	; 0x5c
	if (press & 0x1) // KEY0 
 298:	e3120001 	tst	r2, #1
 29c:	0a000009 	beq	2c8 <pushbutton_ISR+0x40>
	{
		//config_HPS_timer();
		if(run==1)
 2a0:	e3003930 	movw	r3, #2352	; 0x930
 2a4:	e3403000 	movt	r3, #0
 2a8:	e5933008 	ldr	r3, [r3, #8]
 2ac:	e3530001 	cmp	r3, #1
		{
			run=0;
 2b0:	e3003930 	movw	r3, #2352	; 0x930
 2b4:	e3403000 	movt	r3, #0
 2b8:	03a02000 	moveq	r2, #0
		}
		else
		{
			run=1;
 2bc:	13a02001 	movne	r2, #1
 2c0:	e5832008 	str	r2, [r3, #8]
 2c4:	e12fff1e 	bx	lr
		}
	}	
	else if (press & 0x2) // KEY1 
 2c8:	e3120002 	tst	r2, #2
 2cc:	0a00000d 	beq	308 <pushbutton_ISR+0x80>
	{
		*(HPS_timer_ptr + 0x2) = 0; 						//write to control register to stop timer
 2d0:	e3003930 	movw	r3, #2352	; 0x930
 2d4:	e3403000 	movt	r3, #0
 2d8:	e5932000 	ldr	r2, [r3]
 2dc:	e3a01000 	mov	r1, #0
 2e0:	e5821008 	str	r1, [r2, #8]
		//set the timer period
		counter/=2;
 2e4:	e5931004 	ldr	r1, [r3, #4]
 2e8:	e0811fa1 	add	r1, r1, r1, lsr #31
 2ec:	e1a010c1 	asr	r1, r1, #1
 2f0:	e5831004 	str	r1, [r3, #4]
		*(HPS_timer_ptr)=counter;							//write to timer load register
 2f4:	e5821000 	str	r1, [r2]
		*(HPS_timer_ptr + 2) = 0b011;						//int mask =0, mode = 1, enable =1
 2f8:	e5933000 	ldr	r3, [r3]
 2fc:	e3a02003 	mov	r2, #3
 300:	e5832008 	str	r2, [r3, #8]
 304:	e12fff1e 	bx	lr
	}
	else if (press & 0x4) // KEY2 
 308:	e3120004 	tst	r2, #4
 30c:	012fff1e 	bxeq	lr
	{
		*(HPS_timer_ptr + 0x2) = 0; 						//write to control register to stop timer
 310:	e3003930 	movw	r3, #2352	; 0x930
 314:	e3403000 	movt	r3, #0
 318:	e5932000 	ldr	r2, [r3]
 31c:	e3a01000 	mov	r1, #0
 320:	e5821008 	str	r1, [r2, #8]
		//set the timer period
		counter*=2;
 324:	e5931004 	ldr	r1, [r3, #4]
 328:	e1a01081 	lsl	r1, r1, #1
 32c:	e5831004 	str	r1, [r3, #4]
		*(HPS_timer_ptr)=counter;							//write to timer load register
 330:	e5821000 	str	r1, [r2]
		*(HPS_timer_ptr + 2) = 0b011;						//int mask =0, mode = 1, enable =1
 334:	e5933000 	ldr	r3, [r3]
 338:	e3a02003 	mov	r2, #3
 33c:	e5832008 	str	r2, [r3, #8]
 340:	e12fff1e 	bx	lr

00000344 <HPS_timer_ISR>:

//
void HPS_timer_ISR()
{
	volatile int * HPS_timer_ptr= (int *)0xFFC08000;	//HPS timer address
	count+=run;											//used by main program
 344:	e3003d94 	movw	r3, #3476	; 0xd94
 348:	e3403000 	movt	r3, #0
 34c:	e3002930 	movw	r2, #2352	; 0x930
 350:	e3402000 	movt	r2, #0
 354:	e5931000 	ldr	r1, [r3]
 358:	e5922008 	ldr	r2, [r2, #8]
 35c:	e0812002 	add	r2, r1, r2
 360:	e5832000 	str	r2, [r3]
	*(HPS_timer_ptr+3); 							//read timer end of interrupt register to clear interrupt
 364:	e3083fff 	movw	r3, #36863	; 0x8fff
 368:	e34f3fc0 	movt	r3, #65472	; 0xffc0
 36c:	e5133ff3 	ldr	r3, [r3, #-4083]	; 0xfffff00d
 370:	e12fff1e 	bx	lr

00000374 <set_A9_IRQ_stack>:
void set_A9_IRQ_stack(void)
{
	int stack, mode;
	stack=0xFFFFFFFF - 7; 							// Top of A9 onchip memory, aligned to 8 bytes
	mode= 0b11010010; 								//change processor to IRQ mode with interrupts disabled
	asm ("msr cpsr, %[ps]"::[ps] "r" (mode));
 374:	e3a030d2 	mov	r3, #210	; 0xd2
 378:	e129f003 	msr	CPSR_fc, r3
	asm	("mov sp, %[ps]"::[ps]"r"(stack));			// set banked stack pointer
 37c:	e3e03007 	mvn	r3, #7
 380:	e1a0d003 	mov	sp, r3
	mode=0b11010011;								//go back to svc mode before executing subroutine return
	asm("msr cpsr, %[ps]"::[ps]"r"(mode));			
 384:	e3a030d3 	mov	r3, #211	; 0xd3
 388:	e129f003 	msr	CPSR_fc, r3
 38c:	e12fff1e 	bx	lr

00000390 <config_interrupt>:
/* * Configure registers in the GIC for an individual Interrupt ID. 
We * configure only the Interrupt Set Enable Registers (ICDISERn) and 
* Interrupt Processor Target Registers (ICDIPTRn). The default (reset) 
* values are used for other registers in the GIC */
void config_interrupt( int N, int CPU_target)
{
 390:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset, index, value, address;
	//configure the interrup set-enable registers(ICDISERn)
	//reg_offset= (integer_dive(N/32)*4; value=1<<(N mod 32)
	reg_offset= (N>>3) & 0xFFFFFFFC;
 394:	e1a031c0 	asr	r3, r0, #3
 398:	e3c33003 	bic	r3, r3, #3
	index= N & 0x1F;
	value=0x1 << index;
	address = 0xFFFED100 + reg_offset;
 39c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
{
	int reg_offset, index, value, address;
	//configure the interrup set-enable registers(ICDISERn)
	//reg_offset= (integer_dive(N/32)*4; value=1<<(N mod 32)
	reg_offset= (N>>3) & 0xFFFFFFFC;
	index= N & 0x1F;
 3a0:	e200201f 	and	r2, r0, #31
	value=0x1 << index;
	address = 0xFFFED100 + reg_offset;
	//using the adress and valie, set the appropiate bit
	*(int *)address |= value;
 3a4:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
 3a8:	e3a04001 	mov	r4, #1
 3ac:	e18c2214 	orr	r2, r12, r4, lsl r2
 3b0:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	//reg_offset = integer_div(N/4)*4; index =N mod 4
	reg_offset = (N & 0xFFFFFFFC);
	index=N & 0x3;
	address= 0xFFFED800 +reg_offset +index;
	//using the address and value, write to (only) the appropiate byte
	*(char *)address = (char) CPU_target;
 3b4:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
 3b8:	e5c01000 	strb	r1, [r0]
}
 3bc:	e8bd0010 	ldmfd	sp!, {r4}
 3c0:	e12fff1e 	bx	lr

000003c4 <config_GIC>:

//configure the Generic Interrupt controller
void config_GIC()
{
 3c4:	e92d4008 	push	{r3, lr}
	config_interrupt(73,1);							//configure the FPGA keys interrupt (73)
 3c8:	e3a00049 	mov	r0, #73	; 0x49
 3cc:	e3a01001 	mov	r1, #1
 3d0:	ebffffee 	bl	390 <config_interrupt>
	config_interrupt(199,1);						//configure the HPS0 timer interrupt (199)
 3d4:	e3a000c7 	mov	r0, #199	; 0xc7
 3d8:	e3a01001 	mov	r1, #1
 3dc:	ebffffeb 	bl	390 <config_interrupt>
	
	*((int *) 0xFFFEC104) = 0xFFFF;					//SET INTERRUPT PRIORITY MASK REGISTER (ICCPMR). ENABLE AL PRIORITIES
 3e0:	e3e02a13 	mvn	r2, #77824	; 0x13000
 3e4:	e30f3fff 	movw	r3, #65535	; 0xffff
 3e8:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
	*((int *) 0xFFFEC100) = 1;						//SET THE ENABLE IN THE CPU INTERFACE CONTROL REGISTER (ICCICR)
 3ec:	e3a03001 	mov	r3, #1
 3f0:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	*((int *) 0xFFFED000) =1;						//SET THE ENABLE IN THE DISTRIBUTOR CONTROL REGISTER (ICDDCR)	
 3f4:	e3e02a12 	mvn	r2, #73728	; 0x12000
 3f8:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
 3fc:	e8bd8008 	pop	{r3, pc}

00000400 <config_KEYS>:

//SET THE PUSHBUTTON keys port in the FPGA
void config_KEYS()
{
	volatile int * KEY_PTR= (int *) 0xFF200050;		//KEY BASE ADDRESS
	*(KEY_PTR + 2) = 0xF;							//ENABLE INTERRUPTS FOR ALL FOUR KEYS
 400:	e3a03000 	mov	r3, #0
 404:	e34f3f20 	movt	r3, #65312	; 0xff20
 408:	e3a0200f 	mov	r2, #15
 40c:	e5832058 	str	r2, [r3, #88]	; 0x58
 410:	e12fff1e 	bx	lr

00000414 <enable_A9_interrupts>:

//turn on interrupts in the ARM processor
void enable_A9_interrupts()
{
	int status= 0b01010011;
	asm("msr cpsr, %[ps]"::[ps] "r"(status));
 414:	e3a03053 	mov	r3, #83	; 0x53
 418:	e129f003 	msr	CPSR_fc, r3
 41c:	e12fff1e 	bx	lr

00000420 <__cs3_isr_irq>:
}

// Define the IRQ exception handler 
void __attribute__ ((interrupt)) __cs3_isr_irq (void) 
{ 
 420:	e24ee004 	sub	lr, lr, #4
 424:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
// Read the ICCIAR from the CPU Interface in the GIC 
	int interrupt_ID = *((int *) 0xFFFEC10C);
 428:	e3e03a13 	mvn	r3, #77824	; 0x13000
 42c:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
	if (interrupt_ID == 73) 							// check if interrupt is from the KEYS 
 430:	e3540049 	cmp	r4, #73	; 0x49
 434:	1a000001 	bne	440 <__cs3_isr_irq+0x20>
		pushbutton_ISR (); 
 438:	ebffff92 	bl	288 <pushbutton_ISR>
 43c:	ea000004 	b	454 <__cs3_isr_irq+0x34>
	else if(interrupt_ID == 199)						// check if interrupt is from the HPS0 timer 
 440:	e35400c7 	cmp	r4, #199	; 0xc7
 444:	1a000001 	bne	450 <__cs3_isr_irq+0x30>
		HPS_timer_ISR();
 448:	ebffffbd 	bl	344 <HPS_timer_ISR>
 44c:	ea000000 	b	454 <__cs3_isr_irq+0x34>
 450:	eafffffe 	b	450 <__cs3_isr_irq+0x30>
	/*else if(interrupt_ID == 29)
		A9Ptmr_ISR();*/
	else 
		while (1); // if unexpected, then stay here
// Write to the End of Interrupt Register (ICCEOIR) 
	*((int *) 0xFFFEC110) = interrupt_ID;
 454:	e3e03a13 	mvn	r3, #77824	; 0x13000
 458:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
 45c:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

00000460 <__cs3_reset>:
}
// Define the remaining exception handlers 

void __attribute__ ((interrupt)) __cs3_reset (void) 
{ 
 460:	eafffffe 	b	460 <__cs3_reset>

00000464 <__cs3_isr_undef>:
	while(1); 
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) 
{ 
 464:	eafffffe 	b	464 <__cs3_isr_undef>

00000468 <__cs3_isr_swi>:
	while(1); 
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) 
{ 
 468:	eafffffe 	b	468 <__cs3_isr_swi>

0000046c <__cs3_isr_pabort>:
	while(1); 
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) 
{ 
 46c:	eafffffe 	b	46c <__cs3_isr_pabort>

00000470 <__cs3_isr_dabort>:
	while(1); 
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) 
{ 
 470:	eafffffe 	b	470 <__cs3_isr_dabort>

00000474 <__cs3_isr_fiq>:
	while(1); 
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) 
{ 
 474:	eafffffe 	b	474 <__cs3_isr_fiq>

00000478 <main>:
	while(1); 
}

int main(void)
{
 478:	e92d4008 	push	{r3, lr}
	volatile int *LEDR_PTR=(int *)0xFF200000;
	
	set_A9_IRQ_stack();				//initialize  stack pointer
 47c:	ebffffbc 	bl	374 <set_A9_IRQ_stack>
	config_GIC();					//configure the general interrupt controller
 480:	ebffffcf 	bl	3c4 <config_GIC>
	config_HPS_timer();
 484:	ebffff74 	bl	25c <config_HPS_timer>
	config_KEYS();					//configure pushbutton KEYS to generate interrupts
 488:	ebffffdc 	bl	400 <config_KEYS>
	
	enable_A9_interrupts();			// enable interrupts in the A9 processor
 48c:	ebffffe0 	bl	414 <enable_A9_interrupts>
	
	while(1)						//wait for an interrupt
	{
		*(LEDR_PTR)=count;
 490:	e3002d94 	movw	r2, #3476	; 0xd94
 494:	e3402000 	movt	r2, #0
 498:	e3a01000 	mov	r1, #0
 49c:	e34f1f20 	movt	r1, #65312	; 0xff20
 4a0:	e5923000 	ldr	r3, [r2]
 4a4:	e5813000 	str	r3, [r1]
 4a8:	eafffffc 	b	4a0 <main+0x28>

000004ac <atexit>:
 4ac:	e1a01000 	mov	r1, r0
 4b0:	e3a00000 	mov	r0, #0
 4b4:	e92d4008 	push	{r3, lr}
 4b8:	e1a02000 	mov	r2, r0
 4bc:	e1a03000 	mov	r3, r0
 4c0:	eb00000e 	bl	500 <__register_exitproc>
 4c4:	e8bd4008 	pop	{r3, lr}
 4c8:	e12fff1e 	bx	lr

000004cc <exit>:
 4cc:	e92d4008 	push	{r3, lr}
 4d0:	e3a01000 	mov	r1, #0
 4d4:	e1a04000 	mov	r4, r0
 4d8:	eb000045 	bl	5f4 <__call_exitprocs>
 4dc:	e59f3018 	ldr	r3, [pc, #24]	; 4fc <exit+0x30>
 4e0:	e5930000 	ldr	r0, [r3]
 4e4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 4e8:	e3530000 	cmp	r3, #0
 4ec:	11a0e00f 	movne	lr, pc
 4f0:	112fff13 	bxne	r3
 4f4:	e1a00004 	mov	r0, r4
 4f8:	eb0000c9 	bl	824 <_exit>
 4fc:	000008cc 	.word	0x000008cc

00000500 <__register_exitproc>:
 500:	e59fc0e4 	ldr	r12, [pc, #228]	; 5ec <__register_exitproc+0xec>
 504:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 508:	e59c4000 	ldr	r4, [r12]
 50c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 510:	e35c0000 	cmp	r12, #0
 514:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 518:	e59c5004 	ldr	r5, [r12, #4]
 51c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 520:	e355001f 	cmp	r5, #31
 524:	e24dd010 	sub	sp, sp, #16
 528:	e1a06000 	mov	r6, r0
 52c:	da000015 	ble	588 <__register_exitproc+0x88>
 530:	e59f00b8 	ldr	r0, [pc, #184]	; 5f0 <__register_exitproc+0xf0>
 534:	e3500000 	cmp	r0, #0
 538:	1a000001 	bne	544 <__register_exitproc+0x44>
 53c:	e3e00000 	mvn	r0, #0
 540:	ea000018 	b	5a8 <__register_exitproc+0xa8>
 544:	e3a00e19 	mov	r0, #400	; 0x190
 548:	e58d100c 	str	r1, [sp, #12]
 54c:	e58d2008 	str	r2, [sp, #8]
 550:	e58d3004 	str	r3, [sp, #4]
 554:	e320f000 	nop	{0}
 558:	e250c000 	subs	r12, r0, #0
 55c:	e59d100c 	ldr	r1, [sp, #12]
 560:	e59d2008 	ldr	r2, [sp, #8]
 564:	e59d3004 	ldr	r3, [sp, #4]
 568:	0afffff3 	beq	53c <__register_exitproc+0x3c>
 56c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 570:	e3a00000 	mov	r0, #0
 574:	e58c0004 	str	r0, [r12, #4]
 578:	e58c5000 	str	r5, [r12]
 57c:	e584c148 	str	r12, [r4, #328]	; 0x148
 580:	e58c0188 	str	r0, [r12, #392]	; 0x188
 584:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 588:	e3560000 	cmp	r6, #0
 58c:	e59c4004 	ldr	r4, [r12, #4]
 590:	1a000007 	bne	5b4 <__register_exitproc+0xb4>
 594:	e2843002 	add	r3, r4, #2
 598:	e2844001 	add	r4, r4, #1
 59c:	e78c1103 	str	r1, [r12, r3, lsl #2]
 5a0:	e58c4004 	str	r4, [r12, #4]
 5a4:	e3a00000 	mov	r0, #0
 5a8:	e28dd010 	add	sp, sp, #16
 5ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 5b0:	e12fff1e 	bx	lr
 5b4:	e3a00001 	mov	r0, #1
 5b8:	e1a00410 	lsl	r0, r0, r4
 5bc:	e08c8104 	add	r8, r12, r4, lsl #2
 5c0:	e3560002 	cmp	r6, #2
 5c4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 5c8:	e5883108 	str	r3, [r8, #264]	; 0x108
 5cc:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 5d0:	e1877000 	orr	r7, r7, r0
 5d4:	01830000 	orreq	r0, r3, r0
 5d8:	e1a05008 	mov	r5, r8
 5dc:	e5882088 	str	r2, [r8, #136]	; 0x88
 5e0:	e58c7188 	str	r7, [r12, #392]	; 0x188
 5e4:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 5e8:	eaffffe9 	b	594 <__register_exitproc+0x94>
 5ec:	000008cc 	.word	0x000008cc
 5f0:	00000000 	.word	0x00000000

000005f4 <__call_exitprocs>:
 5f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 5f8:	e59f3168 	ldr	r3, [pc, #360]	; 768 <__call_exitprocs+0x174>
 5fc:	e5933000 	ldr	r3, [r3]
 600:	e24dd014 	sub	sp, sp, #20
 604:	e58d3004 	str	r3, [sp, #4]
 608:	e2833f52 	add	r3, r3, #328	; 0x148
 60c:	e58d0008 	str	r0, [sp, #8]
 610:	e58d300c 	str	r3, [sp, #12]
 614:	e1a07001 	mov	r7, r1
 618:	e3a08001 	mov	r8, #1
 61c:	e59d3004 	ldr	r3, [sp, #4]
 620:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 624:	e3560000 	cmp	r6, #0
 628:	e59db00c 	ldr	r11, [sp, #12]
 62c:	0a000033 	beq	700 <__call_exitprocs+0x10c>
 630:	e5965004 	ldr	r5, [r6, #4]
 634:	e2554001 	subs	r4, r5, #1
 638:	5286a088 	addpl	r10, r6, #136	; 0x88
 63c:	5285501f 	addpl	r5, r5, #31
 640:	508a5105 	addpl	r5, r10, r5, lsl #2
 644:	5a000007 	bpl	668 <__call_exitprocs+0x74>
 648:	ea000029 	b	6f4 <__call_exitprocs+0x100>
 64c:	e5953000 	ldr	r3, [r5]
 650:	e1530007 	cmp	r3, r7
 654:	0a000005 	beq	670 <__call_exitprocs+0x7c>
 658:	e2444001 	sub	r4, r4, #1
 65c:	e3740001 	cmn	r4, #1
 660:	e2455004 	sub	r5, r5, #4
 664:	0a000022 	beq	6f4 <__call_exitprocs+0x100>
 668:	e3570000 	cmp	r7, #0
 66c:	1afffff6 	bne	64c <__call_exitprocs+0x58>
 670:	e5963004 	ldr	r3, [r6, #4]
 674:	e06a2005 	rsb	r2, r10, r5
 678:	e2433001 	sub	r3, r3, #1
 67c:	e0862002 	add	r2, r6, r2
 680:	e1530004 	cmp	r3, r4
 684:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 688:	13a01000 	movne	r1, #0
 68c:	05864004 	streq	r4, [r6, #4]
 690:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 694:	e3530000 	cmp	r3, #0
 698:	0affffee 	beq	658 <__call_exitprocs+0x64>
 69c:	e1a02418 	lsl	r2, r8, r4
 6a0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 6a4:	e1120001 	tst	r2, r1
 6a8:	e5969004 	ldr	r9, [r6, #4]
 6ac:	0a000016 	beq	70c <__call_exitprocs+0x118>
 6b0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 6b4:	e1120001 	tst	r2, r1
 6b8:	1a000016 	bne	718 <__call_exitprocs+0x124>
 6bc:	e59d0008 	ldr	r0, [sp, #8]
 6c0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 6c4:	e1a0e00f 	mov	lr, pc
 6c8:	e12fff13 	bx	r3
 6cc:	e5963004 	ldr	r3, [r6, #4]
 6d0:	e1530009 	cmp	r3, r9
 6d4:	1affffd0 	bne	61c <__call_exitprocs+0x28>
 6d8:	e59b3000 	ldr	r3, [r11]
 6dc:	e1530006 	cmp	r3, r6
 6e0:	1affffcd 	bne	61c <__call_exitprocs+0x28>
 6e4:	e2444001 	sub	r4, r4, #1
 6e8:	e3740001 	cmn	r4, #1
 6ec:	e2455004 	sub	r5, r5, #4
 6f0:	1affffdc 	bne	668 <__call_exitprocs+0x74>
 6f4:	e59f1070 	ldr	r1, [pc, #112]	; 76c <__call_exitprocs+0x178>
 6f8:	e3510000 	cmp	r1, #0
 6fc:	1a000009 	bne	728 <__call_exitprocs+0x134>
 700:	e28dd014 	add	sp, sp, #20
 704:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 708:	e12fff1e 	bx	lr
 70c:	e1a0e00f 	mov	lr, pc
 710:	e12fff13 	bx	r3
 714:	eaffffec 	b	6cc <__call_exitprocs+0xd8>
 718:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 71c:	e1a0e00f 	mov	lr, pc
 720:	e12fff13 	bx	r3
 724:	eaffffe8 	b	6cc <__call_exitprocs+0xd8>
 728:	e5963004 	ldr	r3, [r6, #4]
 72c:	e3530000 	cmp	r3, #0
 730:	e5963000 	ldr	r3, [r6]
 734:	1a000008 	bne	75c <__call_exitprocs+0x168>
 738:	e3530000 	cmp	r3, #0
 73c:	0a000006 	beq	75c <__call_exitprocs+0x168>
 740:	e1a00006 	mov	r0, r6
 744:	e58b3000 	str	r3, [r11]
 748:	e320f000 	nop	{0}
 74c:	e59b6000 	ldr	r6, [r11]
 750:	e3560000 	cmp	r6, #0
 754:	1affffb5 	bne	630 <__call_exitprocs+0x3c>
 758:	eaffffe8 	b	700 <__call_exitprocs+0x10c>
 75c:	e1a0b006 	mov	r11, r6
 760:	e1a06003 	mov	r6, r3
 764:	eafffff9 	b	750 <__call_exitprocs+0x15c>
 768:	000008cc 	.word	0x000008cc
 76c:	00000000 	.word	0x00000000

00000770 <register_fini>:
 770:	e92d4008 	push	{r3, lr}
 774:	e59f3010 	ldr	r3, [pc, #16]	; 78c <register_fini+0x1c>
 778:	e3530000 	cmp	r3, #0
 77c:	159f000c 	ldrne	r0, [pc, #12]	; 790 <register_fini+0x20>
 780:	1bffff49 	blne	4ac <atexit>
 784:	e8bd4008 	pop	{r3, lr}
 788:	e12fff1e 	bx	lr
 78c:	000008f4 	.word	0x000008f4
 790:	00000794 	.word	0x00000794

00000794 <__libc_fini_array>:
 794:	e92d4038 	push	{r3, r4, r5, lr}
 798:	e59f5030 	ldr	r5, [pc, #48]	; 7d0 <__libc_fini_array+0x3c>
 79c:	e59f4030 	ldr	r4, [pc, #48]	; 7d4 <__libc_fini_array+0x40>
 7a0:	e0654004 	rsb	r4, r5, r4
 7a4:	e1b04144 	asrs	r4, r4, #2
 7a8:	10855104 	addne	r5, r5, r4, lsl #2
 7ac:	0a000004 	beq	7c4 <__libc_fini_array+0x30>
 7b0:	e5353004 	ldr	r3, [r5, #-4]!
 7b4:	e1a0e00f 	mov	lr, pc
 7b8:	e12fff13 	bx	r3
 7bc:	e2544001 	subs	r4, r4, #1
 7c0:	1afffffa 	bne	7b0 <__libc_fini_array+0x1c>
 7c4:	eb00004a 	bl	8f4 <__libc_fini>
 7c8:	e8bd4038 	pop	{r3, r4, r5, lr}
 7cc:	e12fff1e 	bx	lr
 7d0:	0000090c 	.word	0x0000090c
 7d4:	00000910 	.word	0x00000910

000007d8 <__cs3_premain>:
 7d8:	e92d4008 	push	{r3, lr}
 7dc:	eb000017 	bl	840 <__libc_init_array>
 7e0:	e59f3030 	ldr	r3, [pc, #48]	; 818 <__cs3_premain+0x40>
 7e4:	e3530000 	cmp	r3, #0
 7e8:	15930000 	ldrne	r0, [r3]
 7ec:	01a00003 	moveq	r0, r3
 7f0:	e59f3024 	ldr	r3, [pc, #36]	; 81c <__cs3_premain+0x44>
 7f4:	e3530000 	cmp	r3, #0
 7f8:	15931000 	ldrne	r1, [r3]
 7fc:	01a01003 	moveq	r1, r3
 800:	e3a02000 	mov	r2, #0
 804:	ebffff1b 	bl	478 <main>
 808:	e59f3010 	ldr	r3, [pc, #16]	; 820 <__cs3_premain+0x48>
 80c:	e3530000 	cmp	r3, #0
 810:	1bffff2d 	blne	4cc <exit>
 814:	eafffffe 	b	814 <__cs3_premain+0x3c>
	...
 820:	000004cc 	.word	0x000004cc

00000824 <_exit>:
 824:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 828:	e3a00018 	mov	r0, #24
 82c:	e59f1004 	ldr	r1, [pc, #4]	; 838 <_exit+0x14>
 830:	ef123456 	svc	0x00123456
 834:	eafffffe 	b	834 <_exit+0x10>
 838:	00020026 	.word	0x00020026

0000083c <__cs3_isr_interrupt>:
 83c:	eafffffe 	b	83c <__cs3_isr_interrupt>

00000840 <__libc_init_array>:
 840:	e92d4070 	push	{r4, r5, r6, lr}
 844:	e59f506c 	ldr	r5, [pc, #108]	; 8b8 <__libc_init_array+0x78>
 848:	e59f606c 	ldr	r6, [pc, #108]	; 8bc <__libc_init_array+0x7c>
 84c:	e0656006 	rsb	r6, r5, r6
 850:	e1b06146 	asrs	r6, r6, #2
 854:	12455004 	subne	r5, r5, #4
 858:	13a04000 	movne	r4, #0
 85c:	0a000005 	beq	878 <__libc_init_array+0x38>
 860:	e5b53004 	ldr	r3, [r5, #4]!
 864:	e2844001 	add	r4, r4, #1
 868:	e1a0e00f 	mov	lr, pc
 86c:	e12fff13 	bx	r3
 870:	e1560004 	cmp	r6, r4
 874:	1afffff9 	bne	860 <__libc_init_array+0x20>
 878:	e59f5040 	ldr	r5, [pc, #64]	; 8c0 <__libc_init_array+0x80>
 87c:	e59f6040 	ldr	r6, [pc, #64]	; 8c4 <__libc_init_array+0x84>
 880:	e0656006 	rsb	r6, r5, r6
 884:	eb000012 	bl	8d4 <_init>
 888:	e1b06146 	asrs	r6, r6, #2
 88c:	12455004 	subne	r5, r5, #4
 890:	13a04000 	movne	r4, #0
 894:	0a000005 	beq	8b0 <__libc_init_array+0x70>
 898:	e5b53004 	ldr	r3, [r5, #4]!
 89c:	e2844001 	add	r4, r4, #1
 8a0:	e1a0e00f 	mov	lr, pc
 8a4:	e12fff13 	bx	r3
 8a8:	e1560004 	cmp	r6, r4
 8ac:	1afffff9 	bne	898 <__libc_init_array+0x58>
 8b0:	e8bd4070 	pop	{r4, r5, r6, lr}
 8b4:	e12fff1e 	bx	lr
 8b8:	000008ec 	.word	0x000008ec
 8bc:	000008ec 	.word	0x000008ec
 8c0:	000008ec 	.word	0x000008ec
 8c4:	000008f4 	.word	0x000008f4

Disassembly of section .rodata:

000008cc <_global_impure_ptr>:
 8cc:	00000948 00000043                       H...C...

000008d4 <_init>:
 8d4:	e1a0c00d 	mov	r12, sp
 8d8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8dc:	e24cb004 	sub	r11, r12, #4
 8e0:	e24bd028 	sub	sp, r11, #40	; 0x28
 8e4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8e8:	e12fff1e 	bx	lr

000008ec <__init_array_start>:
 8ec:	00000770 	.word	0x00000770

000008f0 <__frame_dummy_init_array_entry>:
 8f0:	00000208                                ....

000008f4 <__libc_fini>:
 8f4:	e1a0c00d 	mov	r12, sp
 8f8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8fc:	e24cb004 	sub	r11, r12, #4
 900:	e24bd028 	sub	sp, r11, #40	; 0x28
 904:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 908:	e12fff1e 	bx	lr

0000090c <__fini_array_start>:
 90c:	000001c4 	.word	0x000001c4

00000910 <__cs3_regions>:
 910:	00000000 	.word	0x00000000
 914:	00000040 	.word	0x00000040
 918:	00000040 	.word	0x00000040
 91c:	00000d38 	.word	0x00000d38
 920:	00000020 	.word	0x00000020

00000924 <__cs3_regions_end>:
 924:	00000000 	.word	0x00000000
